### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type Address {
  addressOne: String!
  addressTwo: String
  cityId: City
  clients(after: ClientWhereUniqueInput, before: ClientWhereUniqueInput, first: Int, last: Int, skip: Int): [Client!]!
  companies(after: CompanyWhereUniqueInput, before: CompanyWhereUniqueInput, first: Int, last: Int, skip: Int): [Company!]!
  countryId: Country
  createdAt: DateTime!
  id: String!
  postalCode: String
  stateId: State
  suppliers(after: SupplierWhereUniqueInput, before: SupplierWhereUniqueInput, first: Int, last: Int, skip: Int): [Supplier!]!
  type: AddressType
  updatedAt: DateTime!
}

input AddressCreateInput {
  addressOne: String!
  addressTwo: String
  cityId: CityCreateOneWithoutAddressesInput
  clients: ClientCreateManyWithoutAddressesInput
  companies: CompanyCreateManyWithoutAddressesInput
  countryId: CountryCreateOneWithoutAddressesInput
  createdAt: DateTime
  id: String
  postalCode: String
  projects: ProjectCreateManyWithoutAddressIdInput
  stateId: StateCreateOneWithoutAddressesInput
  suppliers: SupplierCreateManyWithoutAddressesInput
  type: AddressType
  updatedAt: DateTime
}

input AddressCreateManyWithoutCityIdInput {
  connect: [AddressWhereUniqueInput!]
  create: [AddressCreateWithoutCityIdInput!]
}

input AddressCreateManyWithoutClientsInput {
  connect: [AddressWhereUniqueInput!]
  create: [AddressCreateWithoutClientsInput!]
}

input AddressCreateManyWithoutCompaniesInput {
  connect: [AddressWhereUniqueInput!]
  create: [AddressCreateWithoutCompaniesInput!]
}

input AddressCreateManyWithoutCountryIdInput {
  connect: [AddressWhereUniqueInput!]
  create: [AddressCreateWithoutCountryIdInput!]
}

input AddressCreateManyWithoutStateIdInput {
  connect: [AddressWhereUniqueInput!]
  create: [AddressCreateWithoutStateIdInput!]
}

input AddressCreateManyWithoutSuppliersInput {
  connect: [AddressWhereUniqueInput!]
  create: [AddressCreateWithoutSuppliersInput!]
}

input AddressCreateOneWithoutProjectsInput {
  connect: AddressWhereUniqueInput
  create: AddressCreateWithoutProjectsInput
}

input AddressCreateWithoutCityIdInput {
  addressOne: String!
  addressTwo: String
  clients: ClientCreateManyWithoutAddressesInput
  companies: CompanyCreateManyWithoutAddressesInput
  countryId: CountryCreateOneWithoutAddressesInput
  createdAt: DateTime
  id: String
  postalCode: String
  projects: ProjectCreateManyWithoutAddressIdInput
  stateId: StateCreateOneWithoutAddressesInput
  suppliers: SupplierCreateManyWithoutAddressesInput
  type: AddressType
  updatedAt: DateTime
}

input AddressCreateWithoutClientsInput {
  addressOne: String!
  addressTwo: String
  cityId: CityCreateOneWithoutAddressesInput
  companies: CompanyCreateManyWithoutAddressesInput
  countryId: CountryCreateOneWithoutAddressesInput
  createdAt: DateTime
  id: String
  postalCode: String
  projects: ProjectCreateManyWithoutAddressIdInput
  stateId: StateCreateOneWithoutAddressesInput
  suppliers: SupplierCreateManyWithoutAddressesInput
  type: AddressType
  updatedAt: DateTime
}

input AddressCreateWithoutCompaniesInput {
  addressOne: String!
  addressTwo: String
  cityId: CityCreateOneWithoutAddressesInput
  clients: ClientCreateManyWithoutAddressesInput
  countryId: CountryCreateOneWithoutAddressesInput
  createdAt: DateTime
  id: String
  postalCode: String
  projects: ProjectCreateManyWithoutAddressIdInput
  stateId: StateCreateOneWithoutAddressesInput
  suppliers: SupplierCreateManyWithoutAddressesInput
  type: AddressType
  updatedAt: DateTime
}

input AddressCreateWithoutCountryIdInput {
  addressOne: String!
  addressTwo: String
  cityId: CityCreateOneWithoutAddressesInput
  clients: ClientCreateManyWithoutAddressesInput
  companies: CompanyCreateManyWithoutAddressesInput
  createdAt: DateTime
  id: String
  postalCode: String
  projects: ProjectCreateManyWithoutAddressIdInput
  stateId: StateCreateOneWithoutAddressesInput
  suppliers: SupplierCreateManyWithoutAddressesInput
  type: AddressType
  updatedAt: DateTime
}

input AddressCreateWithoutProjectsInput {
  addressOne: String!
  addressTwo: String
  cityId: CityCreateOneWithoutAddressesInput
  clients: ClientCreateManyWithoutAddressesInput
  companies: CompanyCreateManyWithoutAddressesInput
  countryId: CountryCreateOneWithoutAddressesInput
  createdAt: DateTime
  id: String
  postalCode: String
  stateId: StateCreateOneWithoutAddressesInput
  suppliers: SupplierCreateManyWithoutAddressesInput
  type: AddressType
  updatedAt: DateTime
}

input AddressCreateWithoutStateIdInput {
  addressOne: String!
  addressTwo: String
  cityId: CityCreateOneWithoutAddressesInput
  clients: ClientCreateManyWithoutAddressesInput
  companies: CompanyCreateManyWithoutAddressesInput
  countryId: CountryCreateOneWithoutAddressesInput
  createdAt: DateTime
  id: String
  postalCode: String
  projects: ProjectCreateManyWithoutAddressIdInput
  suppliers: SupplierCreateManyWithoutAddressesInput
  type: AddressType
  updatedAt: DateTime
}

input AddressCreateWithoutSuppliersInput {
  addressOne: String!
  addressTwo: String
  cityId: CityCreateOneWithoutAddressesInput
  clients: ClientCreateManyWithoutAddressesInput
  companies: CompanyCreateManyWithoutAddressesInput
  countryId: CountryCreateOneWithoutAddressesInput
  createdAt: DateTime
  id: String
  postalCode: String
  projects: ProjectCreateManyWithoutAddressIdInput
  stateId: StateCreateOneWithoutAddressesInput
  type: AddressType
  updatedAt: DateTime
}

input AddressFilter {
  every: AddressWhereInput
  none: AddressWhereInput
  some: AddressWhereInput
}

input AddressScalarWhereInput {
  addressOne: StringFilter
  addressTwo: NullableStringFilter
  AND: [AddressScalarWhereInput!]
  clients: ClientFilter
  companies: CompanyFilter
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [AddressScalarWhereInput!]
  OR: [AddressScalarWhereInput!]
  postalCode: NullableStringFilter
  projects: ProjectFilter
  suppliers: SupplierFilter
  type: AddressType
  updatedAt: DateTimeFilter
}

enum AddressType {
  COMMERCIAL
  RESIDENTIAL
}

input AddressUpdateInput {
  addressOne: String
  addressTwo: String
  cityId: CityUpdateOneWithoutAddressesInput
  clients: ClientUpdateManyWithoutAddressesInput
  companies: CompanyUpdateManyWithoutAddressesInput
  countryId: CountryUpdateOneWithoutAddressesInput
  createdAt: DateTime
  id: String
  postalCode: String
  projects: ProjectUpdateManyWithoutAddressIdInput
  stateId: StateUpdateOneWithoutAddressesInput
  suppliers: SupplierUpdateManyWithoutAddressesInput
  type: AddressType
  updatedAt: DateTime
}

input AddressUpdateManyDataInput {
  addressOne: String
  addressTwo: String
  createdAt: DateTime
  id: String
  postalCode: String
  type: AddressType
  updatedAt: DateTime
}

input AddressUpdateManyMutationInput {
  addressOne: String
  addressTwo: String
  createdAt: DateTime
  id: String
  postalCode: String
  type: AddressType
  updatedAt: DateTime
}

input AddressUpdateManyWithoutCityIdInput {
  connect: [AddressWhereUniqueInput!]
  create: [AddressCreateWithoutCityIdInput!]
  delete: [AddressWhereUniqueInput!]
  deleteMany: [AddressScalarWhereInput!]
  disconnect: [AddressWhereUniqueInput!]
  set: [AddressWhereUniqueInput!]
  update: [AddressUpdateWithWhereUniqueWithoutCityIdInput!]
  updateMany: [AddressUpdateManyWithWhereNestedInput!]
  upsert: [AddressUpsertWithWhereUniqueWithoutCityIdInput!]
}

input AddressUpdateManyWithoutClientsInput {
  connect: [AddressWhereUniqueInput!]
  create: [AddressCreateWithoutClientsInput!]
  delete: [AddressWhereUniqueInput!]
  deleteMany: [AddressScalarWhereInput!]
  disconnect: [AddressWhereUniqueInput!]
  set: [AddressWhereUniqueInput!]
  update: [AddressUpdateWithWhereUniqueWithoutClientsInput!]
  updateMany: [AddressUpdateManyWithWhereNestedInput!]
  upsert: [AddressUpsertWithWhereUniqueWithoutClientsInput!]
}

input AddressUpdateManyWithoutCompaniesInput {
  connect: [AddressWhereUniqueInput!]
  create: [AddressCreateWithoutCompaniesInput!]
  delete: [AddressWhereUniqueInput!]
  deleteMany: [AddressScalarWhereInput!]
  disconnect: [AddressWhereUniqueInput!]
  set: [AddressWhereUniqueInput!]
  update: [AddressUpdateWithWhereUniqueWithoutCompaniesInput!]
  updateMany: [AddressUpdateManyWithWhereNestedInput!]
  upsert: [AddressUpsertWithWhereUniqueWithoutCompaniesInput!]
}

input AddressUpdateManyWithoutCountryIdInput {
  connect: [AddressWhereUniqueInput!]
  create: [AddressCreateWithoutCountryIdInput!]
  delete: [AddressWhereUniqueInput!]
  deleteMany: [AddressScalarWhereInput!]
  disconnect: [AddressWhereUniqueInput!]
  set: [AddressWhereUniqueInput!]
  update: [AddressUpdateWithWhereUniqueWithoutCountryIdInput!]
  updateMany: [AddressUpdateManyWithWhereNestedInput!]
  upsert: [AddressUpsertWithWhereUniqueWithoutCountryIdInput!]
}

input AddressUpdateManyWithoutStateIdInput {
  connect: [AddressWhereUniqueInput!]
  create: [AddressCreateWithoutStateIdInput!]
  delete: [AddressWhereUniqueInput!]
  deleteMany: [AddressScalarWhereInput!]
  disconnect: [AddressWhereUniqueInput!]
  set: [AddressWhereUniqueInput!]
  update: [AddressUpdateWithWhereUniqueWithoutStateIdInput!]
  updateMany: [AddressUpdateManyWithWhereNestedInput!]
  upsert: [AddressUpsertWithWhereUniqueWithoutStateIdInput!]
}

input AddressUpdateManyWithoutSuppliersInput {
  connect: [AddressWhereUniqueInput!]
  create: [AddressCreateWithoutSuppliersInput!]
  delete: [AddressWhereUniqueInput!]
  deleteMany: [AddressScalarWhereInput!]
  disconnect: [AddressWhereUniqueInput!]
  set: [AddressWhereUniqueInput!]
  update: [AddressUpdateWithWhereUniqueWithoutSuppliersInput!]
  updateMany: [AddressUpdateManyWithWhereNestedInput!]
  upsert: [AddressUpsertWithWhereUniqueWithoutSuppliersInput!]
}

input AddressUpdateManyWithWhereNestedInput {
  data: AddressUpdateManyDataInput!
  where: AddressScalarWhereInput!
}

input AddressUpdateOneWithoutProjectsInput {
  connect: AddressWhereUniqueInput
  create: AddressCreateWithoutProjectsInput
  delete: Boolean
  disconnect: Boolean
  update: AddressUpdateWithoutProjectsDataInput
  upsert: AddressUpsertWithoutProjectsInput
}

input AddressUpdateWithoutCityIdDataInput {
  addressOne: String
  addressTwo: String
  clients: ClientUpdateManyWithoutAddressesInput
  companies: CompanyUpdateManyWithoutAddressesInput
  countryId: CountryUpdateOneWithoutAddressesInput
  createdAt: DateTime
  id: String
  postalCode: String
  projects: ProjectUpdateManyWithoutAddressIdInput
  stateId: StateUpdateOneWithoutAddressesInput
  suppliers: SupplierUpdateManyWithoutAddressesInput
  type: AddressType
  updatedAt: DateTime
}

input AddressUpdateWithoutClientsDataInput {
  addressOne: String
  addressTwo: String
  cityId: CityUpdateOneWithoutAddressesInput
  companies: CompanyUpdateManyWithoutAddressesInput
  countryId: CountryUpdateOneWithoutAddressesInput
  createdAt: DateTime
  id: String
  postalCode: String
  projects: ProjectUpdateManyWithoutAddressIdInput
  stateId: StateUpdateOneWithoutAddressesInput
  suppliers: SupplierUpdateManyWithoutAddressesInput
  type: AddressType
  updatedAt: DateTime
}

input AddressUpdateWithoutCompaniesDataInput {
  addressOne: String
  addressTwo: String
  cityId: CityUpdateOneWithoutAddressesInput
  clients: ClientUpdateManyWithoutAddressesInput
  countryId: CountryUpdateOneWithoutAddressesInput
  createdAt: DateTime
  id: String
  postalCode: String
  projects: ProjectUpdateManyWithoutAddressIdInput
  stateId: StateUpdateOneWithoutAddressesInput
  suppliers: SupplierUpdateManyWithoutAddressesInput
  type: AddressType
  updatedAt: DateTime
}

input AddressUpdateWithoutCountryIdDataInput {
  addressOne: String
  addressTwo: String
  cityId: CityUpdateOneWithoutAddressesInput
  clients: ClientUpdateManyWithoutAddressesInput
  companies: CompanyUpdateManyWithoutAddressesInput
  createdAt: DateTime
  id: String
  postalCode: String
  projects: ProjectUpdateManyWithoutAddressIdInput
  stateId: StateUpdateOneWithoutAddressesInput
  suppliers: SupplierUpdateManyWithoutAddressesInput
  type: AddressType
  updatedAt: DateTime
}

input AddressUpdateWithoutProjectsDataInput {
  addressOne: String
  addressTwo: String
  cityId: CityUpdateOneWithoutAddressesInput
  clients: ClientUpdateManyWithoutAddressesInput
  companies: CompanyUpdateManyWithoutAddressesInput
  countryId: CountryUpdateOneWithoutAddressesInput
  createdAt: DateTime
  id: String
  postalCode: String
  stateId: StateUpdateOneWithoutAddressesInput
  suppliers: SupplierUpdateManyWithoutAddressesInput
  type: AddressType
  updatedAt: DateTime
}

input AddressUpdateWithoutStateIdDataInput {
  addressOne: String
  addressTwo: String
  cityId: CityUpdateOneWithoutAddressesInput
  clients: ClientUpdateManyWithoutAddressesInput
  companies: CompanyUpdateManyWithoutAddressesInput
  countryId: CountryUpdateOneWithoutAddressesInput
  createdAt: DateTime
  id: String
  postalCode: String
  projects: ProjectUpdateManyWithoutAddressIdInput
  suppliers: SupplierUpdateManyWithoutAddressesInput
  type: AddressType
  updatedAt: DateTime
}

input AddressUpdateWithoutSuppliersDataInput {
  addressOne: String
  addressTwo: String
  cityId: CityUpdateOneWithoutAddressesInput
  clients: ClientUpdateManyWithoutAddressesInput
  companies: CompanyUpdateManyWithoutAddressesInput
  countryId: CountryUpdateOneWithoutAddressesInput
  createdAt: DateTime
  id: String
  postalCode: String
  projects: ProjectUpdateManyWithoutAddressIdInput
  stateId: StateUpdateOneWithoutAddressesInput
  type: AddressType
  updatedAt: DateTime
}

input AddressUpdateWithWhereUniqueWithoutCityIdInput {
  data: AddressUpdateWithoutCityIdDataInput!
  where: AddressWhereUniqueInput!
}

input AddressUpdateWithWhereUniqueWithoutClientsInput {
  data: AddressUpdateWithoutClientsDataInput!
  where: AddressWhereUniqueInput!
}

input AddressUpdateWithWhereUniqueWithoutCompaniesInput {
  data: AddressUpdateWithoutCompaniesDataInput!
  where: AddressWhereUniqueInput!
}

input AddressUpdateWithWhereUniqueWithoutCountryIdInput {
  data: AddressUpdateWithoutCountryIdDataInput!
  where: AddressWhereUniqueInput!
}

input AddressUpdateWithWhereUniqueWithoutStateIdInput {
  data: AddressUpdateWithoutStateIdDataInput!
  where: AddressWhereUniqueInput!
}

input AddressUpdateWithWhereUniqueWithoutSuppliersInput {
  data: AddressUpdateWithoutSuppliersDataInput!
  where: AddressWhereUniqueInput!
}

input AddressUpsertWithoutProjectsInput {
  create: AddressCreateWithoutProjectsInput!
  update: AddressUpdateWithoutProjectsDataInput!
}

input AddressUpsertWithWhereUniqueWithoutCityIdInput {
  create: AddressCreateWithoutCityIdInput!
  update: AddressUpdateWithoutCityIdDataInput!
  where: AddressWhereUniqueInput!
}

input AddressUpsertWithWhereUniqueWithoutClientsInput {
  create: AddressCreateWithoutClientsInput!
  update: AddressUpdateWithoutClientsDataInput!
  where: AddressWhereUniqueInput!
}

input AddressUpsertWithWhereUniqueWithoutCompaniesInput {
  create: AddressCreateWithoutCompaniesInput!
  update: AddressUpdateWithoutCompaniesDataInput!
  where: AddressWhereUniqueInput!
}

input AddressUpsertWithWhereUniqueWithoutCountryIdInput {
  create: AddressCreateWithoutCountryIdInput!
  update: AddressUpdateWithoutCountryIdDataInput!
  where: AddressWhereUniqueInput!
}

input AddressUpsertWithWhereUniqueWithoutStateIdInput {
  create: AddressCreateWithoutStateIdInput!
  update: AddressUpdateWithoutStateIdDataInput!
  where: AddressWhereUniqueInput!
}

input AddressUpsertWithWhereUniqueWithoutSuppliersInput {
  create: AddressCreateWithoutSuppliersInput!
  update: AddressUpdateWithoutSuppliersDataInput!
  where: AddressWhereUniqueInput!
}

input AddressWhereInput {
  addressOne: StringFilter
  addressTwo: NullableStringFilter
  AND: [AddressWhereInput!]
  cityId: CityWhereInput
  clients: ClientFilter
  companies: CompanyFilter
  countryId: CountryWhereInput
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [AddressWhereInput!]
  OR: [AddressWhereInput!]
  postalCode: NullableStringFilter
  projects: ProjectFilter
  stateId: StateWhereInput
  suppliers: SupplierFilter
  type: AddressType
  updatedAt: DateTimeFilter
}

input AddressWhereUniqueInput {
  id: String
}

type BatchPayload {
  count: Int!
}

type BillingProfile {
  createdAt: DateTime!
  id: String!
  paymentMethodId: PaymentMethod!
  updatedAt: DateTime!
}

input BillingProfileCreateInput {
  createdAt: DateTime
  id: String
  paymentMethodId: PaymentMethodCreateOneWithoutBillingProfilesInput!
  updatedAt: DateTime
}

input BillingProfileCreateManyWithoutPaymentMethodIdInput {
  connect: [BillingProfileWhereUniqueInput!]
  create: [BillingProfileCreateWithoutPaymentMethodIdInput!]
}

input BillingProfileCreateWithoutPaymentMethodIdInput {
  createdAt: DateTime
  id: String
  updatedAt: DateTime
}

input BillingProfileFilter {
  every: BillingProfileWhereInput
  none: BillingProfileWhereInput
  some: BillingProfileWhereInput
}

input BillingProfileScalarWhereInput {
  AND: [BillingProfileScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [BillingProfileScalarWhereInput!]
  OR: [BillingProfileScalarWhereInput!]
  updatedAt: DateTimeFilter
}

input BillingProfileUpdateInput {
  createdAt: DateTime
  id: String
  paymentMethodId: PaymentMethodUpdateOneRequiredWithoutBillingProfilesInput
  updatedAt: DateTime
}

input BillingProfileUpdateManyDataInput {
  createdAt: DateTime
  id: String
  updatedAt: DateTime
}

input BillingProfileUpdateManyMutationInput {
  createdAt: DateTime
  id: String
  updatedAt: DateTime
}

input BillingProfileUpdateManyWithoutPaymentMethodIdInput {
  connect: [BillingProfileWhereUniqueInput!]
  create: [BillingProfileCreateWithoutPaymentMethodIdInput!]
  delete: [BillingProfileWhereUniqueInput!]
  deleteMany: [BillingProfileScalarWhereInput!]
  disconnect: [BillingProfileWhereUniqueInput!]
  set: [BillingProfileWhereUniqueInput!]
  update: [BillingProfileUpdateWithWhereUniqueWithoutPaymentMethodIdInput!]
  updateMany: [BillingProfileUpdateManyWithWhereNestedInput!]
  upsert: [BillingProfileUpsertWithWhereUniqueWithoutPaymentMethodIdInput!]
}

input BillingProfileUpdateManyWithWhereNestedInput {
  data: BillingProfileUpdateManyDataInput!
  where: BillingProfileScalarWhereInput!
}

input BillingProfileUpdateWithoutPaymentMethodIdDataInput {
  createdAt: DateTime
  id: String
  updatedAt: DateTime
}

input BillingProfileUpdateWithWhereUniqueWithoutPaymentMethodIdInput {
  data: BillingProfileUpdateWithoutPaymentMethodIdDataInput!
  where: BillingProfileWhereUniqueInput!
}

input BillingProfileUpsertWithWhereUniqueWithoutPaymentMethodIdInput {
  create: BillingProfileCreateWithoutPaymentMethodIdInput!
  update: BillingProfileUpdateWithoutPaymentMethodIdDataInput!
  where: BillingProfileWhereUniqueInput!
}

input BillingProfileWhereInput {
  AND: [BillingProfileWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [BillingProfileWhereInput!]
  OR: [BillingProfileWhereInput!]
  paymentMethodId: PaymentMethodWhereInput
  updatedAt: DateTimeFilter
}

input BillingProfileWhereUniqueInput {
  id: String
}

input BooleanFilter {
  equals: Boolean
  not: Boolean
}

type ChangeOrder {
  createdAt: DateTime!
  description: String!
  id: String!
  projectId: Project!
  requestedByUserId: User!
  status: ChangeOrderStatus!
  updatedAt: DateTime!
}

input ChangeOrderCreateInput {
  createdAt: DateTime
  description: String!
  id: String
  projectId: ProjectCreateOneWithoutChangeOrdersInput!
  requestedByUserId: UserCreateOneWithoutChangeOrdersInput!
  status: ChangeOrderStatus!
  updatedAt: DateTime
}

input ChangeOrderCreateManyWithoutProjectIdInput {
  connect: [ChangeOrderWhereUniqueInput!]
  create: [ChangeOrderCreateWithoutProjectIdInput!]
}

input ChangeOrderCreateManyWithoutRequestedByUserIdInput {
  connect: [ChangeOrderWhereUniqueInput!]
  create: [ChangeOrderCreateWithoutRequestedByUserIdInput!]
}

input ChangeOrderCreateWithoutProjectIdInput {
  createdAt: DateTime
  description: String!
  id: String
  requestedByUserId: UserCreateOneWithoutChangeOrdersInput!
  status: ChangeOrderStatus!
  updatedAt: DateTime
}

input ChangeOrderCreateWithoutRequestedByUserIdInput {
  createdAt: DateTime
  description: String!
  id: String
  projectId: ProjectCreateOneWithoutChangeOrdersInput!
  status: ChangeOrderStatus!
  updatedAt: DateTime
}

input ChangeOrderFilter {
  every: ChangeOrderWhereInput
  none: ChangeOrderWhereInput
  some: ChangeOrderWhereInput
}

input ChangeOrderScalarWhereInput {
  AND: [ChangeOrderScalarWhereInput!]
  createdAt: DateTimeFilter
  description: StringFilter
  id: StringFilter
  NOT: [ChangeOrderScalarWhereInput!]
  OR: [ChangeOrderScalarWhereInput!]
  status: ChangeOrderStatus
  updatedAt: DateTimeFilter
}

enum ChangeOrderStatus {
  STATUS_A
  STATUS_B
  STATUS_C
}

input ChangeOrderUpdateInput {
  createdAt: DateTime
  description: String
  id: String
  projectId: ProjectUpdateOneRequiredWithoutChangeOrdersInput
  requestedByUserId: UserUpdateOneRequiredWithoutChangeOrdersInput
  status: ChangeOrderStatus
  updatedAt: DateTime
}

input ChangeOrderUpdateManyDataInput {
  createdAt: DateTime
  description: String
  id: String
  status: ChangeOrderStatus
  updatedAt: DateTime
}

input ChangeOrderUpdateManyMutationInput {
  createdAt: DateTime
  description: String
  id: String
  status: ChangeOrderStatus
  updatedAt: DateTime
}

input ChangeOrderUpdateManyWithoutProjectIdInput {
  connect: [ChangeOrderWhereUniqueInput!]
  create: [ChangeOrderCreateWithoutProjectIdInput!]
  delete: [ChangeOrderWhereUniqueInput!]
  deleteMany: [ChangeOrderScalarWhereInput!]
  disconnect: [ChangeOrderWhereUniqueInput!]
  set: [ChangeOrderWhereUniqueInput!]
  update: [ChangeOrderUpdateWithWhereUniqueWithoutProjectIdInput!]
  updateMany: [ChangeOrderUpdateManyWithWhereNestedInput!]
  upsert: [ChangeOrderUpsertWithWhereUniqueWithoutProjectIdInput!]
}

input ChangeOrderUpdateManyWithoutRequestedByUserIdInput {
  connect: [ChangeOrderWhereUniqueInput!]
  create: [ChangeOrderCreateWithoutRequestedByUserIdInput!]
  delete: [ChangeOrderWhereUniqueInput!]
  deleteMany: [ChangeOrderScalarWhereInput!]
  disconnect: [ChangeOrderWhereUniqueInput!]
  set: [ChangeOrderWhereUniqueInput!]
  update: [ChangeOrderUpdateWithWhereUniqueWithoutRequestedByUserIdInput!]
  updateMany: [ChangeOrderUpdateManyWithWhereNestedInput!]
  upsert: [ChangeOrderUpsertWithWhereUniqueWithoutRequestedByUserIdInput!]
}

input ChangeOrderUpdateManyWithWhereNestedInput {
  data: ChangeOrderUpdateManyDataInput!
  where: ChangeOrderScalarWhereInput!
}

input ChangeOrderUpdateWithoutProjectIdDataInput {
  createdAt: DateTime
  description: String
  id: String
  requestedByUserId: UserUpdateOneRequiredWithoutChangeOrdersInput
  status: ChangeOrderStatus
  updatedAt: DateTime
}

input ChangeOrderUpdateWithoutRequestedByUserIdDataInput {
  createdAt: DateTime
  description: String
  id: String
  projectId: ProjectUpdateOneRequiredWithoutChangeOrdersInput
  status: ChangeOrderStatus
  updatedAt: DateTime
}

input ChangeOrderUpdateWithWhereUniqueWithoutProjectIdInput {
  data: ChangeOrderUpdateWithoutProjectIdDataInput!
  where: ChangeOrderWhereUniqueInput!
}

input ChangeOrderUpdateWithWhereUniqueWithoutRequestedByUserIdInput {
  data: ChangeOrderUpdateWithoutRequestedByUserIdDataInput!
  where: ChangeOrderWhereUniqueInput!
}

input ChangeOrderUpsertWithWhereUniqueWithoutProjectIdInput {
  create: ChangeOrderCreateWithoutProjectIdInput!
  update: ChangeOrderUpdateWithoutProjectIdDataInput!
  where: ChangeOrderWhereUniqueInput!
}

input ChangeOrderUpsertWithWhereUniqueWithoutRequestedByUserIdInput {
  create: ChangeOrderCreateWithoutRequestedByUserIdInput!
  update: ChangeOrderUpdateWithoutRequestedByUserIdDataInput!
  where: ChangeOrderWhereUniqueInput!
}

input ChangeOrderWhereInput {
  AND: [ChangeOrderWhereInput!]
  createdAt: DateTimeFilter
  description: StringFilter
  id: StringFilter
  NOT: [ChangeOrderWhereInput!]
  OR: [ChangeOrderWhereInput!]
  projectId: ProjectWhereInput
  requestedByUserId: UserWhereInput
  status: ChangeOrderStatus
  updatedAt: DateTimeFilter
}

input ChangeOrderWhereUniqueInput {
  id: String
}

type City {
  createdAt: DateTime!
  id: String!
  name: String!
  updatedAt: DateTime!
}

input CityCreateInput {
  addresses: AddressCreateManyWithoutCityIdInput
  createdAt: DateTime
  id: String
  name: String!
  state: StateCreateOneWithoutCitiesInput
  updatedAt: DateTime
}

input CityCreateManyWithoutStateInput {
  connect: [CityWhereUniqueInput!]
  create: [CityCreateWithoutStateInput!]
}

input CityCreateOneWithoutAddressesInput {
  connect: CityWhereUniqueInput
  create: CityCreateWithoutAddressesInput
}

input CityCreateWithoutAddressesInput {
  createdAt: DateTime
  id: String
  name: String!
  state: StateCreateOneWithoutCitiesInput
  updatedAt: DateTime
}

input CityCreateWithoutStateInput {
  addresses: AddressCreateManyWithoutCityIdInput
  createdAt: DateTime
  id: String
  name: String!
  updatedAt: DateTime
}

input CityFilter {
  every: CityWhereInput
  none: CityWhereInput
  some: CityWhereInput
}

input CityScalarWhereInput {
  addresses: AddressFilter
  AND: [CityScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  name: StringFilter
  NOT: [CityScalarWhereInput!]
  OR: [CityScalarWhereInput!]
  updatedAt: DateTimeFilter
}

input CityUpdateInput {
  addresses: AddressUpdateManyWithoutCityIdInput
  createdAt: DateTime
  id: String
  name: String
  state: StateUpdateOneWithoutCitiesInput
  updatedAt: DateTime
}

input CityUpdateManyDataInput {
  createdAt: DateTime
  id: String
  name: String
  updatedAt: DateTime
}

input CityUpdateManyMutationInput {
  createdAt: DateTime
  id: String
  name: String
  updatedAt: DateTime
}

input CityUpdateManyWithoutStateInput {
  connect: [CityWhereUniqueInput!]
  create: [CityCreateWithoutStateInput!]
  delete: [CityWhereUniqueInput!]
  deleteMany: [CityScalarWhereInput!]
  disconnect: [CityWhereUniqueInput!]
  set: [CityWhereUniqueInput!]
  update: [CityUpdateWithWhereUniqueWithoutStateInput!]
  updateMany: [CityUpdateManyWithWhereNestedInput!]
  upsert: [CityUpsertWithWhereUniqueWithoutStateInput!]
}

input CityUpdateManyWithWhereNestedInput {
  data: CityUpdateManyDataInput!
  where: CityScalarWhereInput!
}

input CityUpdateOneWithoutAddressesInput {
  connect: CityWhereUniqueInput
  create: CityCreateWithoutAddressesInput
  delete: Boolean
  disconnect: Boolean
  update: CityUpdateWithoutAddressesDataInput
  upsert: CityUpsertWithoutAddressesInput
}

input CityUpdateWithoutAddressesDataInput {
  createdAt: DateTime
  id: String
  name: String
  state: StateUpdateOneWithoutCitiesInput
  updatedAt: DateTime
}

input CityUpdateWithoutStateDataInput {
  addresses: AddressUpdateManyWithoutCityIdInput
  createdAt: DateTime
  id: String
  name: String
  updatedAt: DateTime
}

input CityUpdateWithWhereUniqueWithoutStateInput {
  data: CityUpdateWithoutStateDataInput!
  where: CityWhereUniqueInput!
}

input CityUpsertWithoutAddressesInput {
  create: CityCreateWithoutAddressesInput!
  update: CityUpdateWithoutAddressesDataInput!
}

input CityUpsertWithWhereUniqueWithoutStateInput {
  create: CityCreateWithoutStateInput!
  update: CityUpdateWithoutStateDataInput!
  where: CityWhereUniqueInput!
}

input CityWhereInput {
  addresses: AddressFilter
  AND: [CityWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  name: StringFilter
  NOT: [CityWhereInput!]
  OR: [CityWhereInput!]
  state: StateWhereInput
  updatedAt: DateTimeFilter
}

input CityWhereUniqueInput {
  id: String
}

type Client {
  addresses(after: AddressWhereUniqueInput, before: AddressWhereUniqueInput, first: Int, last: Int, skip: Int): [Address!]!
  clientImg: String
  clientThumb: String
  contacts(after: ContactWhereUniqueInput, before: ContactWhereUniqueInput, first: Int, last: Int, skip: Int): [Contact!]!
  createdAt: DateTime!
  firstName: String!
  id: String!
  lastName: String
  nickname: String!
  projects(after: ProjectWhereUniqueInput, before: ProjectWhereUniqueInput, first: Int, last: Int, skip: Int): [Project!]!
  proposals(after: ProposalWhereUniqueInput, before: ProposalWhereUniqueInput, first: Int, last: Int, skip: Int): [Proposal!]!
  updatedAt: DateTime!
  userId: User
}

input ClientCreateInput {
  addresses: AddressCreateManyWithoutClientsInput
  clientImg: String
  clientNotes: ClientNoteCreateManyWithoutClientIdInput
  clientThumb: String
  contacts: ContactCreateManyWithoutClientsInput
  createdAt: DateTime
  firstName: String!
  id: String
  invoices: InvoiceCreateManyWithoutClientIdInput
  lastName: String
  nickname: String!
  projects: ProjectCreateManyWithoutClientsInput
  proposals: ProposalCreateManyWithoutClientIdInput
  updatedAt: DateTime
  userId: UserCreateOneWithoutClientsInput
}

input ClientCreateManyWithoutAddressesInput {
  connect: [ClientWhereUniqueInput!]
  create: [ClientCreateWithoutAddressesInput!]
}

input ClientCreateManyWithoutContactsInput {
  connect: [ClientWhereUniqueInput!]
  create: [ClientCreateWithoutContactsInput!]
}

input ClientCreateManyWithoutProjectsInput {
  connect: [ClientWhereUniqueInput!]
  create: [ClientCreateWithoutProjectsInput!]
}

input ClientCreateManyWithoutUserIdInput {
  connect: [ClientWhereUniqueInput!]
  create: [ClientCreateWithoutUserIdInput!]
}

input ClientCreateOneWithoutClientNotesInput {
  connect: ClientWhereUniqueInput
  create: ClientCreateWithoutClientNotesInput
}

input ClientCreateOneWithoutInvoicesInput {
  connect: ClientWhereUniqueInput
  create: ClientCreateWithoutInvoicesInput
}

input ClientCreateOneWithoutProposalsInput {
  connect: ClientWhereUniqueInput
  create: ClientCreateWithoutProposalsInput
}

input ClientCreateWithoutAddressesInput {
  clientImg: String
  clientNotes: ClientNoteCreateManyWithoutClientIdInput
  clientThumb: String
  contacts: ContactCreateManyWithoutClientsInput
  createdAt: DateTime
  firstName: String!
  id: String
  invoices: InvoiceCreateManyWithoutClientIdInput
  lastName: String
  nickname: String!
  projects: ProjectCreateManyWithoutClientsInput
  proposals: ProposalCreateManyWithoutClientIdInput
  updatedAt: DateTime
  userId: UserCreateOneWithoutClientsInput
}

input ClientCreateWithoutClientNotesInput {
  addresses: AddressCreateManyWithoutClientsInput
  clientImg: String
  clientThumb: String
  contacts: ContactCreateManyWithoutClientsInput
  createdAt: DateTime
  firstName: String!
  id: String
  invoices: InvoiceCreateManyWithoutClientIdInput
  lastName: String
  nickname: String!
  projects: ProjectCreateManyWithoutClientsInput
  proposals: ProposalCreateManyWithoutClientIdInput
  updatedAt: DateTime
  userId: UserCreateOneWithoutClientsInput
}

input ClientCreateWithoutContactsInput {
  addresses: AddressCreateManyWithoutClientsInput
  clientImg: String
  clientNotes: ClientNoteCreateManyWithoutClientIdInput
  clientThumb: String
  createdAt: DateTime
  firstName: String!
  id: String
  invoices: InvoiceCreateManyWithoutClientIdInput
  lastName: String
  nickname: String!
  projects: ProjectCreateManyWithoutClientsInput
  proposals: ProposalCreateManyWithoutClientIdInput
  updatedAt: DateTime
  userId: UserCreateOneWithoutClientsInput
}

input ClientCreateWithoutInvoicesInput {
  addresses: AddressCreateManyWithoutClientsInput
  clientImg: String
  clientNotes: ClientNoteCreateManyWithoutClientIdInput
  clientThumb: String
  contacts: ContactCreateManyWithoutClientsInput
  createdAt: DateTime
  firstName: String!
  id: String
  lastName: String
  nickname: String!
  projects: ProjectCreateManyWithoutClientsInput
  proposals: ProposalCreateManyWithoutClientIdInput
  updatedAt: DateTime
  userId: UserCreateOneWithoutClientsInput
}

input ClientCreateWithoutProjectsInput {
  addresses: AddressCreateManyWithoutClientsInput
  clientImg: String
  clientNotes: ClientNoteCreateManyWithoutClientIdInput
  clientThumb: String
  contacts: ContactCreateManyWithoutClientsInput
  createdAt: DateTime
  firstName: String!
  id: String
  invoices: InvoiceCreateManyWithoutClientIdInput
  lastName: String
  nickname: String!
  proposals: ProposalCreateManyWithoutClientIdInput
  updatedAt: DateTime
  userId: UserCreateOneWithoutClientsInput
}

input ClientCreateWithoutProposalsInput {
  addresses: AddressCreateManyWithoutClientsInput
  clientImg: String
  clientNotes: ClientNoteCreateManyWithoutClientIdInput
  clientThumb: String
  contacts: ContactCreateManyWithoutClientsInput
  createdAt: DateTime
  firstName: String!
  id: String
  invoices: InvoiceCreateManyWithoutClientIdInput
  lastName: String
  nickname: String!
  projects: ProjectCreateManyWithoutClientsInput
  updatedAt: DateTime
  userId: UserCreateOneWithoutClientsInput
}

input ClientCreateWithoutUserIdInput {
  addresses: AddressCreateManyWithoutClientsInput
  clientImg: String
  clientNotes: ClientNoteCreateManyWithoutClientIdInput
  clientThumb: String
  contacts: ContactCreateManyWithoutClientsInput
  createdAt: DateTime
  firstName: String!
  id: String
  invoices: InvoiceCreateManyWithoutClientIdInput
  lastName: String
  nickname: String!
  projects: ProjectCreateManyWithoutClientsInput
  proposals: ProposalCreateManyWithoutClientIdInput
  updatedAt: DateTime
}

input ClientFilter {
  every: ClientWhereInput
  none: ClientWhereInput
  some: ClientWhereInput
}

type ClientNote {
  clientId: Client!
  createdAt: DateTime!
  id: String!
  note: String!
}

input ClientNoteCreateInput {
  clientId: ClientCreateOneWithoutClientNotesInput!
  createdAt: DateTime
  id: String
  note: String!
}

input ClientNoteCreateManyWithoutClientIdInput {
  connect: [ClientNoteWhereUniqueInput!]
  create: [ClientNoteCreateWithoutClientIdInput!]
}

input ClientNoteCreateWithoutClientIdInput {
  createdAt: DateTime
  id: String
  note: String!
}

input ClientNoteFilter {
  every: ClientNoteWhereInput
  none: ClientNoteWhereInput
  some: ClientNoteWhereInput
}

input ClientNoteScalarWhereInput {
  AND: [ClientNoteScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [ClientNoteScalarWhereInput!]
  note: StringFilter
  OR: [ClientNoteScalarWhereInput!]
}

input ClientNoteUpdateInput {
  clientId: ClientUpdateOneRequiredWithoutClientNotesInput
  createdAt: DateTime
  id: String
  note: String
}

input ClientNoteUpdateManyDataInput {
  createdAt: DateTime
  id: String
  note: String
}

input ClientNoteUpdateManyMutationInput {
  createdAt: DateTime
  id: String
  note: String
}

input ClientNoteUpdateManyWithoutClientIdInput {
  connect: [ClientNoteWhereUniqueInput!]
  create: [ClientNoteCreateWithoutClientIdInput!]
  delete: [ClientNoteWhereUniqueInput!]
  deleteMany: [ClientNoteScalarWhereInput!]
  disconnect: [ClientNoteWhereUniqueInput!]
  set: [ClientNoteWhereUniqueInput!]
  update: [ClientNoteUpdateWithWhereUniqueWithoutClientIdInput!]
  updateMany: [ClientNoteUpdateManyWithWhereNestedInput!]
  upsert: [ClientNoteUpsertWithWhereUniqueWithoutClientIdInput!]
}

input ClientNoteUpdateManyWithWhereNestedInput {
  data: ClientNoteUpdateManyDataInput!
  where: ClientNoteScalarWhereInput!
}

input ClientNoteUpdateWithoutClientIdDataInput {
  createdAt: DateTime
  id: String
  note: String
}

input ClientNoteUpdateWithWhereUniqueWithoutClientIdInput {
  data: ClientNoteUpdateWithoutClientIdDataInput!
  where: ClientNoteWhereUniqueInput!
}

input ClientNoteUpsertWithWhereUniqueWithoutClientIdInput {
  create: ClientNoteCreateWithoutClientIdInput!
  update: ClientNoteUpdateWithoutClientIdDataInput!
  where: ClientNoteWhereUniqueInput!
}

input ClientNoteWhereInput {
  AND: [ClientNoteWhereInput!]
  clientId: ClientWhereInput
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [ClientNoteWhereInput!]
  note: StringFilter
  OR: [ClientNoteWhereInput!]
}

input ClientNoteWhereUniqueInput {
  id: String
}

input ClientOrderByInput {
  clientImg: OrderByArg
  clientThumb: OrderByArg
  createdAt: OrderByArg
  firstName: OrderByArg
  id: OrderByArg
  lastName: OrderByArg
  nickname: OrderByArg
  updatedAt: OrderByArg
  userId: OrderByArg
}

input ClientScalarWhereInput {
  addresses: AddressFilter
  AND: [ClientScalarWhereInput!]
  clientImg: NullableStringFilter
  clientNotes: ClientNoteFilter
  clientThumb: NullableStringFilter
  contacts: ContactFilter
  createdAt: DateTimeFilter
  firstName: StringFilter
  id: StringFilter
  invoices: InvoiceFilter
  lastName: NullableStringFilter
  nickname: StringFilter
  NOT: [ClientScalarWhereInput!]
  OR: [ClientScalarWhereInput!]
  projects: ProjectFilter
  proposals: ProposalFilter
  updatedAt: DateTimeFilter
}

input ClientUpdateInput {
  addresses: AddressUpdateManyWithoutClientsInput
  clientImg: String
  clientNotes: ClientNoteUpdateManyWithoutClientIdInput
  clientThumb: String
  contacts: ContactUpdateManyWithoutClientsInput
  createdAt: DateTime
  firstName: String
  id: String
  invoices: InvoiceUpdateManyWithoutClientIdInput
  lastName: String
  nickname: String
  projects: ProjectUpdateManyWithoutClientsInput
  proposals: ProposalUpdateManyWithoutClientIdInput
  updatedAt: DateTime
  userId: UserUpdateOneWithoutClientsInput
}

input ClientUpdateManyDataInput {
  clientImg: String
  clientThumb: String
  createdAt: DateTime
  firstName: String
  id: String
  lastName: String
  nickname: String
  updatedAt: DateTime
}

input ClientUpdateManyMutationInput {
  clientImg: String
  clientThumb: String
  createdAt: DateTime
  firstName: String
  id: String
  lastName: String
  nickname: String
  updatedAt: DateTime
}

input ClientUpdateManyWithoutAddressesInput {
  connect: [ClientWhereUniqueInput!]
  create: [ClientCreateWithoutAddressesInput!]
  delete: [ClientWhereUniqueInput!]
  deleteMany: [ClientScalarWhereInput!]
  disconnect: [ClientWhereUniqueInput!]
  set: [ClientWhereUniqueInput!]
  update: [ClientUpdateWithWhereUniqueWithoutAddressesInput!]
  updateMany: [ClientUpdateManyWithWhereNestedInput!]
  upsert: [ClientUpsertWithWhereUniqueWithoutAddressesInput!]
}

input ClientUpdateManyWithoutContactsInput {
  connect: [ClientWhereUniqueInput!]
  create: [ClientCreateWithoutContactsInput!]
  delete: [ClientWhereUniqueInput!]
  deleteMany: [ClientScalarWhereInput!]
  disconnect: [ClientWhereUniqueInput!]
  set: [ClientWhereUniqueInput!]
  update: [ClientUpdateWithWhereUniqueWithoutContactsInput!]
  updateMany: [ClientUpdateManyWithWhereNestedInput!]
  upsert: [ClientUpsertWithWhereUniqueWithoutContactsInput!]
}

input ClientUpdateManyWithoutProjectsInput {
  connect: [ClientWhereUniqueInput!]
  create: [ClientCreateWithoutProjectsInput!]
  delete: [ClientWhereUniqueInput!]
  deleteMany: [ClientScalarWhereInput!]
  disconnect: [ClientWhereUniqueInput!]
  set: [ClientWhereUniqueInput!]
  update: [ClientUpdateWithWhereUniqueWithoutProjectsInput!]
  updateMany: [ClientUpdateManyWithWhereNestedInput!]
  upsert: [ClientUpsertWithWhereUniqueWithoutProjectsInput!]
}

input ClientUpdateManyWithoutUserIdInput {
  connect: [ClientWhereUniqueInput!]
  create: [ClientCreateWithoutUserIdInput!]
  delete: [ClientWhereUniqueInput!]
  deleteMany: [ClientScalarWhereInput!]
  disconnect: [ClientWhereUniqueInput!]
  set: [ClientWhereUniqueInput!]
  update: [ClientUpdateWithWhereUniqueWithoutUserIdInput!]
  updateMany: [ClientUpdateManyWithWhereNestedInput!]
  upsert: [ClientUpsertWithWhereUniqueWithoutUserIdInput!]
}

input ClientUpdateManyWithWhereNestedInput {
  data: ClientUpdateManyDataInput!
  where: ClientScalarWhereInput!
}

input ClientUpdateOneRequiredWithoutClientNotesInput {
  connect: ClientWhereUniqueInput
  create: ClientCreateWithoutClientNotesInput
  update: ClientUpdateWithoutClientNotesDataInput
  upsert: ClientUpsertWithoutClientNotesInput
}

input ClientUpdateOneRequiredWithoutInvoicesInput {
  connect: ClientWhereUniqueInput
  create: ClientCreateWithoutInvoicesInput
  update: ClientUpdateWithoutInvoicesDataInput
  upsert: ClientUpsertWithoutInvoicesInput
}

input ClientUpdateOneWithoutProposalsInput {
  connect: ClientWhereUniqueInput
  create: ClientCreateWithoutProposalsInput
  delete: Boolean
  disconnect: Boolean
  update: ClientUpdateWithoutProposalsDataInput
  upsert: ClientUpsertWithoutProposalsInput
}

input ClientUpdateWithoutAddressesDataInput {
  clientImg: String
  clientNotes: ClientNoteUpdateManyWithoutClientIdInput
  clientThumb: String
  contacts: ContactUpdateManyWithoutClientsInput
  createdAt: DateTime
  firstName: String
  id: String
  invoices: InvoiceUpdateManyWithoutClientIdInput
  lastName: String
  nickname: String
  projects: ProjectUpdateManyWithoutClientsInput
  proposals: ProposalUpdateManyWithoutClientIdInput
  updatedAt: DateTime
  userId: UserUpdateOneWithoutClientsInput
}

input ClientUpdateWithoutClientNotesDataInput {
  addresses: AddressUpdateManyWithoutClientsInput
  clientImg: String
  clientThumb: String
  contacts: ContactUpdateManyWithoutClientsInput
  createdAt: DateTime
  firstName: String
  id: String
  invoices: InvoiceUpdateManyWithoutClientIdInput
  lastName: String
  nickname: String
  projects: ProjectUpdateManyWithoutClientsInput
  proposals: ProposalUpdateManyWithoutClientIdInput
  updatedAt: DateTime
  userId: UserUpdateOneWithoutClientsInput
}

input ClientUpdateWithoutContactsDataInput {
  addresses: AddressUpdateManyWithoutClientsInput
  clientImg: String
  clientNotes: ClientNoteUpdateManyWithoutClientIdInput
  clientThumb: String
  createdAt: DateTime
  firstName: String
  id: String
  invoices: InvoiceUpdateManyWithoutClientIdInput
  lastName: String
  nickname: String
  projects: ProjectUpdateManyWithoutClientsInput
  proposals: ProposalUpdateManyWithoutClientIdInput
  updatedAt: DateTime
  userId: UserUpdateOneWithoutClientsInput
}

input ClientUpdateWithoutInvoicesDataInput {
  addresses: AddressUpdateManyWithoutClientsInput
  clientImg: String
  clientNotes: ClientNoteUpdateManyWithoutClientIdInput
  clientThumb: String
  contacts: ContactUpdateManyWithoutClientsInput
  createdAt: DateTime
  firstName: String
  id: String
  lastName: String
  nickname: String
  projects: ProjectUpdateManyWithoutClientsInput
  proposals: ProposalUpdateManyWithoutClientIdInput
  updatedAt: DateTime
  userId: UserUpdateOneWithoutClientsInput
}

input ClientUpdateWithoutProjectsDataInput {
  addresses: AddressUpdateManyWithoutClientsInput
  clientImg: String
  clientNotes: ClientNoteUpdateManyWithoutClientIdInput
  clientThumb: String
  contacts: ContactUpdateManyWithoutClientsInput
  createdAt: DateTime
  firstName: String
  id: String
  invoices: InvoiceUpdateManyWithoutClientIdInput
  lastName: String
  nickname: String
  proposals: ProposalUpdateManyWithoutClientIdInput
  updatedAt: DateTime
  userId: UserUpdateOneWithoutClientsInput
}

input ClientUpdateWithoutProposalsDataInput {
  addresses: AddressUpdateManyWithoutClientsInput
  clientImg: String
  clientNotes: ClientNoteUpdateManyWithoutClientIdInput
  clientThumb: String
  contacts: ContactUpdateManyWithoutClientsInput
  createdAt: DateTime
  firstName: String
  id: String
  invoices: InvoiceUpdateManyWithoutClientIdInput
  lastName: String
  nickname: String
  projects: ProjectUpdateManyWithoutClientsInput
  updatedAt: DateTime
  userId: UserUpdateOneWithoutClientsInput
}

input ClientUpdateWithoutUserIdDataInput {
  addresses: AddressUpdateManyWithoutClientsInput
  clientImg: String
  clientNotes: ClientNoteUpdateManyWithoutClientIdInput
  clientThumb: String
  contacts: ContactUpdateManyWithoutClientsInput
  createdAt: DateTime
  firstName: String
  id: String
  invoices: InvoiceUpdateManyWithoutClientIdInput
  lastName: String
  nickname: String
  projects: ProjectUpdateManyWithoutClientsInput
  proposals: ProposalUpdateManyWithoutClientIdInput
  updatedAt: DateTime
}

input ClientUpdateWithWhereUniqueWithoutAddressesInput {
  data: ClientUpdateWithoutAddressesDataInput!
  where: ClientWhereUniqueInput!
}

input ClientUpdateWithWhereUniqueWithoutContactsInput {
  data: ClientUpdateWithoutContactsDataInput!
  where: ClientWhereUniqueInput!
}

input ClientUpdateWithWhereUniqueWithoutProjectsInput {
  data: ClientUpdateWithoutProjectsDataInput!
  where: ClientWhereUniqueInput!
}

input ClientUpdateWithWhereUniqueWithoutUserIdInput {
  data: ClientUpdateWithoutUserIdDataInput!
  where: ClientWhereUniqueInput!
}

input ClientUpsertWithoutClientNotesInput {
  create: ClientCreateWithoutClientNotesInput!
  update: ClientUpdateWithoutClientNotesDataInput!
}

input ClientUpsertWithoutInvoicesInput {
  create: ClientCreateWithoutInvoicesInput!
  update: ClientUpdateWithoutInvoicesDataInput!
}

input ClientUpsertWithoutProposalsInput {
  create: ClientCreateWithoutProposalsInput!
  update: ClientUpdateWithoutProposalsDataInput!
}

input ClientUpsertWithWhereUniqueWithoutAddressesInput {
  create: ClientCreateWithoutAddressesInput!
  update: ClientUpdateWithoutAddressesDataInput!
  where: ClientWhereUniqueInput!
}

input ClientUpsertWithWhereUniqueWithoutContactsInput {
  create: ClientCreateWithoutContactsInput!
  update: ClientUpdateWithoutContactsDataInput!
  where: ClientWhereUniqueInput!
}

input ClientUpsertWithWhereUniqueWithoutProjectsInput {
  create: ClientCreateWithoutProjectsInput!
  update: ClientUpdateWithoutProjectsDataInput!
  where: ClientWhereUniqueInput!
}

input ClientUpsertWithWhereUniqueWithoutUserIdInput {
  create: ClientCreateWithoutUserIdInput!
  update: ClientUpdateWithoutUserIdDataInput!
  where: ClientWhereUniqueInput!
}

input ClientWhereInput {
  addresses: AddressFilter
  AND: [ClientWhereInput!]
  clientImg: NullableStringFilter
  clientNotes: ClientNoteFilter
  clientThumb: NullableStringFilter
  contacts: ContactFilter
  createdAt: DateTimeFilter
  firstName: StringFilter
  id: StringFilter
  invoices: InvoiceFilter
  lastName: NullableStringFilter
  nickname: StringFilter
  NOT: [ClientWhereInput!]
  OR: [ClientWhereInput!]
  projects: ProjectFilter
  proposals: ProposalFilter
  updatedAt: DateTimeFilter
  userId: UserWhereInput
}

input ClientWhereUniqueInput {
  id: String
}

type Company {
  addresses(after: AddressWhereUniqueInput, before: AddressWhereUniqueInput, first: Int, last: Int, skip: Int): [Address!]!
  companyType: CompanyType
  contacts(after: ContactWhereUniqueInput, before: ContactWhereUniqueInput, first: Int, last: Int, skip: Int): [Contact!]!
  createdAt: DateTime!
  id: String!
  logo: String
  logoThumb: String
  name: String!
  status: CompanyStatus!
  updatedAt: DateTime!
  userId: User!
}

input CompanyCreateInput {
  addresses: AddressCreateManyWithoutCompaniesInput
  companyType: CompanyType
  contacts: ContactCreateManyWithoutCompaniesInput
  createdAt: DateTime
  id: String
  logo: String
  logoThumb: String
  name: String!
  projects: ProjectCreateManyWithoutCompanyIdInput
  status: CompanyStatus!
  subscriptions: SubscriptionCreateManyWithoutCompanyIdInput
  suppliers: SupplierCreateManyWithoutCompanyIdInput
  updatedAt: DateTime
  userId: UserCreateOneWithoutCompaniesInput!
  userRoles: UserRoleCreateManyWithoutCompanyIdInput
}

input CompanyCreateManyWithoutAddressesInput {
  connect: [CompanyWhereUniqueInput!]
  create: [CompanyCreateWithoutAddressesInput!]
}

input CompanyCreateManyWithoutContactsInput {
  connect: [CompanyWhereUniqueInput!]
  create: [CompanyCreateWithoutContactsInput!]
}

input CompanyCreateManyWithoutUserIdInput {
  connect: [CompanyWhereUniqueInput!]
  create: [CompanyCreateWithoutUserIdInput!]
}

input CompanyCreateOneWithoutProjectsInput {
  connect: CompanyWhereUniqueInput
  create: CompanyCreateWithoutProjectsInput
}

input CompanyCreateOneWithoutSubscriptionsInput {
  connect: CompanyWhereUniqueInput
  create: CompanyCreateWithoutSubscriptionsInput
}

input CompanyCreateOneWithoutSuppliersInput {
  connect: CompanyWhereUniqueInput
  create: CompanyCreateWithoutSuppliersInput
}

input CompanyCreateOneWithoutUserRolesInput {
  connect: CompanyWhereUniqueInput
  create: CompanyCreateWithoutUserRolesInput
}

input CompanyCreateWithoutAddressesInput {
  companyType: CompanyType
  contacts: ContactCreateManyWithoutCompaniesInput
  createdAt: DateTime
  id: String
  logo: String
  logoThumb: String
  name: String!
  projects: ProjectCreateManyWithoutCompanyIdInput
  status: CompanyStatus!
  subscriptions: SubscriptionCreateManyWithoutCompanyIdInput
  suppliers: SupplierCreateManyWithoutCompanyIdInput
  updatedAt: DateTime
  userId: UserCreateOneWithoutCompaniesInput!
  userRoles: UserRoleCreateManyWithoutCompanyIdInput
}

input CompanyCreateWithoutContactsInput {
  addresses: AddressCreateManyWithoutCompaniesInput
  companyType: CompanyType
  createdAt: DateTime
  id: String
  logo: String
  logoThumb: String
  name: String!
  projects: ProjectCreateManyWithoutCompanyIdInput
  status: CompanyStatus!
  subscriptions: SubscriptionCreateManyWithoutCompanyIdInput
  suppliers: SupplierCreateManyWithoutCompanyIdInput
  updatedAt: DateTime
  userId: UserCreateOneWithoutCompaniesInput!
  userRoles: UserRoleCreateManyWithoutCompanyIdInput
}

input CompanyCreateWithoutProjectsInput {
  addresses: AddressCreateManyWithoutCompaniesInput
  companyType: CompanyType
  contacts: ContactCreateManyWithoutCompaniesInput
  createdAt: DateTime
  id: String
  logo: String
  logoThumb: String
  name: String!
  status: CompanyStatus!
  subscriptions: SubscriptionCreateManyWithoutCompanyIdInput
  suppliers: SupplierCreateManyWithoutCompanyIdInput
  updatedAt: DateTime
  userId: UserCreateOneWithoutCompaniesInput!
  userRoles: UserRoleCreateManyWithoutCompanyIdInput
}

input CompanyCreateWithoutSubscriptionsInput {
  addresses: AddressCreateManyWithoutCompaniesInput
  companyType: CompanyType
  contacts: ContactCreateManyWithoutCompaniesInput
  createdAt: DateTime
  id: String
  logo: String
  logoThumb: String
  name: String!
  projects: ProjectCreateManyWithoutCompanyIdInput
  status: CompanyStatus!
  suppliers: SupplierCreateManyWithoutCompanyIdInput
  updatedAt: DateTime
  userId: UserCreateOneWithoutCompaniesInput!
  userRoles: UserRoleCreateManyWithoutCompanyIdInput
}

input CompanyCreateWithoutSuppliersInput {
  addresses: AddressCreateManyWithoutCompaniesInput
  companyType: CompanyType
  contacts: ContactCreateManyWithoutCompaniesInput
  createdAt: DateTime
  id: String
  logo: String
  logoThumb: String
  name: String!
  projects: ProjectCreateManyWithoutCompanyIdInput
  status: CompanyStatus!
  subscriptions: SubscriptionCreateManyWithoutCompanyIdInput
  updatedAt: DateTime
  userId: UserCreateOneWithoutCompaniesInput!
  userRoles: UserRoleCreateManyWithoutCompanyIdInput
}

input CompanyCreateWithoutUserIdInput {
  addresses: AddressCreateManyWithoutCompaniesInput
  companyType: CompanyType
  contacts: ContactCreateManyWithoutCompaniesInput
  createdAt: DateTime
  id: String
  logo: String
  logoThumb: String
  name: String!
  projects: ProjectCreateManyWithoutCompanyIdInput
  status: CompanyStatus!
  subscriptions: SubscriptionCreateManyWithoutCompanyIdInput
  suppliers: SupplierCreateManyWithoutCompanyIdInput
  updatedAt: DateTime
  userRoles: UserRoleCreateManyWithoutCompanyIdInput
}

input CompanyCreateWithoutUserRolesInput {
  addresses: AddressCreateManyWithoutCompaniesInput
  companyType: CompanyType
  contacts: ContactCreateManyWithoutCompaniesInput
  createdAt: DateTime
  id: String
  logo: String
  logoThumb: String
  name: String!
  projects: ProjectCreateManyWithoutCompanyIdInput
  status: CompanyStatus!
  subscriptions: SubscriptionCreateManyWithoutCompanyIdInput
  suppliers: SupplierCreateManyWithoutCompanyIdInput
  updatedAt: DateTime
  userId: UserCreateOneWithoutCompaniesInput!
}

input CompanyFilter {
  every: CompanyWhereInput
  none: CompanyWhereInput
  some: CompanyWhereInput
}

input CompanyScalarWhereInput {
  addresses: AddressFilter
  AND: [CompanyScalarWhereInput!]
  companyType: CompanyType
  contacts: ContactFilter
  createdAt: DateTimeFilter
  id: StringFilter
  logo: NullableStringFilter
  logoThumb: NullableStringFilter
  name: StringFilter
  NOT: [CompanyScalarWhereInput!]
  OR: [CompanyScalarWhereInput!]
  projects: ProjectFilter
  status: CompanyStatus
  subscriptions: SubscriptionFilter
  suppliers: SupplierFilter
  updatedAt: DateTimeFilter
  userRoles: UserRoleFilter
}

enum CompanyStatus {
  APPROVED
  DECLINED
  OLD
  PENDING
}

enum CompanyType {
  DESIGNER
  GC
  GOVERNMENT
  REMODELING
}

input CompanyUpdateInput {
  addresses: AddressUpdateManyWithoutCompaniesInput
  companyType: CompanyType
  contacts: ContactUpdateManyWithoutCompaniesInput
  createdAt: DateTime
  id: String
  logo: String
  logoThumb: String
  name: String
  projects: ProjectUpdateManyWithoutCompanyIdInput
  status: CompanyStatus
  subscriptions: SubscriptionUpdateManyWithoutCompanyIdInput
  suppliers: SupplierUpdateManyWithoutCompanyIdInput
  updatedAt: DateTime
  userId: UserUpdateOneRequiredWithoutCompaniesInput
  userRoles: UserRoleUpdateManyWithoutCompanyIdInput
}

input CompanyUpdateManyDataInput {
  companyType: CompanyType
  createdAt: DateTime
  id: String
  logo: String
  logoThumb: String
  name: String
  status: CompanyStatus
  updatedAt: DateTime
}

input CompanyUpdateManyMutationInput {
  companyType: CompanyType
  createdAt: DateTime
  id: String
  logo: String
  logoThumb: String
  name: String
  status: CompanyStatus
  updatedAt: DateTime
}

input CompanyUpdateManyWithoutAddressesInput {
  connect: [CompanyWhereUniqueInput!]
  create: [CompanyCreateWithoutAddressesInput!]
  delete: [CompanyWhereUniqueInput!]
  deleteMany: [CompanyScalarWhereInput!]
  disconnect: [CompanyWhereUniqueInput!]
  set: [CompanyWhereUniqueInput!]
  update: [CompanyUpdateWithWhereUniqueWithoutAddressesInput!]
  updateMany: [CompanyUpdateManyWithWhereNestedInput!]
  upsert: [CompanyUpsertWithWhereUniqueWithoutAddressesInput!]
}

input CompanyUpdateManyWithoutContactsInput {
  connect: [CompanyWhereUniqueInput!]
  create: [CompanyCreateWithoutContactsInput!]
  delete: [CompanyWhereUniqueInput!]
  deleteMany: [CompanyScalarWhereInput!]
  disconnect: [CompanyWhereUniqueInput!]
  set: [CompanyWhereUniqueInput!]
  update: [CompanyUpdateWithWhereUniqueWithoutContactsInput!]
  updateMany: [CompanyUpdateManyWithWhereNestedInput!]
  upsert: [CompanyUpsertWithWhereUniqueWithoutContactsInput!]
}

input CompanyUpdateManyWithoutUserIdInput {
  connect: [CompanyWhereUniqueInput!]
  create: [CompanyCreateWithoutUserIdInput!]
  delete: [CompanyWhereUniqueInput!]
  deleteMany: [CompanyScalarWhereInput!]
  disconnect: [CompanyWhereUniqueInput!]
  set: [CompanyWhereUniqueInput!]
  update: [CompanyUpdateWithWhereUniqueWithoutUserIdInput!]
  updateMany: [CompanyUpdateManyWithWhereNestedInput!]
  upsert: [CompanyUpsertWithWhereUniqueWithoutUserIdInput!]
}

input CompanyUpdateManyWithWhereNestedInput {
  data: CompanyUpdateManyDataInput!
  where: CompanyScalarWhereInput!
}

input CompanyUpdateOneRequiredWithoutProjectsInput {
  connect: CompanyWhereUniqueInput
  create: CompanyCreateWithoutProjectsInput
  update: CompanyUpdateWithoutProjectsDataInput
  upsert: CompanyUpsertWithoutProjectsInput
}

input CompanyUpdateOneRequiredWithoutSubscriptionsInput {
  connect: CompanyWhereUniqueInput
  create: CompanyCreateWithoutSubscriptionsInput
  update: CompanyUpdateWithoutSubscriptionsDataInput
  upsert: CompanyUpsertWithoutSubscriptionsInput
}

input CompanyUpdateOneRequiredWithoutSuppliersInput {
  connect: CompanyWhereUniqueInput
  create: CompanyCreateWithoutSuppliersInput
  update: CompanyUpdateWithoutSuppliersDataInput
  upsert: CompanyUpsertWithoutSuppliersInput
}

input CompanyUpdateOneRequiredWithoutUserRolesInput {
  connect: CompanyWhereUniqueInput
  create: CompanyCreateWithoutUserRolesInput
  update: CompanyUpdateWithoutUserRolesDataInput
  upsert: CompanyUpsertWithoutUserRolesInput
}

input CompanyUpdateWithoutAddressesDataInput {
  companyType: CompanyType
  contacts: ContactUpdateManyWithoutCompaniesInput
  createdAt: DateTime
  id: String
  logo: String
  logoThumb: String
  name: String
  projects: ProjectUpdateManyWithoutCompanyIdInput
  status: CompanyStatus
  subscriptions: SubscriptionUpdateManyWithoutCompanyIdInput
  suppliers: SupplierUpdateManyWithoutCompanyIdInput
  updatedAt: DateTime
  userId: UserUpdateOneRequiredWithoutCompaniesInput
  userRoles: UserRoleUpdateManyWithoutCompanyIdInput
}

input CompanyUpdateWithoutContactsDataInput {
  addresses: AddressUpdateManyWithoutCompaniesInput
  companyType: CompanyType
  createdAt: DateTime
  id: String
  logo: String
  logoThumb: String
  name: String
  projects: ProjectUpdateManyWithoutCompanyIdInput
  status: CompanyStatus
  subscriptions: SubscriptionUpdateManyWithoutCompanyIdInput
  suppliers: SupplierUpdateManyWithoutCompanyIdInput
  updatedAt: DateTime
  userId: UserUpdateOneRequiredWithoutCompaniesInput
  userRoles: UserRoleUpdateManyWithoutCompanyIdInput
}

input CompanyUpdateWithoutProjectsDataInput {
  addresses: AddressUpdateManyWithoutCompaniesInput
  companyType: CompanyType
  contacts: ContactUpdateManyWithoutCompaniesInput
  createdAt: DateTime
  id: String
  logo: String
  logoThumb: String
  name: String
  status: CompanyStatus
  subscriptions: SubscriptionUpdateManyWithoutCompanyIdInput
  suppliers: SupplierUpdateManyWithoutCompanyIdInput
  updatedAt: DateTime
  userId: UserUpdateOneRequiredWithoutCompaniesInput
  userRoles: UserRoleUpdateManyWithoutCompanyIdInput
}

input CompanyUpdateWithoutSubscriptionsDataInput {
  addresses: AddressUpdateManyWithoutCompaniesInput
  companyType: CompanyType
  contacts: ContactUpdateManyWithoutCompaniesInput
  createdAt: DateTime
  id: String
  logo: String
  logoThumb: String
  name: String
  projects: ProjectUpdateManyWithoutCompanyIdInput
  status: CompanyStatus
  suppliers: SupplierUpdateManyWithoutCompanyIdInput
  updatedAt: DateTime
  userId: UserUpdateOneRequiredWithoutCompaniesInput
  userRoles: UserRoleUpdateManyWithoutCompanyIdInput
}

input CompanyUpdateWithoutSuppliersDataInput {
  addresses: AddressUpdateManyWithoutCompaniesInput
  companyType: CompanyType
  contacts: ContactUpdateManyWithoutCompaniesInput
  createdAt: DateTime
  id: String
  logo: String
  logoThumb: String
  name: String
  projects: ProjectUpdateManyWithoutCompanyIdInput
  status: CompanyStatus
  subscriptions: SubscriptionUpdateManyWithoutCompanyIdInput
  updatedAt: DateTime
  userId: UserUpdateOneRequiredWithoutCompaniesInput
  userRoles: UserRoleUpdateManyWithoutCompanyIdInput
}

input CompanyUpdateWithoutUserIdDataInput {
  addresses: AddressUpdateManyWithoutCompaniesInput
  companyType: CompanyType
  contacts: ContactUpdateManyWithoutCompaniesInput
  createdAt: DateTime
  id: String
  logo: String
  logoThumb: String
  name: String
  projects: ProjectUpdateManyWithoutCompanyIdInput
  status: CompanyStatus
  subscriptions: SubscriptionUpdateManyWithoutCompanyIdInput
  suppliers: SupplierUpdateManyWithoutCompanyIdInput
  updatedAt: DateTime
  userRoles: UserRoleUpdateManyWithoutCompanyIdInput
}

input CompanyUpdateWithoutUserRolesDataInput {
  addresses: AddressUpdateManyWithoutCompaniesInput
  companyType: CompanyType
  contacts: ContactUpdateManyWithoutCompaniesInput
  createdAt: DateTime
  id: String
  logo: String
  logoThumb: String
  name: String
  projects: ProjectUpdateManyWithoutCompanyIdInput
  status: CompanyStatus
  subscriptions: SubscriptionUpdateManyWithoutCompanyIdInput
  suppliers: SupplierUpdateManyWithoutCompanyIdInput
  updatedAt: DateTime
  userId: UserUpdateOneRequiredWithoutCompaniesInput
}

input CompanyUpdateWithWhereUniqueWithoutAddressesInput {
  data: CompanyUpdateWithoutAddressesDataInput!
  where: CompanyWhereUniqueInput!
}

input CompanyUpdateWithWhereUniqueWithoutContactsInput {
  data: CompanyUpdateWithoutContactsDataInput!
  where: CompanyWhereUniqueInput!
}

input CompanyUpdateWithWhereUniqueWithoutUserIdInput {
  data: CompanyUpdateWithoutUserIdDataInput!
  where: CompanyWhereUniqueInput!
}

input CompanyUpsertWithoutProjectsInput {
  create: CompanyCreateWithoutProjectsInput!
  update: CompanyUpdateWithoutProjectsDataInput!
}

input CompanyUpsertWithoutSubscriptionsInput {
  create: CompanyCreateWithoutSubscriptionsInput!
  update: CompanyUpdateWithoutSubscriptionsDataInput!
}

input CompanyUpsertWithoutSuppliersInput {
  create: CompanyCreateWithoutSuppliersInput!
  update: CompanyUpdateWithoutSuppliersDataInput!
}

input CompanyUpsertWithoutUserRolesInput {
  create: CompanyCreateWithoutUserRolesInput!
  update: CompanyUpdateWithoutUserRolesDataInput!
}

input CompanyUpsertWithWhereUniqueWithoutAddressesInput {
  create: CompanyCreateWithoutAddressesInput!
  update: CompanyUpdateWithoutAddressesDataInput!
  where: CompanyWhereUniqueInput!
}

input CompanyUpsertWithWhereUniqueWithoutContactsInput {
  create: CompanyCreateWithoutContactsInput!
  update: CompanyUpdateWithoutContactsDataInput!
  where: CompanyWhereUniqueInput!
}

input CompanyUpsertWithWhereUniqueWithoutUserIdInput {
  create: CompanyCreateWithoutUserIdInput!
  update: CompanyUpdateWithoutUserIdDataInput!
  where: CompanyWhereUniqueInput!
}

input CompanyWhereInput {
  addresses: AddressFilter
  AND: [CompanyWhereInput!]
  companyType: CompanyType
  contacts: ContactFilter
  createdAt: DateTimeFilter
  id: StringFilter
  logo: NullableStringFilter
  logoThumb: NullableStringFilter
  name: StringFilter
  NOT: [CompanyWhereInput!]
  OR: [CompanyWhereInput!]
  projects: ProjectFilter
  status: CompanyStatus
  subscriptions: SubscriptionFilter
  suppliers: SupplierFilter
  updatedAt: DateTimeFilter
  userId: UserWhereInput
  userRoles: UserRoleFilter
}

input CompanyWhereUniqueInput {
  id: String
}

type Contact {
  clients(after: ClientWhereUniqueInput, before: ClientWhereUniqueInput, first: Int, last: Int, skip: Int): [Client!]!
  companies(after: CompanyWhereUniqueInput, before: CompanyWhereUniqueInput, first: Int, last: Int, skip: Int): [Company!]!
  contactType: ContactType!
  createdAt: DateTime!
  id: String!
  suppliers(after: SupplierWhereUniqueInput, before: SupplierWhereUniqueInput, first: Int, last: Int, skip: Int): [Supplier!]!
  value: String!
}

input ContactCreateInput {
  clients: ClientCreateManyWithoutContactsInput
  companies: CompanyCreateManyWithoutContactsInput
  contactType: ContactType!
  createdAt: DateTime
  id: String
  suppliers: SupplierCreateManyWithoutContactsInput
  value: String!
}

input ContactCreateManyWithoutClientsInput {
  connect: [ContactWhereUniqueInput!]
  create: [ContactCreateWithoutClientsInput!]
}

input ContactCreateManyWithoutCompaniesInput {
  connect: [ContactWhereUniqueInput!]
  create: [ContactCreateWithoutCompaniesInput!]
}

input ContactCreateManyWithoutSuppliersInput {
  connect: [ContactWhereUniqueInput!]
  create: [ContactCreateWithoutSuppliersInput!]
}

input ContactCreateWithoutClientsInput {
  companies: CompanyCreateManyWithoutContactsInput
  contactType: ContactType!
  createdAt: DateTime
  id: String
  suppliers: SupplierCreateManyWithoutContactsInput
  value: String!
}

input ContactCreateWithoutCompaniesInput {
  clients: ClientCreateManyWithoutContactsInput
  contactType: ContactType!
  createdAt: DateTime
  id: String
  suppliers: SupplierCreateManyWithoutContactsInput
  value: String!
}

input ContactCreateWithoutSuppliersInput {
  clients: ClientCreateManyWithoutContactsInput
  companies: CompanyCreateManyWithoutContactsInput
  contactType: ContactType!
  createdAt: DateTime
  id: String
  value: String!
}

input ContactFilter {
  every: ContactWhereInput
  none: ContactWhereInput
  some: ContactWhereInput
}

input ContactScalarWhereInput {
  AND: [ContactScalarWhereInput!]
  clients: ClientFilter
  companies: CompanyFilter
  contactType: ContactType
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [ContactScalarWhereInput!]
  OR: [ContactScalarWhereInput!]
  suppliers: SupplierFilter
  value: StringFilter
}

enum ContactType {
  ADDRESS
  EMAIL
  PHONE_NUMBER
}

input ContactUpdateInput {
  clients: ClientUpdateManyWithoutContactsInput
  companies: CompanyUpdateManyWithoutContactsInput
  contactType: ContactType
  createdAt: DateTime
  id: String
  suppliers: SupplierUpdateManyWithoutContactsInput
  value: String
}

input ContactUpdateManyDataInput {
  contactType: ContactType
  createdAt: DateTime
  id: String
  value: String
}

input ContactUpdateManyMutationInput {
  contactType: ContactType
  createdAt: DateTime
  id: String
  value: String
}

input ContactUpdateManyWithoutClientsInput {
  connect: [ContactWhereUniqueInput!]
  create: [ContactCreateWithoutClientsInput!]
  delete: [ContactWhereUniqueInput!]
  deleteMany: [ContactScalarWhereInput!]
  disconnect: [ContactWhereUniqueInput!]
  set: [ContactWhereUniqueInput!]
  update: [ContactUpdateWithWhereUniqueWithoutClientsInput!]
  updateMany: [ContactUpdateManyWithWhereNestedInput!]
  upsert: [ContactUpsertWithWhereUniqueWithoutClientsInput!]
}

input ContactUpdateManyWithoutCompaniesInput {
  connect: [ContactWhereUniqueInput!]
  create: [ContactCreateWithoutCompaniesInput!]
  delete: [ContactWhereUniqueInput!]
  deleteMany: [ContactScalarWhereInput!]
  disconnect: [ContactWhereUniqueInput!]
  set: [ContactWhereUniqueInput!]
  update: [ContactUpdateWithWhereUniqueWithoutCompaniesInput!]
  updateMany: [ContactUpdateManyWithWhereNestedInput!]
  upsert: [ContactUpsertWithWhereUniqueWithoutCompaniesInput!]
}

input ContactUpdateManyWithoutSuppliersInput {
  connect: [ContactWhereUniqueInput!]
  create: [ContactCreateWithoutSuppliersInput!]
  delete: [ContactWhereUniqueInput!]
  deleteMany: [ContactScalarWhereInput!]
  disconnect: [ContactWhereUniqueInput!]
  set: [ContactWhereUniqueInput!]
  update: [ContactUpdateWithWhereUniqueWithoutSuppliersInput!]
  updateMany: [ContactUpdateManyWithWhereNestedInput!]
  upsert: [ContactUpsertWithWhereUniqueWithoutSuppliersInput!]
}

input ContactUpdateManyWithWhereNestedInput {
  data: ContactUpdateManyDataInput!
  where: ContactScalarWhereInput!
}

input ContactUpdateWithoutClientsDataInput {
  companies: CompanyUpdateManyWithoutContactsInput
  contactType: ContactType
  createdAt: DateTime
  id: String
  suppliers: SupplierUpdateManyWithoutContactsInput
  value: String
}

input ContactUpdateWithoutCompaniesDataInput {
  clients: ClientUpdateManyWithoutContactsInput
  contactType: ContactType
  createdAt: DateTime
  id: String
  suppliers: SupplierUpdateManyWithoutContactsInput
  value: String
}

input ContactUpdateWithoutSuppliersDataInput {
  clients: ClientUpdateManyWithoutContactsInput
  companies: CompanyUpdateManyWithoutContactsInput
  contactType: ContactType
  createdAt: DateTime
  id: String
  value: String
}

input ContactUpdateWithWhereUniqueWithoutClientsInput {
  data: ContactUpdateWithoutClientsDataInput!
  where: ContactWhereUniqueInput!
}

input ContactUpdateWithWhereUniqueWithoutCompaniesInput {
  data: ContactUpdateWithoutCompaniesDataInput!
  where: ContactWhereUniqueInput!
}

input ContactUpdateWithWhereUniqueWithoutSuppliersInput {
  data: ContactUpdateWithoutSuppliersDataInput!
  where: ContactWhereUniqueInput!
}

input ContactUpsertWithWhereUniqueWithoutClientsInput {
  create: ContactCreateWithoutClientsInput!
  update: ContactUpdateWithoutClientsDataInput!
  where: ContactWhereUniqueInput!
}

input ContactUpsertWithWhereUniqueWithoutCompaniesInput {
  create: ContactCreateWithoutCompaniesInput!
  update: ContactUpdateWithoutCompaniesDataInput!
  where: ContactWhereUniqueInput!
}

input ContactUpsertWithWhereUniqueWithoutSuppliersInput {
  create: ContactCreateWithoutSuppliersInput!
  update: ContactUpdateWithoutSuppliersDataInput!
  where: ContactWhereUniqueInput!
}

input ContactWhereInput {
  AND: [ContactWhereInput!]
  clients: ClientFilter
  companies: CompanyFilter
  contactType: ContactType
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [ContactWhereInput!]
  OR: [ContactWhereInput!]
  suppliers: SupplierFilter
  value: StringFilter
}

input ContactWhereUniqueInput {
  id: String
}

type Country {
  createdAt: DateTime!
  id: String!
  name: String!
  states(after: StateWhereUniqueInput, before: StateWhereUniqueInput, first: Int, last: Int, skip: Int): [State!]!
  updatedAt: DateTime!
}

input CountryCreateInput {
  addresses: AddressCreateManyWithoutCountryIdInput
  createdAt: DateTime
  id: String
  name: String!
  states: StateCreateManyWithoutCountryInput
  updatedAt: DateTime
}

input CountryCreateOneWithoutAddressesInput {
  connect: CountryWhereUniqueInput
  create: CountryCreateWithoutAddressesInput
}

input CountryCreateOneWithoutStatesInput {
  connect: CountryWhereUniqueInput
  create: CountryCreateWithoutStatesInput
}

input CountryCreateWithoutAddressesInput {
  createdAt: DateTime
  id: String
  name: String!
  states: StateCreateManyWithoutCountryInput
  updatedAt: DateTime
}

input CountryCreateWithoutStatesInput {
  addresses: AddressCreateManyWithoutCountryIdInput
  createdAt: DateTime
  id: String
  name: String!
  updatedAt: DateTime
}

input CountryUpdateInput {
  addresses: AddressUpdateManyWithoutCountryIdInput
  createdAt: DateTime
  id: String
  name: String
  states: StateUpdateManyWithoutCountryInput
  updatedAt: DateTime
}

input CountryUpdateManyMutationInput {
  createdAt: DateTime
  id: String
  name: String
  updatedAt: DateTime
}

input CountryUpdateOneWithoutAddressesInput {
  connect: CountryWhereUniqueInput
  create: CountryCreateWithoutAddressesInput
  delete: Boolean
  disconnect: Boolean
  update: CountryUpdateWithoutAddressesDataInput
  upsert: CountryUpsertWithoutAddressesInput
}

input CountryUpdateOneWithoutStatesInput {
  connect: CountryWhereUniqueInput
  create: CountryCreateWithoutStatesInput
  delete: Boolean
  disconnect: Boolean
  update: CountryUpdateWithoutStatesDataInput
  upsert: CountryUpsertWithoutStatesInput
}

input CountryUpdateWithoutAddressesDataInput {
  createdAt: DateTime
  id: String
  name: String
  states: StateUpdateManyWithoutCountryInput
  updatedAt: DateTime
}

input CountryUpdateWithoutStatesDataInput {
  addresses: AddressUpdateManyWithoutCountryIdInput
  createdAt: DateTime
  id: String
  name: String
  updatedAt: DateTime
}

input CountryUpsertWithoutAddressesInput {
  create: CountryCreateWithoutAddressesInput!
  update: CountryUpdateWithoutAddressesDataInput!
}

input CountryUpsertWithoutStatesInput {
  create: CountryCreateWithoutStatesInput!
  update: CountryUpdateWithoutStatesDataInput!
}

input CountryWhereInput {
  addresses: AddressFilter
  AND: [CountryWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  name: StringFilter
  NOT: [CountryWhereInput!]
  OR: [CountryWhereInput!]
  states: StateFilter
  updatedAt: DateTimeFilter
}

input CountryWhereUniqueInput {
  id: String
}

scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

type Discount {
  createdAt: DateTime!
  discountCode: String!
  expirationDate: DateTime!
  id: String!
  timesItCanBeUsed: Int!
}

input DiscountCreateInput {
  createdAt: DateTime
  discountCode: String!
  expirationDate: DateTime!
  id: String
  timesItCanBeUsed: Int!
}

input DiscountUpdateInput {
  createdAt: DateTime
  discountCode: String
  expirationDate: DateTime
  id: String
  timesItCanBeUsed: Int
}

input DiscountUpdateManyMutationInput {
  createdAt: DateTime
  discountCode: String
  expirationDate: DateTime
  id: String
  timesItCanBeUsed: Int
}

input DiscountWhereInput {
  AND: [DiscountWhereInput!]
  createdAt: DateTimeFilter
  discountCode: StringFilter
  expirationDate: DateTimeFilter
  id: StringFilter
  NOT: [DiscountWhereInput!]
  OR: [DiscountWhereInput!]
  timesItCanBeUsed: IntFilter
}

input DiscountWhereUniqueInput {
  id: String
}

type FeedComment {
  content: String!
  createdAt: DateTime!
  id: String!
  updatedAt: DateTime!
}

input FeedCommentCreateInput {
  content: String!
  createdAt: DateTime
  id: String
  updatedAt: DateTime
}

input FeedCommentUpdateInput {
  content: String
  createdAt: DateTime
  id: String
  updatedAt: DateTime
}

input FeedCommentUpdateManyMutationInput {
  content: String
  createdAt: DateTime
  id: String
  updatedAt: DateTime
}

input FeedCommentWhereInput {
  AND: [FeedCommentWhereInput!]
  content: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [FeedCommentWhereInput!]
  OR: [FeedCommentWhereInput!]
  updatedAt: DateTimeFilter
}

input FeedCommentWhereUniqueInput {
  id: String
}

type FeedEntry {
  body: String!
  createdAt: DateTime!
  id: String!
  projectId: Project!
  title: String!
  updatedAt: DateTime!
}

input FeedEntryCreateInput {
  body: String!
  createdAt: DateTime
  feedMedias: FeedMediaCreateManyWithoutFeedEntryIdInput
  id: String
  projectId: ProjectCreateOneWithoutFeedEntriesInput!
  title: String!
  updatedAt: DateTime
}

input FeedEntryCreateManyWithoutProjectIdInput {
  connect: [FeedEntryWhereUniqueInput!]
  create: [FeedEntryCreateWithoutProjectIdInput!]
}

input FeedEntryCreateOneWithoutFeedMediasInput {
  connect: FeedEntryWhereUniqueInput
  create: FeedEntryCreateWithoutFeedMediasInput
}

input FeedEntryCreateWithoutFeedMediasInput {
  body: String!
  createdAt: DateTime
  id: String
  projectId: ProjectCreateOneWithoutFeedEntriesInput!
  title: String!
  updatedAt: DateTime
}

input FeedEntryCreateWithoutProjectIdInput {
  body: String!
  createdAt: DateTime
  feedMedias: FeedMediaCreateManyWithoutFeedEntryIdInput
  id: String
  title: String!
  updatedAt: DateTime
}

input FeedEntryFilter {
  every: FeedEntryWhereInput
  none: FeedEntryWhereInput
  some: FeedEntryWhereInput
}

input FeedEntryScalarWhereInput {
  AND: [FeedEntryScalarWhereInput!]
  body: StringFilter
  createdAt: DateTimeFilter
  feedMedias: FeedMediaFilter
  id: StringFilter
  NOT: [FeedEntryScalarWhereInput!]
  OR: [FeedEntryScalarWhereInput!]
  title: StringFilter
  updatedAt: DateTimeFilter
}

input FeedEntryUpdateInput {
  body: String
  createdAt: DateTime
  feedMedias: FeedMediaUpdateManyWithoutFeedEntryIdInput
  id: String
  projectId: ProjectUpdateOneRequiredWithoutFeedEntriesInput
  title: String
  updatedAt: DateTime
}

input FeedEntryUpdateManyDataInput {
  body: String
  createdAt: DateTime
  id: String
  title: String
  updatedAt: DateTime
}

input FeedEntryUpdateManyMutationInput {
  body: String
  createdAt: DateTime
  id: String
  title: String
  updatedAt: DateTime
}

input FeedEntryUpdateManyWithoutProjectIdInput {
  connect: [FeedEntryWhereUniqueInput!]
  create: [FeedEntryCreateWithoutProjectIdInput!]
  delete: [FeedEntryWhereUniqueInput!]
  deleteMany: [FeedEntryScalarWhereInput!]
  disconnect: [FeedEntryWhereUniqueInput!]
  set: [FeedEntryWhereUniqueInput!]
  update: [FeedEntryUpdateWithWhereUniqueWithoutProjectIdInput!]
  updateMany: [FeedEntryUpdateManyWithWhereNestedInput!]
  upsert: [FeedEntryUpsertWithWhereUniqueWithoutProjectIdInput!]
}

input FeedEntryUpdateManyWithWhereNestedInput {
  data: FeedEntryUpdateManyDataInput!
  where: FeedEntryScalarWhereInput!
}

input FeedEntryUpdateOneRequiredWithoutFeedMediasInput {
  connect: FeedEntryWhereUniqueInput
  create: FeedEntryCreateWithoutFeedMediasInput
  update: FeedEntryUpdateWithoutFeedMediasDataInput
  upsert: FeedEntryUpsertWithoutFeedMediasInput
}

input FeedEntryUpdateWithoutFeedMediasDataInput {
  body: String
  createdAt: DateTime
  id: String
  projectId: ProjectUpdateOneRequiredWithoutFeedEntriesInput
  title: String
  updatedAt: DateTime
}

input FeedEntryUpdateWithoutProjectIdDataInput {
  body: String
  createdAt: DateTime
  feedMedias: FeedMediaUpdateManyWithoutFeedEntryIdInput
  id: String
  title: String
  updatedAt: DateTime
}

input FeedEntryUpdateWithWhereUniqueWithoutProjectIdInput {
  data: FeedEntryUpdateWithoutProjectIdDataInput!
  where: FeedEntryWhereUniqueInput!
}

input FeedEntryUpsertWithoutFeedMediasInput {
  create: FeedEntryCreateWithoutFeedMediasInput!
  update: FeedEntryUpdateWithoutFeedMediasDataInput!
}

input FeedEntryUpsertWithWhereUniqueWithoutProjectIdInput {
  create: FeedEntryCreateWithoutProjectIdInput!
  update: FeedEntryUpdateWithoutProjectIdDataInput!
  where: FeedEntryWhereUniqueInput!
}

input FeedEntryWhereInput {
  AND: [FeedEntryWhereInput!]
  body: StringFilter
  createdAt: DateTimeFilter
  feedMedias: FeedMediaFilter
  id: StringFilter
  NOT: [FeedEntryWhereInput!]
  OR: [FeedEntryWhereInput!]
  projectId: ProjectWhereInput
  title: StringFilter
  updatedAt: DateTimeFilter
}

input FeedEntryWhereUniqueInput {
  id: String
}

type FeedMedia {
  createdAt: DateTime!
  feedEntryId: FeedEntry!
  id: String!
  mediaUrl: String!
  thumbUrl: String!
  updatedAt: DateTime!
}

input FeedMediaCreateInput {
  createdAt: DateTime
  feedEntryId: FeedEntryCreateOneWithoutFeedMediasInput!
  id: String
  mediaUrl: String!
  thumbUrl: String!
  updatedAt: DateTime
}

input FeedMediaCreateManyWithoutFeedEntryIdInput {
  connect: [FeedMediaWhereUniqueInput!]
  create: [FeedMediaCreateWithoutFeedEntryIdInput!]
}

input FeedMediaCreateWithoutFeedEntryIdInput {
  createdAt: DateTime
  id: String
  mediaUrl: String!
  thumbUrl: String!
  updatedAt: DateTime
}

input FeedMediaFilter {
  every: FeedMediaWhereInput
  none: FeedMediaWhereInput
  some: FeedMediaWhereInput
}

input FeedMediaScalarWhereInput {
  AND: [FeedMediaScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  mediaUrl: StringFilter
  NOT: [FeedMediaScalarWhereInput!]
  OR: [FeedMediaScalarWhereInput!]
  thumbUrl: StringFilter
  updatedAt: DateTimeFilter
}

input FeedMediaUpdateInput {
  createdAt: DateTime
  feedEntryId: FeedEntryUpdateOneRequiredWithoutFeedMediasInput
  id: String
  mediaUrl: String
  thumbUrl: String
  updatedAt: DateTime
}

input FeedMediaUpdateManyDataInput {
  createdAt: DateTime
  id: String
  mediaUrl: String
  thumbUrl: String
  updatedAt: DateTime
}

input FeedMediaUpdateManyMutationInput {
  createdAt: DateTime
  id: String
  mediaUrl: String
  thumbUrl: String
  updatedAt: DateTime
}

input FeedMediaUpdateManyWithoutFeedEntryIdInput {
  connect: [FeedMediaWhereUniqueInput!]
  create: [FeedMediaCreateWithoutFeedEntryIdInput!]
  delete: [FeedMediaWhereUniqueInput!]
  deleteMany: [FeedMediaScalarWhereInput!]
  disconnect: [FeedMediaWhereUniqueInput!]
  set: [FeedMediaWhereUniqueInput!]
  update: [FeedMediaUpdateWithWhereUniqueWithoutFeedEntryIdInput!]
  updateMany: [FeedMediaUpdateManyWithWhereNestedInput!]
  upsert: [FeedMediaUpsertWithWhereUniqueWithoutFeedEntryIdInput!]
}

input FeedMediaUpdateManyWithWhereNestedInput {
  data: FeedMediaUpdateManyDataInput!
  where: FeedMediaScalarWhereInput!
}

input FeedMediaUpdateWithoutFeedEntryIdDataInput {
  createdAt: DateTime
  id: String
  mediaUrl: String
  thumbUrl: String
  updatedAt: DateTime
}

input FeedMediaUpdateWithWhereUniqueWithoutFeedEntryIdInput {
  data: FeedMediaUpdateWithoutFeedEntryIdDataInput!
  where: FeedMediaWhereUniqueInput!
}

input FeedMediaUpsertWithWhereUniqueWithoutFeedEntryIdInput {
  create: FeedMediaCreateWithoutFeedEntryIdInput!
  update: FeedMediaUpdateWithoutFeedEntryIdDataInput!
  where: FeedMediaWhereUniqueInput!
}

input FeedMediaWhereInput {
  AND: [FeedMediaWhereInput!]
  createdAt: DateTimeFilter
  feedEntryId: FeedEntryWhereInput
  id: StringFilter
  mediaUrl: StringFilter
  NOT: [FeedMediaWhereInput!]
  OR: [FeedMediaWhereInput!]
  thumbUrl: StringFilter
  updatedAt: DateTimeFilter
}

input FeedMediaWhereUniqueInput {
  id: String
}

type FeedReaction {
  createdAt: DateTime!
  id: String!
  reactionType: ReactionType!
  updatedAt: DateTime!
}

input FeedReactionCreateInput {
  createdAt: DateTime
  id: String
  reactionType: ReactionType!
  updatedAt: DateTime
}

input FeedReactionUpdateInput {
  createdAt: DateTime
  id: String
  reactionType: ReactionType
  updatedAt: DateTime
}

input FeedReactionUpdateManyMutationInput {
  createdAt: DateTime
  id: String
  reactionType: ReactionType
  updatedAt: DateTime
}

input FeedReactionWhereInput {
  AND: [FeedReactionWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [FeedReactionWhereInput!]
  OR: [FeedReactionWhereInput!]
  reactionType: ReactionType
  updatedAt: DateTimeFilter
}

input FeedReactionWhereUniqueInput {
  id: String
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: Float
  notIn: [Float!]
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

type Invitation {
  clickedMetaData: String
  createdAt: DateTime!
  email: String!
  id: String!
  inviterUserId: User!
  phone: Int!
  timesClicked: Int!
  url: String!
}

input InvitationCreateInput {
  clickedMetaData: String
  createdAt: DateTime
  email: String!
  id: String
  inviterUserId: UserCreateOneWithoutInvitationsInput!
  phone: Int!
  timesClicked: Int!
  url: String!
}

input InvitationCreateManyWithoutInviterUserIdInput {
  connect: [InvitationWhereUniqueInput!]
  create: [InvitationCreateWithoutInviterUserIdInput!]
}

input InvitationCreateWithoutInviterUserIdInput {
  clickedMetaData: String
  createdAt: DateTime
  email: String!
  id: String
  phone: Int!
  timesClicked: Int!
  url: String!
}

input InvitationFilter {
  every: InvitationWhereInput
  none: InvitationWhereInput
  some: InvitationWhereInput
}

input InvitationScalarWhereInput {
  AND: [InvitationScalarWhereInput!]
  clickedMetaData: NullableStringFilter
  createdAt: DateTimeFilter
  email: StringFilter
  id: StringFilter
  NOT: [InvitationScalarWhereInput!]
  OR: [InvitationScalarWhereInput!]
  phone: IntFilter
  timesClicked: IntFilter
  url: StringFilter
}

input InvitationUpdateInput {
  clickedMetaData: String
  createdAt: DateTime
  email: String
  id: String
  inviterUserId: UserUpdateOneRequiredWithoutInvitationsInput
  phone: Int
  timesClicked: Int
  url: String
}

input InvitationUpdateManyDataInput {
  clickedMetaData: String
  createdAt: DateTime
  email: String
  id: String
  phone: Int
  timesClicked: Int
  url: String
}

input InvitationUpdateManyMutationInput {
  clickedMetaData: String
  createdAt: DateTime
  email: String
  id: String
  phone: Int
  timesClicked: Int
  url: String
}

input InvitationUpdateManyWithoutInviterUserIdInput {
  connect: [InvitationWhereUniqueInput!]
  create: [InvitationCreateWithoutInviterUserIdInput!]
  delete: [InvitationWhereUniqueInput!]
  deleteMany: [InvitationScalarWhereInput!]
  disconnect: [InvitationWhereUniqueInput!]
  set: [InvitationWhereUniqueInput!]
  update: [InvitationUpdateWithWhereUniqueWithoutInviterUserIdInput!]
  updateMany: [InvitationUpdateManyWithWhereNestedInput!]
  upsert: [InvitationUpsertWithWhereUniqueWithoutInviterUserIdInput!]
}

input InvitationUpdateManyWithWhereNestedInput {
  data: InvitationUpdateManyDataInput!
  where: InvitationScalarWhereInput!
}

input InvitationUpdateWithoutInviterUserIdDataInput {
  clickedMetaData: String
  createdAt: DateTime
  email: String
  id: String
  phone: Int
  timesClicked: Int
  url: String
}

input InvitationUpdateWithWhereUniqueWithoutInviterUserIdInput {
  data: InvitationUpdateWithoutInviterUserIdDataInput!
  where: InvitationWhereUniqueInput!
}

input InvitationUpsertWithWhereUniqueWithoutInviterUserIdInput {
  create: InvitationCreateWithoutInviterUserIdInput!
  update: InvitationUpdateWithoutInviterUserIdDataInput!
  where: InvitationWhereUniqueInput!
}

input InvitationWhereInput {
  AND: [InvitationWhereInput!]
  clickedMetaData: NullableStringFilter
  createdAt: DateTimeFilter
  email: StringFilter
  id: StringFilter
  inviterUserId: UserWhereInput
  NOT: [InvitationWhereInput!]
  OR: [InvitationWhereInput!]
  phone: IntFilter
  timesClicked: IntFilter
  url: StringFilter
}

input InvitationWhereUniqueInput {
  id: String
}

type Invoice {
  clientId: Client!
  createdAt: DateTime!
  dueDate: DateTime!
  id: String!
  invoiceOwnerId: User!
  notes: String!
  number: Int!
  projectId: Project!
  proposalId: Proposal!
  status: InvoiceStatus!
  taxRate: Float
  updatedAt: DateTime!
}

input InvoiceCreateInput {
  clientId: ClientCreateOneWithoutInvoicesInput!
  createdAt: DateTime
  dueDate: DateTime!
  id: String
  invoiceLineItems: InvoiceLineItemCreateManyWithoutInvoiceIdInput
  invoiceOwnerId: UserCreateOneWithoutInvoicesInput!
  invoicePayments: InvoicePaymentCreateManyWithoutInvoiceIdInput
  notes: String!
  number: Int!
  projectId: ProjectCreateOneWithoutInvoicesInput!
  proposalId: ProposalCreateOneWithoutInvoicesInput!
  shareLinks: ShareLinkCreateManyWithoutInvoiceIdInput
  status: InvoiceStatus!
  taxRate: Float
  updatedAt: DateTime
}

input InvoiceCreateManyWithoutClientIdInput {
  connect: [InvoiceWhereUniqueInput!]
  create: [InvoiceCreateWithoutClientIdInput!]
}

input InvoiceCreateManyWithoutInvoiceOwnerIdInput {
  connect: [InvoiceWhereUniqueInput!]
  create: [InvoiceCreateWithoutInvoiceOwnerIdInput!]
}

input InvoiceCreateManyWithoutProjectIdInput {
  connect: [InvoiceWhereUniqueInput!]
  create: [InvoiceCreateWithoutProjectIdInput!]
}

input InvoiceCreateManyWithoutProposalIdInput {
  connect: [InvoiceWhereUniqueInput!]
  create: [InvoiceCreateWithoutProposalIdInput!]
}

input InvoiceCreateOneWithoutInvoiceLineItemsInput {
  connect: InvoiceWhereUniqueInput
  create: InvoiceCreateWithoutInvoiceLineItemsInput
}

input InvoiceCreateOneWithoutInvoicePaymentsInput {
  connect: InvoiceWhereUniqueInput
  create: InvoiceCreateWithoutInvoicePaymentsInput
}

input InvoiceCreateOneWithoutShareLinksInput {
  connect: InvoiceWhereUniqueInput
  create: InvoiceCreateWithoutShareLinksInput
}

input InvoiceCreateWithoutClientIdInput {
  createdAt: DateTime
  dueDate: DateTime!
  id: String
  invoiceLineItems: InvoiceLineItemCreateManyWithoutInvoiceIdInput
  invoiceOwnerId: UserCreateOneWithoutInvoicesInput!
  invoicePayments: InvoicePaymentCreateManyWithoutInvoiceIdInput
  notes: String!
  number: Int!
  projectId: ProjectCreateOneWithoutInvoicesInput!
  proposalId: ProposalCreateOneWithoutInvoicesInput!
  shareLinks: ShareLinkCreateManyWithoutInvoiceIdInput
  status: InvoiceStatus!
  taxRate: Float
  updatedAt: DateTime
}

input InvoiceCreateWithoutInvoiceLineItemsInput {
  clientId: ClientCreateOneWithoutInvoicesInput!
  createdAt: DateTime
  dueDate: DateTime!
  id: String
  invoiceOwnerId: UserCreateOneWithoutInvoicesInput!
  invoicePayments: InvoicePaymentCreateManyWithoutInvoiceIdInput
  notes: String!
  number: Int!
  projectId: ProjectCreateOneWithoutInvoicesInput!
  proposalId: ProposalCreateOneWithoutInvoicesInput!
  shareLinks: ShareLinkCreateManyWithoutInvoiceIdInput
  status: InvoiceStatus!
  taxRate: Float
  updatedAt: DateTime
}

input InvoiceCreateWithoutInvoiceOwnerIdInput {
  clientId: ClientCreateOneWithoutInvoicesInput!
  createdAt: DateTime
  dueDate: DateTime!
  id: String
  invoiceLineItems: InvoiceLineItemCreateManyWithoutInvoiceIdInput
  invoicePayments: InvoicePaymentCreateManyWithoutInvoiceIdInput
  notes: String!
  number: Int!
  projectId: ProjectCreateOneWithoutInvoicesInput!
  proposalId: ProposalCreateOneWithoutInvoicesInput!
  shareLinks: ShareLinkCreateManyWithoutInvoiceIdInput
  status: InvoiceStatus!
  taxRate: Float
  updatedAt: DateTime
}

input InvoiceCreateWithoutInvoicePaymentsInput {
  clientId: ClientCreateOneWithoutInvoicesInput!
  createdAt: DateTime
  dueDate: DateTime!
  id: String
  invoiceLineItems: InvoiceLineItemCreateManyWithoutInvoiceIdInput
  invoiceOwnerId: UserCreateOneWithoutInvoicesInput!
  notes: String!
  number: Int!
  projectId: ProjectCreateOneWithoutInvoicesInput!
  proposalId: ProposalCreateOneWithoutInvoicesInput!
  shareLinks: ShareLinkCreateManyWithoutInvoiceIdInput
  status: InvoiceStatus!
  taxRate: Float
  updatedAt: DateTime
}

input InvoiceCreateWithoutProjectIdInput {
  clientId: ClientCreateOneWithoutInvoicesInput!
  createdAt: DateTime
  dueDate: DateTime!
  id: String
  invoiceLineItems: InvoiceLineItemCreateManyWithoutInvoiceIdInput
  invoiceOwnerId: UserCreateOneWithoutInvoicesInput!
  invoicePayments: InvoicePaymentCreateManyWithoutInvoiceIdInput
  notes: String!
  number: Int!
  proposalId: ProposalCreateOneWithoutInvoicesInput!
  shareLinks: ShareLinkCreateManyWithoutInvoiceIdInput
  status: InvoiceStatus!
  taxRate: Float
  updatedAt: DateTime
}

input InvoiceCreateWithoutProposalIdInput {
  clientId: ClientCreateOneWithoutInvoicesInput!
  createdAt: DateTime
  dueDate: DateTime!
  id: String
  invoiceLineItems: InvoiceLineItemCreateManyWithoutInvoiceIdInput
  invoiceOwnerId: UserCreateOneWithoutInvoicesInput!
  invoicePayments: InvoicePaymentCreateManyWithoutInvoiceIdInput
  notes: String!
  number: Int!
  projectId: ProjectCreateOneWithoutInvoicesInput!
  shareLinks: ShareLinkCreateManyWithoutInvoiceIdInput
  status: InvoiceStatus!
  taxRate: Float
  updatedAt: DateTime
}

input InvoiceCreateWithoutShareLinksInput {
  clientId: ClientCreateOneWithoutInvoicesInput!
  createdAt: DateTime
  dueDate: DateTime!
  id: String
  invoiceLineItems: InvoiceLineItemCreateManyWithoutInvoiceIdInput
  invoiceOwnerId: UserCreateOneWithoutInvoicesInput!
  invoicePayments: InvoicePaymentCreateManyWithoutInvoiceIdInput
  notes: String!
  number: Int!
  projectId: ProjectCreateOneWithoutInvoicesInput!
  proposalId: ProposalCreateOneWithoutInvoicesInput!
  status: InvoiceStatus!
  taxRate: Float
  updatedAt: DateTime
}

input InvoiceFilter {
  every: InvoiceWhereInput
  none: InvoiceWhereInput
  some: InvoiceWhereInput
}

type InvoiceLineItem {
  amount: Float!
  createdAt: DateTime!
  description: String!
  discount: Float
  id: String!
  invoiceId: Invoice!
  quantity: Float!
  taxable: Boolean!
  unitPrice: Float!
  updatedAt: DateTime!
}

input InvoiceLineItemCreateInput {
  amount: Float!
  createdAt: DateTime
  description: String!
  discount: Float
  id: String
  invoiceId: InvoiceCreateOneWithoutInvoiceLineItemsInput!
  quantity: Float!
  taxable: Boolean!
  unitPrice: Float!
  updatedAt: DateTime
}

input InvoiceLineItemCreateManyWithoutInvoiceIdInput {
  connect: [InvoiceLineItemWhereUniqueInput!]
  create: [InvoiceLineItemCreateWithoutInvoiceIdInput!]
}

input InvoiceLineItemCreateWithoutInvoiceIdInput {
  amount: Float!
  createdAt: DateTime
  description: String!
  discount: Float
  id: String
  quantity: Float!
  taxable: Boolean!
  unitPrice: Float!
  updatedAt: DateTime
}

input InvoiceLineItemFilter {
  every: InvoiceLineItemWhereInput
  none: InvoiceLineItemWhereInput
  some: InvoiceLineItemWhereInput
}

input InvoiceLineItemScalarWhereInput {
  amount: FloatFilter
  AND: [InvoiceLineItemScalarWhereInput!]
  createdAt: DateTimeFilter
  description: StringFilter
  discount: NullableFloatFilter
  id: StringFilter
  NOT: [InvoiceLineItemScalarWhereInput!]
  OR: [InvoiceLineItemScalarWhereInput!]
  quantity: FloatFilter
  taxable: BooleanFilter
  unitPrice: FloatFilter
  updatedAt: DateTimeFilter
}

input InvoiceLineItemUpdateInput {
  amount: Float
  createdAt: DateTime
  description: String
  discount: Float
  id: String
  invoiceId: InvoiceUpdateOneRequiredWithoutInvoiceLineItemsInput
  quantity: Float
  taxable: Boolean
  unitPrice: Float
  updatedAt: DateTime
}

input InvoiceLineItemUpdateManyDataInput {
  amount: Float
  createdAt: DateTime
  description: String
  discount: Float
  id: String
  quantity: Float
  taxable: Boolean
  unitPrice: Float
  updatedAt: DateTime
}

input InvoiceLineItemUpdateManyMutationInput {
  amount: Float
  createdAt: DateTime
  description: String
  discount: Float
  id: String
  quantity: Float
  taxable: Boolean
  unitPrice: Float
  updatedAt: DateTime
}

input InvoiceLineItemUpdateManyWithoutInvoiceIdInput {
  connect: [InvoiceLineItemWhereUniqueInput!]
  create: [InvoiceLineItemCreateWithoutInvoiceIdInput!]
  delete: [InvoiceLineItemWhereUniqueInput!]
  deleteMany: [InvoiceLineItemScalarWhereInput!]
  disconnect: [InvoiceLineItemWhereUniqueInput!]
  set: [InvoiceLineItemWhereUniqueInput!]
  update: [InvoiceLineItemUpdateWithWhereUniqueWithoutInvoiceIdInput!]
  updateMany: [InvoiceLineItemUpdateManyWithWhereNestedInput!]
  upsert: [InvoiceLineItemUpsertWithWhereUniqueWithoutInvoiceIdInput!]
}

input InvoiceLineItemUpdateManyWithWhereNestedInput {
  data: InvoiceLineItemUpdateManyDataInput!
  where: InvoiceLineItemScalarWhereInput!
}

input InvoiceLineItemUpdateWithoutInvoiceIdDataInput {
  amount: Float
  createdAt: DateTime
  description: String
  discount: Float
  id: String
  quantity: Float
  taxable: Boolean
  unitPrice: Float
  updatedAt: DateTime
}

input InvoiceLineItemUpdateWithWhereUniqueWithoutInvoiceIdInput {
  data: InvoiceLineItemUpdateWithoutInvoiceIdDataInput!
  where: InvoiceLineItemWhereUniqueInput!
}

input InvoiceLineItemUpsertWithWhereUniqueWithoutInvoiceIdInput {
  create: InvoiceLineItemCreateWithoutInvoiceIdInput!
  update: InvoiceLineItemUpdateWithoutInvoiceIdDataInput!
  where: InvoiceLineItemWhereUniqueInput!
}

input InvoiceLineItemWhereInput {
  amount: FloatFilter
  AND: [InvoiceLineItemWhereInput!]
  createdAt: DateTimeFilter
  description: StringFilter
  discount: NullableFloatFilter
  id: StringFilter
  invoiceId: InvoiceWhereInput
  NOT: [InvoiceLineItemWhereInput!]
  OR: [InvoiceLineItemWhereInput!]
  quantity: FloatFilter
  taxable: BooleanFilter
  unitPrice: FloatFilter
  updatedAt: DateTimeFilter
}

input InvoiceLineItemWhereUniqueInput {
  id: String
}

type InvoicePayment {
  createdAt: DateTime!
  id: String!
  invoiceId: Invoice!
  paidByUserId: User
  paidOnline: Boolean!
  transactionId: String
}

input InvoicePaymentCreateInput {
  createdAt: DateTime
  id: String
  invoiceId: InvoiceCreateOneWithoutInvoicePaymentsInput!
  paidByUserId: UserCreateOneWithoutInvoicePaymentsInput
  paidOnline: Boolean!
  transactionId: String
}

input InvoicePaymentCreateManyWithoutInvoiceIdInput {
  connect: [InvoicePaymentWhereUniqueInput!]
  create: [InvoicePaymentCreateWithoutInvoiceIdInput!]
}

input InvoicePaymentCreateManyWithoutPaidByUserIdInput {
  connect: [InvoicePaymentWhereUniqueInput!]
  create: [InvoicePaymentCreateWithoutPaidByUserIdInput!]
}

input InvoicePaymentCreateWithoutInvoiceIdInput {
  createdAt: DateTime
  id: String
  paidByUserId: UserCreateOneWithoutInvoicePaymentsInput
  paidOnline: Boolean!
  transactionId: String
}

input InvoicePaymentCreateWithoutPaidByUserIdInput {
  createdAt: DateTime
  id: String
  invoiceId: InvoiceCreateOneWithoutInvoicePaymentsInput!
  paidOnline: Boolean!
  transactionId: String
}

input InvoicePaymentFilter {
  every: InvoicePaymentWhereInput
  none: InvoicePaymentWhereInput
  some: InvoicePaymentWhereInput
}

input InvoicePaymentScalarWhereInput {
  AND: [InvoicePaymentScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [InvoicePaymentScalarWhereInput!]
  OR: [InvoicePaymentScalarWhereInput!]
  paidOnline: BooleanFilter
  transactionId: NullableStringFilter
}

input InvoicePaymentUpdateInput {
  createdAt: DateTime
  id: String
  invoiceId: InvoiceUpdateOneRequiredWithoutInvoicePaymentsInput
  paidByUserId: UserUpdateOneWithoutInvoicePaymentsInput
  paidOnline: Boolean
  transactionId: String
}

input InvoicePaymentUpdateManyDataInput {
  createdAt: DateTime
  id: String
  paidOnline: Boolean
  transactionId: String
}

input InvoicePaymentUpdateManyMutationInput {
  createdAt: DateTime
  id: String
  paidOnline: Boolean
  transactionId: String
}

input InvoicePaymentUpdateManyWithoutInvoiceIdInput {
  connect: [InvoicePaymentWhereUniqueInput!]
  create: [InvoicePaymentCreateWithoutInvoiceIdInput!]
  delete: [InvoicePaymentWhereUniqueInput!]
  deleteMany: [InvoicePaymentScalarWhereInput!]
  disconnect: [InvoicePaymentWhereUniqueInput!]
  set: [InvoicePaymentWhereUniqueInput!]
  update: [InvoicePaymentUpdateWithWhereUniqueWithoutInvoiceIdInput!]
  updateMany: [InvoicePaymentUpdateManyWithWhereNestedInput!]
  upsert: [InvoicePaymentUpsertWithWhereUniqueWithoutInvoiceIdInput!]
}

input InvoicePaymentUpdateManyWithoutPaidByUserIdInput {
  connect: [InvoicePaymentWhereUniqueInput!]
  create: [InvoicePaymentCreateWithoutPaidByUserIdInput!]
  delete: [InvoicePaymentWhereUniqueInput!]
  deleteMany: [InvoicePaymentScalarWhereInput!]
  disconnect: [InvoicePaymentWhereUniqueInput!]
  set: [InvoicePaymentWhereUniqueInput!]
  update: [InvoicePaymentUpdateWithWhereUniqueWithoutPaidByUserIdInput!]
  updateMany: [InvoicePaymentUpdateManyWithWhereNestedInput!]
  upsert: [InvoicePaymentUpsertWithWhereUniqueWithoutPaidByUserIdInput!]
}

input InvoicePaymentUpdateManyWithWhereNestedInput {
  data: InvoicePaymentUpdateManyDataInput!
  where: InvoicePaymentScalarWhereInput!
}

input InvoicePaymentUpdateWithoutInvoiceIdDataInput {
  createdAt: DateTime
  id: String
  paidByUserId: UserUpdateOneWithoutInvoicePaymentsInput
  paidOnline: Boolean
  transactionId: String
}

input InvoicePaymentUpdateWithoutPaidByUserIdDataInput {
  createdAt: DateTime
  id: String
  invoiceId: InvoiceUpdateOneRequiredWithoutInvoicePaymentsInput
  paidOnline: Boolean
  transactionId: String
}

input InvoicePaymentUpdateWithWhereUniqueWithoutInvoiceIdInput {
  data: InvoicePaymentUpdateWithoutInvoiceIdDataInput!
  where: InvoicePaymentWhereUniqueInput!
}

input InvoicePaymentUpdateWithWhereUniqueWithoutPaidByUserIdInput {
  data: InvoicePaymentUpdateWithoutPaidByUserIdDataInput!
  where: InvoicePaymentWhereUniqueInput!
}

input InvoicePaymentUpsertWithWhereUniqueWithoutInvoiceIdInput {
  create: InvoicePaymentCreateWithoutInvoiceIdInput!
  update: InvoicePaymentUpdateWithoutInvoiceIdDataInput!
  where: InvoicePaymentWhereUniqueInput!
}

input InvoicePaymentUpsertWithWhereUniqueWithoutPaidByUserIdInput {
  create: InvoicePaymentCreateWithoutPaidByUserIdInput!
  update: InvoicePaymentUpdateWithoutPaidByUserIdDataInput!
  where: InvoicePaymentWhereUniqueInput!
}

input InvoicePaymentWhereInput {
  AND: [InvoicePaymentWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  invoiceId: InvoiceWhereInput
  NOT: [InvoicePaymentWhereInput!]
  OR: [InvoicePaymentWhereInput!]
  paidByUserId: UserWhereInput
  paidOnline: BooleanFilter
  transactionId: NullableStringFilter
}

input InvoicePaymentWhereUniqueInput {
  id: String
}

input InvoiceScalarWhereInput {
  AND: [InvoiceScalarWhereInput!]
  createdAt: DateTimeFilter
  dueDate: DateTimeFilter
  id: StringFilter
  invoiceLineItems: InvoiceLineItemFilter
  invoicePayments: InvoicePaymentFilter
  NOT: [InvoiceScalarWhereInput!]
  notes: StringFilter
  number: IntFilter
  OR: [InvoiceScalarWhereInput!]
  shareLinks: ShareLinkFilter
  status: InvoiceStatus
  taxRate: NullableFloatFilter
  updatedAt: DateTimeFilter
}

enum InvoiceStatus {
  APPROVED
  DECLINED
  PENDING
}

input InvoiceUpdateInput {
  clientId: ClientUpdateOneRequiredWithoutInvoicesInput
  createdAt: DateTime
  dueDate: DateTime
  id: String
  invoiceLineItems: InvoiceLineItemUpdateManyWithoutInvoiceIdInput
  invoiceOwnerId: UserUpdateOneRequiredWithoutInvoicesInput
  invoicePayments: InvoicePaymentUpdateManyWithoutInvoiceIdInput
  notes: String
  number: Int
  projectId: ProjectUpdateOneRequiredWithoutInvoicesInput
  proposalId: ProposalUpdateOneRequiredWithoutInvoicesInput
  shareLinks: ShareLinkUpdateManyWithoutInvoiceIdInput
  status: InvoiceStatus
  taxRate: Float
  updatedAt: DateTime
}

input InvoiceUpdateManyDataInput {
  createdAt: DateTime
  dueDate: DateTime
  id: String
  notes: String
  number: Int
  status: InvoiceStatus
  taxRate: Float
  updatedAt: DateTime
}

input InvoiceUpdateManyMutationInput {
  createdAt: DateTime
  dueDate: DateTime
  id: String
  notes: String
  number: Int
  status: InvoiceStatus
  taxRate: Float
  updatedAt: DateTime
}

input InvoiceUpdateManyWithoutClientIdInput {
  connect: [InvoiceWhereUniqueInput!]
  create: [InvoiceCreateWithoutClientIdInput!]
  delete: [InvoiceWhereUniqueInput!]
  deleteMany: [InvoiceScalarWhereInput!]
  disconnect: [InvoiceWhereUniqueInput!]
  set: [InvoiceWhereUniqueInput!]
  update: [InvoiceUpdateWithWhereUniqueWithoutClientIdInput!]
  updateMany: [InvoiceUpdateManyWithWhereNestedInput!]
  upsert: [InvoiceUpsertWithWhereUniqueWithoutClientIdInput!]
}

input InvoiceUpdateManyWithoutInvoiceOwnerIdInput {
  connect: [InvoiceWhereUniqueInput!]
  create: [InvoiceCreateWithoutInvoiceOwnerIdInput!]
  delete: [InvoiceWhereUniqueInput!]
  deleteMany: [InvoiceScalarWhereInput!]
  disconnect: [InvoiceWhereUniqueInput!]
  set: [InvoiceWhereUniqueInput!]
  update: [InvoiceUpdateWithWhereUniqueWithoutInvoiceOwnerIdInput!]
  updateMany: [InvoiceUpdateManyWithWhereNestedInput!]
  upsert: [InvoiceUpsertWithWhereUniqueWithoutInvoiceOwnerIdInput!]
}

input InvoiceUpdateManyWithoutProjectIdInput {
  connect: [InvoiceWhereUniqueInput!]
  create: [InvoiceCreateWithoutProjectIdInput!]
  delete: [InvoiceWhereUniqueInput!]
  deleteMany: [InvoiceScalarWhereInput!]
  disconnect: [InvoiceWhereUniqueInput!]
  set: [InvoiceWhereUniqueInput!]
  update: [InvoiceUpdateWithWhereUniqueWithoutProjectIdInput!]
  updateMany: [InvoiceUpdateManyWithWhereNestedInput!]
  upsert: [InvoiceUpsertWithWhereUniqueWithoutProjectIdInput!]
}

input InvoiceUpdateManyWithoutProposalIdInput {
  connect: [InvoiceWhereUniqueInput!]
  create: [InvoiceCreateWithoutProposalIdInput!]
  delete: [InvoiceWhereUniqueInput!]
  deleteMany: [InvoiceScalarWhereInput!]
  disconnect: [InvoiceWhereUniqueInput!]
  set: [InvoiceWhereUniqueInput!]
  update: [InvoiceUpdateWithWhereUniqueWithoutProposalIdInput!]
  updateMany: [InvoiceUpdateManyWithWhereNestedInput!]
  upsert: [InvoiceUpsertWithWhereUniqueWithoutProposalIdInput!]
}

input InvoiceUpdateManyWithWhereNestedInput {
  data: InvoiceUpdateManyDataInput!
  where: InvoiceScalarWhereInput!
}

input InvoiceUpdateOneRequiredWithoutInvoiceLineItemsInput {
  connect: InvoiceWhereUniqueInput
  create: InvoiceCreateWithoutInvoiceLineItemsInput
  update: InvoiceUpdateWithoutInvoiceLineItemsDataInput
  upsert: InvoiceUpsertWithoutInvoiceLineItemsInput
}

input InvoiceUpdateOneRequiredWithoutInvoicePaymentsInput {
  connect: InvoiceWhereUniqueInput
  create: InvoiceCreateWithoutInvoicePaymentsInput
  update: InvoiceUpdateWithoutInvoicePaymentsDataInput
  upsert: InvoiceUpsertWithoutInvoicePaymentsInput
}

input InvoiceUpdateOneRequiredWithoutShareLinksInput {
  connect: InvoiceWhereUniqueInput
  create: InvoiceCreateWithoutShareLinksInput
  update: InvoiceUpdateWithoutShareLinksDataInput
  upsert: InvoiceUpsertWithoutShareLinksInput
}

input InvoiceUpdateWithoutClientIdDataInput {
  createdAt: DateTime
  dueDate: DateTime
  id: String
  invoiceLineItems: InvoiceLineItemUpdateManyWithoutInvoiceIdInput
  invoiceOwnerId: UserUpdateOneRequiredWithoutInvoicesInput
  invoicePayments: InvoicePaymentUpdateManyWithoutInvoiceIdInput
  notes: String
  number: Int
  projectId: ProjectUpdateOneRequiredWithoutInvoicesInput
  proposalId: ProposalUpdateOneRequiredWithoutInvoicesInput
  shareLinks: ShareLinkUpdateManyWithoutInvoiceIdInput
  status: InvoiceStatus
  taxRate: Float
  updatedAt: DateTime
}

input InvoiceUpdateWithoutInvoiceLineItemsDataInput {
  clientId: ClientUpdateOneRequiredWithoutInvoicesInput
  createdAt: DateTime
  dueDate: DateTime
  id: String
  invoiceOwnerId: UserUpdateOneRequiredWithoutInvoicesInput
  invoicePayments: InvoicePaymentUpdateManyWithoutInvoiceIdInput
  notes: String
  number: Int
  projectId: ProjectUpdateOneRequiredWithoutInvoicesInput
  proposalId: ProposalUpdateOneRequiredWithoutInvoicesInput
  shareLinks: ShareLinkUpdateManyWithoutInvoiceIdInput
  status: InvoiceStatus
  taxRate: Float
  updatedAt: DateTime
}

input InvoiceUpdateWithoutInvoiceOwnerIdDataInput {
  clientId: ClientUpdateOneRequiredWithoutInvoicesInput
  createdAt: DateTime
  dueDate: DateTime
  id: String
  invoiceLineItems: InvoiceLineItemUpdateManyWithoutInvoiceIdInput
  invoicePayments: InvoicePaymentUpdateManyWithoutInvoiceIdInput
  notes: String
  number: Int
  projectId: ProjectUpdateOneRequiredWithoutInvoicesInput
  proposalId: ProposalUpdateOneRequiredWithoutInvoicesInput
  shareLinks: ShareLinkUpdateManyWithoutInvoiceIdInput
  status: InvoiceStatus
  taxRate: Float
  updatedAt: DateTime
}

input InvoiceUpdateWithoutInvoicePaymentsDataInput {
  clientId: ClientUpdateOneRequiredWithoutInvoicesInput
  createdAt: DateTime
  dueDate: DateTime
  id: String
  invoiceLineItems: InvoiceLineItemUpdateManyWithoutInvoiceIdInput
  invoiceOwnerId: UserUpdateOneRequiredWithoutInvoicesInput
  notes: String
  number: Int
  projectId: ProjectUpdateOneRequiredWithoutInvoicesInput
  proposalId: ProposalUpdateOneRequiredWithoutInvoicesInput
  shareLinks: ShareLinkUpdateManyWithoutInvoiceIdInput
  status: InvoiceStatus
  taxRate: Float
  updatedAt: DateTime
}

input InvoiceUpdateWithoutProjectIdDataInput {
  clientId: ClientUpdateOneRequiredWithoutInvoicesInput
  createdAt: DateTime
  dueDate: DateTime
  id: String
  invoiceLineItems: InvoiceLineItemUpdateManyWithoutInvoiceIdInput
  invoiceOwnerId: UserUpdateOneRequiredWithoutInvoicesInput
  invoicePayments: InvoicePaymentUpdateManyWithoutInvoiceIdInput
  notes: String
  number: Int
  proposalId: ProposalUpdateOneRequiredWithoutInvoicesInput
  shareLinks: ShareLinkUpdateManyWithoutInvoiceIdInput
  status: InvoiceStatus
  taxRate: Float
  updatedAt: DateTime
}

input InvoiceUpdateWithoutProposalIdDataInput {
  clientId: ClientUpdateOneRequiredWithoutInvoicesInput
  createdAt: DateTime
  dueDate: DateTime
  id: String
  invoiceLineItems: InvoiceLineItemUpdateManyWithoutInvoiceIdInput
  invoiceOwnerId: UserUpdateOneRequiredWithoutInvoicesInput
  invoicePayments: InvoicePaymentUpdateManyWithoutInvoiceIdInput
  notes: String
  number: Int
  projectId: ProjectUpdateOneRequiredWithoutInvoicesInput
  shareLinks: ShareLinkUpdateManyWithoutInvoiceIdInput
  status: InvoiceStatus
  taxRate: Float
  updatedAt: DateTime
}

input InvoiceUpdateWithoutShareLinksDataInput {
  clientId: ClientUpdateOneRequiredWithoutInvoicesInput
  createdAt: DateTime
  dueDate: DateTime
  id: String
  invoiceLineItems: InvoiceLineItemUpdateManyWithoutInvoiceIdInput
  invoiceOwnerId: UserUpdateOneRequiredWithoutInvoicesInput
  invoicePayments: InvoicePaymentUpdateManyWithoutInvoiceIdInput
  notes: String
  number: Int
  projectId: ProjectUpdateOneRequiredWithoutInvoicesInput
  proposalId: ProposalUpdateOneRequiredWithoutInvoicesInput
  status: InvoiceStatus
  taxRate: Float
  updatedAt: DateTime
}

input InvoiceUpdateWithWhereUniqueWithoutClientIdInput {
  data: InvoiceUpdateWithoutClientIdDataInput!
  where: InvoiceWhereUniqueInput!
}

input InvoiceUpdateWithWhereUniqueWithoutInvoiceOwnerIdInput {
  data: InvoiceUpdateWithoutInvoiceOwnerIdDataInput!
  where: InvoiceWhereUniqueInput!
}

input InvoiceUpdateWithWhereUniqueWithoutProjectIdInput {
  data: InvoiceUpdateWithoutProjectIdDataInput!
  where: InvoiceWhereUniqueInput!
}

input InvoiceUpdateWithWhereUniqueWithoutProposalIdInput {
  data: InvoiceUpdateWithoutProposalIdDataInput!
  where: InvoiceWhereUniqueInput!
}

input InvoiceUpsertWithoutInvoiceLineItemsInput {
  create: InvoiceCreateWithoutInvoiceLineItemsInput!
  update: InvoiceUpdateWithoutInvoiceLineItemsDataInput!
}

input InvoiceUpsertWithoutInvoicePaymentsInput {
  create: InvoiceCreateWithoutInvoicePaymentsInput!
  update: InvoiceUpdateWithoutInvoicePaymentsDataInput!
}

input InvoiceUpsertWithoutShareLinksInput {
  create: InvoiceCreateWithoutShareLinksInput!
  update: InvoiceUpdateWithoutShareLinksDataInput!
}

input InvoiceUpsertWithWhereUniqueWithoutClientIdInput {
  create: InvoiceCreateWithoutClientIdInput!
  update: InvoiceUpdateWithoutClientIdDataInput!
  where: InvoiceWhereUniqueInput!
}

input InvoiceUpsertWithWhereUniqueWithoutInvoiceOwnerIdInput {
  create: InvoiceCreateWithoutInvoiceOwnerIdInput!
  update: InvoiceUpdateWithoutInvoiceOwnerIdDataInput!
  where: InvoiceWhereUniqueInput!
}

input InvoiceUpsertWithWhereUniqueWithoutProjectIdInput {
  create: InvoiceCreateWithoutProjectIdInput!
  update: InvoiceUpdateWithoutProjectIdDataInput!
  where: InvoiceWhereUniqueInput!
}

input InvoiceUpsertWithWhereUniqueWithoutProposalIdInput {
  create: InvoiceCreateWithoutProposalIdInput!
  update: InvoiceUpdateWithoutProposalIdDataInput!
  where: InvoiceWhereUniqueInput!
}

input InvoiceWhereInput {
  AND: [InvoiceWhereInput!]
  clientId: ClientWhereInput
  createdAt: DateTimeFilter
  dueDate: DateTimeFilter
  id: StringFilter
  invoiceLineItems: InvoiceLineItemFilter
  invoiceOwnerId: UserWhereInput
  invoicePayments: InvoicePaymentFilter
  NOT: [InvoiceWhereInput!]
  notes: StringFilter
  number: IntFilter
  OR: [InvoiceWhereInput!]
  projectId: ProjectWhereInput
  proposalId: ProposalWhereInput
  shareLinks: ShareLinkFilter
  status: InvoiceStatus
  taxRate: NullableFloatFilter
  updatedAt: DateTimeFilter
}

input InvoiceWhereUniqueInput {
  id: String
}

type Mutation {
  createOneAddress(data: AddressCreateInput!): Address!
  createOneBillingProfile(data: BillingProfileCreateInput!): BillingProfile!
  createOneChangeOrder(data: ChangeOrderCreateInput!): ChangeOrder!
  createOneCity(data: CityCreateInput!): City!
  createOneClient(data: ClientCreateInput!): Client!
  createOneClientNote(data: ClientNoteCreateInput!): ClientNote!
  createOneCompany(companyType: String, logo: String, logoName: String, logoThumb: String, name: String!, status: String!, userId: String!): Company!
  createOneContact(data: ContactCreateInput!): Contact!
  createOneCountry(data: CountryCreateInput!): Country!
  createOneDiscount(data: DiscountCreateInput!): Discount!
  createOneFeedComment(data: FeedCommentCreateInput!): FeedComment!
  createOneFeedEntry(data: FeedEntryCreateInput!): FeedEntry!
  createOneFeedMedia(data: FeedMediaCreateInput!): FeedMedia!
  createOneFeedReaction(data: FeedReactionCreateInput!): FeedReaction!
  createOneInvitation(data: InvitationCreateInput!): Invitation!
  createOneInvoice(data: InvoiceCreateInput!): Invoice!
  createOneInvoiceLineItem(data: InvoiceLineItemCreateInput!): InvoiceLineItem!
  createOneInvoicePayment(data: InvoicePaymentCreateInput!): InvoicePayment!
  createOnePaymentMethod(data: PaymentMethodCreateInput!): PaymentMethod!
  createOneProject(amount: Float!, companyId: String!, endDate: String!, name: String!, notes: String!, projectBudgetStatus: String!, projectTimelineStatus: String!, startDate: String!): Project!
  createOneProjectBudget(data: ProjectBudgetCreateInput!): ProjectBudget!
  createOneProjectTimeline(data: ProjectTimelineCreateInput!): ProjectTimeline!
  createOneProposal(data: ProposalCreateInput!): Proposal!
  createOneReferral(data: ReferralCreateInput!): Referral!
  createOneShareLink(data: ShareLinkCreateInput!): ShareLink!
  createOneState(data: StateCreateInput!): State!
  createOneSubscription(data: SubscriptionCreateInput!): Subscription!
  createOneSubscriptionDiscount(data: SubscriptionDiscountCreateInput!): SubscriptionDiscount!
  createOneSubscriptionPayment(data: SubscriptionPaymentCreateInput!): SubscriptionPayment!
  createOneSupplier(data: SupplierCreateInput!): Supplier!
  createOneSupplierNote(data: SupplierNoteCreateInput!): SupplierNote!
  createOneUser(data: UserCreateInput!): User!
  createOneUserNotification(data: UserNotificationCreateInput!): UserNotification!
  createOneUserRole(data: UserRoleCreateInput!): UserRole!
  deleteManyAddress(where: AddressWhereInput): BatchPayload!
  deleteManyBillingProfile(where: BillingProfileWhereInput): BatchPayload!
  deleteManyChangeOrder(where: ChangeOrderWhereInput): BatchPayload!
  deleteManyCity(where: CityWhereInput): BatchPayload!
  deleteManyClient(where: ClientWhereInput): BatchPayload!
  deleteManyClientNote(where: ClientNoteWhereInput): BatchPayload!
  deleteManyCompany(where: CompanyWhereInput): BatchPayload!
  deleteManyContact(where: ContactWhereInput): BatchPayload!
  deleteManyCountry(where: CountryWhereInput): BatchPayload!
  deleteManyDiscount(where: DiscountWhereInput): BatchPayload!
  deleteManyFeedComment(where: FeedCommentWhereInput): BatchPayload!
  deleteManyFeedEntry(where: FeedEntryWhereInput): BatchPayload!
  deleteManyFeedMedia(where: FeedMediaWhereInput): BatchPayload!
  deleteManyFeedReaction(where: FeedReactionWhereInput): BatchPayload!
  deleteManyInvitation(where: InvitationWhereInput): BatchPayload!
  deleteManyInvoice(where: InvoiceWhereInput): BatchPayload!
  deleteManyInvoiceLineItem(where: InvoiceLineItemWhereInput): BatchPayload!
  deleteManyInvoicePayment(where: InvoicePaymentWhereInput): BatchPayload!
  deleteManyPaymentMethod(where: PaymentMethodWhereInput): BatchPayload!
  deleteManyProject(where: ProjectWhereInput): BatchPayload!
  deleteManyProjectBudget(where: ProjectBudgetWhereInput): BatchPayload!
  deleteManyProjectTimeline(where: ProjectTimelineWhereInput): BatchPayload!
  deleteManyProposal(where: ProposalWhereInput): BatchPayload!
  deleteManyReferral(where: ReferralWhereInput): BatchPayload!
  deleteManyShareLink(where: ShareLinkWhereInput): BatchPayload!
  deleteManyState(where: StateWhereInput): BatchPayload!
  deleteManySubscription(where: SubscriptionWhereInput): BatchPayload!
  deleteManySubscriptionDiscount(where: SubscriptionDiscountWhereInput): BatchPayload!
  deleteManySubscriptionPayment(where: SubscriptionPaymentWhereInput): BatchPayload!
  deleteManySupplier(where: SupplierWhereInput): BatchPayload!
  deleteManySupplierNote(where: SupplierNoteWhereInput): BatchPayload!
  deleteManyUser(where: UserWhereInput): BatchPayload!
  deleteManyUserNotification(where: UserNotificationWhereInput): BatchPayload!
  deleteManyUserRole(where: UserRoleWhereInput): BatchPayload!
  deleteOneAddress(where: AddressWhereUniqueInput!): Address
  deleteOneBillingProfile(where: BillingProfileWhereUniqueInput!): BillingProfile
  deleteOneChangeOrder(where: ChangeOrderWhereUniqueInput!): ChangeOrder
  deleteOneCity(where: CityWhereUniqueInput!): City
  deleteOneClient(where: ClientWhereUniqueInput!): Client
  deleteOneClientNote(where: ClientNoteWhereUniqueInput!): ClientNote
  deleteOneCompany(where: CompanyWhereUniqueInput!): Company
  deleteOneContact(where: ContactWhereUniqueInput!): Contact
  deleteOneCountry(where: CountryWhereUniqueInput!): Country
  deleteOneDiscount(where: DiscountWhereUniqueInput!): Discount
  deleteOneFeedComment(where: FeedCommentWhereUniqueInput!): FeedComment
  deleteOneFeedEntry(where: FeedEntryWhereUniqueInput!): FeedEntry
  deleteOneFeedMedia(where: FeedMediaWhereUniqueInput!): FeedMedia
  deleteOneFeedReaction(where: FeedReactionWhereUniqueInput!): FeedReaction
  deleteOneInvitation(where: InvitationWhereUniqueInput!): Invitation
  deleteOneInvoice(where: InvoiceWhereUniqueInput!): Invoice
  deleteOneInvoiceLineItem(where: InvoiceLineItemWhereUniqueInput!): InvoiceLineItem
  deleteOneInvoicePayment(where: InvoicePaymentWhereUniqueInput!): InvoicePayment
  deleteOnePaymentMethod(where: PaymentMethodWhereUniqueInput!): PaymentMethod
  deleteOneProject(where: ProjectWhereUniqueInput!): Project
  deleteOneProjectBudget(where: ProjectBudgetWhereUniqueInput!): ProjectBudget
  deleteOneProjectTimeline(where: ProjectTimelineWhereUniqueInput!): ProjectTimeline
  deleteOneProposal(where: ProposalWhereUniqueInput!): Proposal
  deleteOneReferral(where: ReferralWhereUniqueInput!): Referral
  deleteOneShareLink(where: ShareLinkWhereUniqueInput!): ShareLink
  deleteOneState(where: StateWhereUniqueInput!): State
  deleteOneSubscription(where: SubscriptionWhereUniqueInput!): Subscription
  deleteOneSubscriptionDiscount(where: SubscriptionDiscountWhereUniqueInput!): SubscriptionDiscount
  deleteOneSubscriptionPayment(where: SubscriptionPaymentWhereUniqueInput!): SubscriptionPayment
  deleteOneSupplier(where: SupplierWhereUniqueInput!): Supplier
  deleteOneSupplierNote(where: SupplierNoteWhereUniqueInput!): SupplierNote
  deleteOneUser(where: UserWhereUniqueInput!): User
  deleteOneUserNotification(where: UserNotificationWhereUniqueInput!): UserNotification
  deleteOneUserRole(where: UserRoleWhereUniqueInput!): UserRole
  updateManyAddress(data: AddressUpdateManyMutationInput!, where: AddressWhereInput): BatchPayload!
  updateManyBillingProfile(data: BillingProfileUpdateManyMutationInput!, where: BillingProfileWhereInput): BatchPayload!
  updateManyChangeOrder(data: ChangeOrderUpdateManyMutationInput!, where: ChangeOrderWhereInput): BatchPayload!
  updateManyCity(data: CityUpdateManyMutationInput!, where: CityWhereInput): BatchPayload!
  updateManyClient(data: ClientUpdateManyMutationInput!, where: ClientWhereInput): BatchPayload!
  updateManyClientNote(data: ClientNoteUpdateManyMutationInput!, where: ClientNoteWhereInput): BatchPayload!
  updateManyCompany(data: CompanyUpdateManyMutationInput!, where: CompanyWhereInput): BatchPayload!
  updateManyContact(data: ContactUpdateManyMutationInput!, where: ContactWhereInput): BatchPayload!
  updateManyCountry(data: CountryUpdateManyMutationInput!, where: CountryWhereInput): BatchPayload!
  updateManyDiscount(data: DiscountUpdateManyMutationInput!, where: DiscountWhereInput): BatchPayload!
  updateManyFeedComment(data: FeedCommentUpdateManyMutationInput!, where: FeedCommentWhereInput): BatchPayload!
  updateManyFeedEntry(data: FeedEntryUpdateManyMutationInput!, where: FeedEntryWhereInput): BatchPayload!
  updateManyFeedMedia(data: FeedMediaUpdateManyMutationInput!, where: FeedMediaWhereInput): BatchPayload!
  updateManyFeedReaction(data: FeedReactionUpdateManyMutationInput!, where: FeedReactionWhereInput): BatchPayload!
  updateManyInvitation(data: InvitationUpdateManyMutationInput!, where: InvitationWhereInput): BatchPayload!
  updateManyInvoice(data: InvoiceUpdateManyMutationInput!, where: InvoiceWhereInput): BatchPayload!
  updateManyInvoiceLineItem(data: InvoiceLineItemUpdateManyMutationInput!, where: InvoiceLineItemWhereInput): BatchPayload!
  updateManyInvoicePayment(data: InvoicePaymentUpdateManyMutationInput!, where: InvoicePaymentWhereInput): BatchPayload!
  updateManyPaymentMethod(data: PaymentMethodUpdateManyMutationInput!, where: PaymentMethodWhereInput): BatchPayload!
  updateManyProject(data: ProjectUpdateManyMutationInput!, where: ProjectWhereInput): BatchPayload!
  updateManyProjectBudget(data: ProjectBudgetUpdateManyMutationInput!, where: ProjectBudgetWhereInput): BatchPayload!
  updateManyProjectTimeline(data: ProjectTimelineUpdateManyMutationInput!, where: ProjectTimelineWhereInput): BatchPayload!
  updateManyProposal(data: ProposalUpdateManyMutationInput!, where: ProposalWhereInput): BatchPayload!
  updateManyReferral(data: ReferralUpdateManyMutationInput!, where: ReferralWhereInput): BatchPayload!
  updateManyShareLink(data: ShareLinkUpdateManyMutationInput!, where: ShareLinkWhereInput): BatchPayload!
  updateManyState(data: StateUpdateManyMutationInput!, where: StateWhereInput): BatchPayload!
  updateManySubscription(data: SubscriptionUpdateManyMutationInput!, where: SubscriptionWhereInput): BatchPayload!
  updateManySubscriptionDiscount(data: SubscriptionDiscountUpdateManyMutationInput!, where: SubscriptionDiscountWhereInput): BatchPayload!
  updateManySubscriptionPayment(data: SubscriptionPaymentUpdateManyMutationInput!, where: SubscriptionPaymentWhereInput): BatchPayload!
  updateManySupplier(data: SupplierUpdateManyMutationInput!, where: SupplierWhereInput): BatchPayload!
  updateManySupplierNote(data: SupplierNoteUpdateManyMutationInput!, where: SupplierNoteWhereInput): BatchPayload!
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyUserNotification(data: UserNotificationUpdateManyMutationInput!, where: UserNotificationWhereInput): BatchPayload!
  updateManyUserRole(data: UserRoleUpdateManyMutationInput!, where: UserRoleWhereInput): BatchPayload!
  updateOneAddress(data: AddressUpdateInput!, where: AddressWhereUniqueInput!): Address
  updateOneBillingProfile(data: BillingProfileUpdateInput!, where: BillingProfileWhereUniqueInput!): BillingProfile
  updateOneChangeOrder(data: ChangeOrderUpdateInput!, where: ChangeOrderWhereUniqueInput!): ChangeOrder
  updateOneCity(data: CityUpdateInput!, where: CityWhereUniqueInput!): City
  updateOneClient(data: ClientUpdateInput!, where: ClientWhereUniqueInput!): Client
  updateOneClientNote(data: ClientNoteUpdateInput!, where: ClientNoteWhereUniqueInput!): ClientNote
  updateOneCompany(data: CompanyUpdateInput!, where: CompanyWhereUniqueInput!): Company
  updateOneContact(data: ContactUpdateInput!, where: ContactWhereUniqueInput!): Contact
  updateOneCountry(data: CountryUpdateInput!, where: CountryWhereUniqueInput!): Country
  updateOneDiscount(data: DiscountUpdateInput!, where: DiscountWhereUniqueInput!): Discount
  updateOneFeedComment(data: FeedCommentUpdateInput!, where: FeedCommentWhereUniqueInput!): FeedComment
  updateOneFeedEntry(data: FeedEntryUpdateInput!, where: FeedEntryWhereUniqueInput!): FeedEntry
  updateOneFeedMedia(data: FeedMediaUpdateInput!, where: FeedMediaWhereUniqueInput!): FeedMedia
  updateOneFeedReaction(data: FeedReactionUpdateInput!, where: FeedReactionWhereUniqueInput!): FeedReaction
  updateOneInvitation(data: InvitationUpdateInput!, where: InvitationWhereUniqueInput!): Invitation
  updateOneInvoice(data: InvoiceUpdateInput!, where: InvoiceWhereUniqueInput!): Invoice
  updateOneInvoiceLineItem(data: InvoiceLineItemUpdateInput!, where: InvoiceLineItemWhereUniqueInput!): InvoiceLineItem
  updateOneInvoicePayment(data: InvoicePaymentUpdateInput!, where: InvoicePaymentWhereUniqueInput!): InvoicePayment
  updateOnePaymentMethod(data: PaymentMethodUpdateInput!, where: PaymentMethodWhereUniqueInput!): PaymentMethod
  updateOneProject(data: ProjectUpdateInput!, where: ProjectWhereUniqueInput!): Project
  updateOneProjectBudget(data: ProjectBudgetUpdateInput!, where: ProjectBudgetWhereUniqueInput!): ProjectBudget
  updateOneProjectTimeline(data: ProjectTimelineUpdateInput!, where: ProjectTimelineWhereUniqueInput!): ProjectTimeline
  updateOneProposal(data: ProposalUpdateInput!, where: ProposalWhereUniqueInput!): Proposal
  updateOneReferral(data: ReferralUpdateInput!, where: ReferralWhereUniqueInput!): Referral
  updateOneShareLink(data: ShareLinkUpdateInput!, where: ShareLinkWhereUniqueInput!): ShareLink
  updateOneState(data: StateUpdateInput!, where: StateWhereUniqueInput!): State
  updateOneSubscription(data: SubscriptionUpdateInput!, where: SubscriptionWhereUniqueInput!): Subscription
  updateOneSubscriptionDiscount(data: SubscriptionDiscountUpdateInput!, where: SubscriptionDiscountWhereUniqueInput!): SubscriptionDiscount
  updateOneSubscriptionPayment(data: SubscriptionPaymentUpdateInput!, where: SubscriptionPaymentWhereUniqueInput!): SubscriptionPayment
  updateOneSupplier(data: SupplierUpdateInput!, where: SupplierWhereUniqueInput!): Supplier
  updateOneSupplierNote(data: SupplierNoteUpdateInput!, where: SupplierNoteWhereUniqueInput!): SupplierNote
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateOneUserNotification(data: UserNotificationUpdateInput!, where: UserNotificationWhereUniqueInput!): UserNotification
  updateOneUserRole(data: UserRoleUpdateInput!, where: UserRoleWhereUniqueInput!): UserRole
  upsertOneAddress(create: AddressCreateInput!, update: AddressUpdateInput!, where: AddressWhereUniqueInput!): Address!
  upsertOneBillingProfile(create: BillingProfileCreateInput!, update: BillingProfileUpdateInput!, where: BillingProfileWhereUniqueInput!): BillingProfile!
  upsertOneChangeOrder(create: ChangeOrderCreateInput!, update: ChangeOrderUpdateInput!, where: ChangeOrderWhereUniqueInput!): ChangeOrder!
  upsertOneCity(create: CityCreateInput!, update: CityUpdateInput!, where: CityWhereUniqueInput!): City!
  upsertOneClient(create: ClientCreateInput!, update: ClientUpdateInput!, where: ClientWhereUniqueInput!): Client!
  upsertOneClientNote(create: ClientNoteCreateInput!, update: ClientNoteUpdateInput!, where: ClientNoteWhereUniqueInput!): ClientNote!
  upsertOneCompany(create: CompanyCreateInput!, update: CompanyUpdateInput!, where: CompanyWhereUniqueInput!): Company!
  upsertOneContact(create: ContactCreateInput!, update: ContactUpdateInput!, where: ContactWhereUniqueInput!): Contact!
  upsertOneCountry(create: CountryCreateInput!, update: CountryUpdateInput!, where: CountryWhereUniqueInput!): Country!
  upsertOneDiscount(create: DiscountCreateInput!, update: DiscountUpdateInput!, where: DiscountWhereUniqueInput!): Discount!
  upsertOneFeedComment(create: FeedCommentCreateInput!, update: FeedCommentUpdateInput!, where: FeedCommentWhereUniqueInput!): FeedComment!
  upsertOneFeedEntry(create: FeedEntryCreateInput!, update: FeedEntryUpdateInput!, where: FeedEntryWhereUniqueInput!): FeedEntry!
  upsertOneFeedMedia(create: FeedMediaCreateInput!, update: FeedMediaUpdateInput!, where: FeedMediaWhereUniqueInput!): FeedMedia!
  upsertOneFeedReaction(create: FeedReactionCreateInput!, update: FeedReactionUpdateInput!, where: FeedReactionWhereUniqueInput!): FeedReaction!
  upsertOneInvitation(create: InvitationCreateInput!, update: InvitationUpdateInput!, where: InvitationWhereUniqueInput!): Invitation!
  upsertOneInvoice(create: InvoiceCreateInput!, update: InvoiceUpdateInput!, where: InvoiceWhereUniqueInput!): Invoice!
  upsertOneInvoiceLineItem(create: InvoiceLineItemCreateInput!, update: InvoiceLineItemUpdateInput!, where: InvoiceLineItemWhereUniqueInput!): InvoiceLineItem!
  upsertOneInvoicePayment(create: InvoicePaymentCreateInput!, update: InvoicePaymentUpdateInput!, where: InvoicePaymentWhereUniqueInput!): InvoicePayment!
  upsertOnePaymentMethod(create: PaymentMethodCreateInput!, update: PaymentMethodUpdateInput!, where: PaymentMethodWhereUniqueInput!): PaymentMethod!
  upsertOneProject(create: ProjectCreateInput!, update: ProjectUpdateInput!, where: ProjectWhereUniqueInput!): Project!
  upsertOneProjectBudget(create: ProjectBudgetCreateInput!, update: ProjectBudgetUpdateInput!, where: ProjectBudgetWhereUniqueInput!): ProjectBudget!
  upsertOneProjectTimeline(create: ProjectTimelineCreateInput!, update: ProjectTimelineUpdateInput!, where: ProjectTimelineWhereUniqueInput!): ProjectTimeline!
  upsertOneProposal(create: ProposalCreateInput!, update: ProposalUpdateInput!, where: ProposalWhereUniqueInput!): Proposal!
  upsertOneReferral(create: ReferralCreateInput!, update: ReferralUpdateInput!, where: ReferralWhereUniqueInput!): Referral!
  upsertOneShareLink(create: ShareLinkCreateInput!, update: ShareLinkUpdateInput!, where: ShareLinkWhereUniqueInput!): ShareLink!
  upsertOneState(create: StateCreateInput!, update: StateUpdateInput!, where: StateWhereUniqueInput!): State!
  upsertOneSubscription(create: SubscriptionCreateInput!, update: SubscriptionUpdateInput!, where: SubscriptionWhereUniqueInput!): Subscription!
  upsertOneSubscriptionDiscount(create: SubscriptionDiscountCreateInput!, update: SubscriptionDiscountUpdateInput!, where: SubscriptionDiscountWhereUniqueInput!): SubscriptionDiscount!
  upsertOneSubscriptionPayment(create: SubscriptionPaymentCreateInput!, update: SubscriptionPaymentUpdateInput!, where: SubscriptionPaymentWhereUniqueInput!): SubscriptionPayment!
  upsertOneSupplier(create: SupplierCreateInput!, update: SupplierUpdateInput!, where: SupplierWhereUniqueInput!): Supplier!
  upsertOneSupplierNote(create: SupplierNoteCreateInput!, update: SupplierNoteUpdateInput!, where: SupplierNoteWhereUniqueInput!): SupplierNote!
  upsertOneUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
  upsertOneUserNotification(create: UserNotificationCreateInput!, update: UserNotificationUpdateInput!, where: UserNotificationWhereUniqueInput!): UserNotification!
  upsertOneUserRole(create: UserRoleCreateInput!, update: UserRoleUpdateInput!, where: UserRoleWhereUniqueInput!): UserRole!
}

input NullableBooleanFilter {
  equals: Boolean
  not: Boolean
}

input NullableDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

input NullableFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: Float
  notIn: [Float!]
}

input NullableStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

enum OrderByArg {
  asc
  desc
}

type PaymentMethod {
  createdAt: DateTime!
  externalId: String!
  id: String!
  lastFour: Int!
  vendor: String!
}

input PaymentMethodCreateInput {
  billingProfiles: BillingProfileCreateManyWithoutPaymentMethodIdInput
  createdAt: DateTime
  externalId: String!
  id: String
  lastFour: Int!
  vendor: String!
}

input PaymentMethodCreateOneWithoutBillingProfilesInput {
  connect: PaymentMethodWhereUniqueInput
  create: PaymentMethodCreateWithoutBillingProfilesInput
}

input PaymentMethodCreateWithoutBillingProfilesInput {
  createdAt: DateTime
  externalId: String!
  id: String
  lastFour: Int!
  vendor: String!
}

input PaymentMethodUpdateInput {
  billingProfiles: BillingProfileUpdateManyWithoutPaymentMethodIdInput
  createdAt: DateTime
  externalId: String
  id: String
  lastFour: Int
  vendor: String
}

input PaymentMethodUpdateManyMutationInput {
  createdAt: DateTime
  externalId: String
  id: String
  lastFour: Int
  vendor: String
}

input PaymentMethodUpdateOneRequiredWithoutBillingProfilesInput {
  connect: PaymentMethodWhereUniqueInput
  create: PaymentMethodCreateWithoutBillingProfilesInput
  update: PaymentMethodUpdateWithoutBillingProfilesDataInput
  upsert: PaymentMethodUpsertWithoutBillingProfilesInput
}

input PaymentMethodUpdateWithoutBillingProfilesDataInput {
  createdAt: DateTime
  externalId: String
  id: String
  lastFour: Int
  vendor: String
}

input PaymentMethodUpsertWithoutBillingProfilesInput {
  create: PaymentMethodCreateWithoutBillingProfilesInput!
  update: PaymentMethodUpdateWithoutBillingProfilesDataInput!
}

input PaymentMethodWhereInput {
  AND: [PaymentMethodWhereInput!]
  billingProfiles: BillingProfileFilter
  createdAt: DateTimeFilter
  externalId: StringFilter
  id: StringFilter
  lastFour: IntFilter
  NOT: [PaymentMethodWhereInput!]
  OR: [PaymentMethodWhereInput!]
  vendor: StringFilter
}

input PaymentMethodWhereUniqueInput {
  id: String
}

type Project {
  addressId: Address
  clients(after: ClientWhereUniqueInput, before: ClientWhereUniqueInput, first: Int, last: Int, skip: Int): [Client!]!
  companyId: Company!
  createdAt: DateTime!
  id: String!
  name: String!
  notes: String!
  projectBudgets(after: ProjectBudgetWhereUniqueInput, before: ProjectBudgetWhereUniqueInput, first: Int, last: Int, skip: Int): [ProjectBudget!]!
  projectTimelines(after: ProjectTimelineWhereUniqueInput, before: ProjectTimelineWhereUniqueInput, first: Int, last: Int, skip: Int): [ProjectTimeline!]!
  suppliers(after: SupplierWhereUniqueInput, before: SupplierWhereUniqueInput, first: Int, last: Int, skip: Int): [Supplier!]!
  updatedAt: DateTime!
}

type ProjectBudget {
  amount: Float!
  createdAt: DateTime!
  id: String!
  status: ProjectBudgetStatus!
  updatedAt: DateTime!
}

input ProjectBudgetCreateInput {
  amount: Float!
  createdAt: DateTime
  id: String
  project: ProjectCreateOneWithoutProjectBudgetsInput
  status: ProjectBudgetStatus!
  updatedAt: DateTime
}

input ProjectBudgetCreateManyWithoutProjectInput {
  connect: [ProjectBudgetWhereUniqueInput!]
  create: [ProjectBudgetCreateWithoutProjectInput!]
}

input ProjectBudgetCreateWithoutProjectInput {
  amount: Float!
  createdAt: DateTime
  id: String
  status: ProjectBudgetStatus!
  updatedAt: DateTime
}

input ProjectBudgetFilter {
  every: ProjectBudgetWhereInput
  none: ProjectBudgetWhereInput
  some: ProjectBudgetWhereInput
}

input ProjectBudgetScalarWhereInput {
  amount: FloatFilter
  AND: [ProjectBudgetScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [ProjectBudgetScalarWhereInput!]
  OR: [ProjectBudgetScalarWhereInput!]
  status: ProjectBudgetStatus
  updatedAt: DateTimeFilter
}

enum ProjectBudgetStatus {
  APPROVED
  DECLINED
  PENDING
}

input ProjectBudgetUpdateInput {
  amount: Float
  createdAt: DateTime
  id: String
  project: ProjectUpdateOneWithoutProjectBudgetsInput
  status: ProjectBudgetStatus
  updatedAt: DateTime
}

input ProjectBudgetUpdateManyDataInput {
  amount: Float
  createdAt: DateTime
  id: String
  status: ProjectBudgetStatus
  updatedAt: DateTime
}

input ProjectBudgetUpdateManyMutationInput {
  amount: Float
  createdAt: DateTime
  id: String
  status: ProjectBudgetStatus
  updatedAt: DateTime
}

input ProjectBudgetUpdateManyWithoutProjectInput {
  connect: [ProjectBudgetWhereUniqueInput!]
  create: [ProjectBudgetCreateWithoutProjectInput!]
  delete: [ProjectBudgetWhereUniqueInput!]
  deleteMany: [ProjectBudgetScalarWhereInput!]
  disconnect: [ProjectBudgetWhereUniqueInput!]
  set: [ProjectBudgetWhereUniqueInput!]
  update: [ProjectBudgetUpdateWithWhereUniqueWithoutProjectInput!]
  updateMany: [ProjectBudgetUpdateManyWithWhereNestedInput!]
  upsert: [ProjectBudgetUpsertWithWhereUniqueWithoutProjectInput!]
}

input ProjectBudgetUpdateManyWithWhereNestedInput {
  data: ProjectBudgetUpdateManyDataInput!
  where: ProjectBudgetScalarWhereInput!
}

input ProjectBudgetUpdateWithoutProjectDataInput {
  amount: Float
  createdAt: DateTime
  id: String
  status: ProjectBudgetStatus
  updatedAt: DateTime
}

input ProjectBudgetUpdateWithWhereUniqueWithoutProjectInput {
  data: ProjectBudgetUpdateWithoutProjectDataInput!
  where: ProjectBudgetWhereUniqueInput!
}

input ProjectBudgetUpsertWithWhereUniqueWithoutProjectInput {
  create: ProjectBudgetCreateWithoutProjectInput!
  update: ProjectBudgetUpdateWithoutProjectDataInput!
  where: ProjectBudgetWhereUniqueInput!
}

input ProjectBudgetWhereInput {
  amount: FloatFilter
  AND: [ProjectBudgetWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [ProjectBudgetWhereInput!]
  OR: [ProjectBudgetWhereInput!]
  project: ProjectWhereInput
  status: ProjectBudgetStatus
  updatedAt: DateTimeFilter
}

input ProjectBudgetWhereUniqueInput {
  id: String
}

input ProjectCreateInput {
  addressId: AddressCreateOneWithoutProjectsInput
  changeOrders: ChangeOrderCreateManyWithoutProjectIdInput
  clients: ClientCreateManyWithoutProjectsInput
  companyId: CompanyCreateOneWithoutProjectsInput!
  createdAt: DateTime
  feedEntries: FeedEntryCreateManyWithoutProjectIdInput
  id: String
  invoices: InvoiceCreateManyWithoutProjectIdInput
  name: String!
  notes: String!
  projectBudgets: ProjectBudgetCreateManyWithoutProjectInput
  projectTimelines: ProjectTimelineCreateManyWithoutProjectInput
  proposals: ProposalCreateManyWithoutProjectIdInput
  shareLinks: ShareLinkCreateManyWithoutProjectIdInput
  suppliers: SupplierCreateManyWithoutProjectsInput
  updatedAt: DateTime
  userRoles: UserRoleCreateManyWithoutProjectIdInput
}

input ProjectCreateManyWithoutAddressIdInput {
  connect: [ProjectWhereUniqueInput!]
  create: [ProjectCreateWithoutAddressIdInput!]
}

input ProjectCreateManyWithoutClientsInput {
  connect: [ProjectWhereUniqueInput!]
  create: [ProjectCreateWithoutClientsInput!]
}

input ProjectCreateManyWithoutCompanyIdInput {
  connect: [ProjectWhereUniqueInput!]
  create: [ProjectCreateWithoutCompanyIdInput!]
}

input ProjectCreateManyWithoutSuppliersInput {
  connect: [ProjectWhereUniqueInput!]
  create: [ProjectCreateWithoutSuppliersInput!]
}

input ProjectCreateOneWithoutChangeOrdersInput {
  connect: ProjectWhereUniqueInput
  create: ProjectCreateWithoutChangeOrdersInput
}

input ProjectCreateOneWithoutFeedEntriesInput {
  connect: ProjectWhereUniqueInput
  create: ProjectCreateWithoutFeedEntriesInput
}

input ProjectCreateOneWithoutInvoicesInput {
  connect: ProjectWhereUniqueInput
  create: ProjectCreateWithoutInvoicesInput
}

input ProjectCreateOneWithoutProjectBudgetsInput {
  connect: ProjectWhereUniqueInput
  create: ProjectCreateWithoutProjectBudgetsInput
}

input ProjectCreateOneWithoutProjectTimelinesInput {
  connect: ProjectWhereUniqueInput
  create: ProjectCreateWithoutProjectTimelinesInput
}

input ProjectCreateOneWithoutProposalsInput {
  connect: ProjectWhereUniqueInput
  create: ProjectCreateWithoutProposalsInput
}

input ProjectCreateOneWithoutShareLinksInput {
  connect: ProjectWhereUniqueInput
  create: ProjectCreateWithoutShareLinksInput
}

input ProjectCreateOneWithoutUserRolesInput {
  connect: ProjectWhereUniqueInput
  create: ProjectCreateWithoutUserRolesInput
}

input ProjectCreateWithoutAddressIdInput {
  changeOrders: ChangeOrderCreateManyWithoutProjectIdInput
  clients: ClientCreateManyWithoutProjectsInput
  companyId: CompanyCreateOneWithoutProjectsInput!
  createdAt: DateTime
  feedEntries: FeedEntryCreateManyWithoutProjectIdInput
  id: String
  invoices: InvoiceCreateManyWithoutProjectIdInput
  name: String!
  notes: String!
  projectBudgets: ProjectBudgetCreateManyWithoutProjectInput
  projectTimelines: ProjectTimelineCreateManyWithoutProjectInput
  proposals: ProposalCreateManyWithoutProjectIdInput
  shareLinks: ShareLinkCreateManyWithoutProjectIdInput
  suppliers: SupplierCreateManyWithoutProjectsInput
  updatedAt: DateTime
  userRoles: UserRoleCreateManyWithoutProjectIdInput
}

input ProjectCreateWithoutChangeOrdersInput {
  addressId: AddressCreateOneWithoutProjectsInput
  clients: ClientCreateManyWithoutProjectsInput
  companyId: CompanyCreateOneWithoutProjectsInput!
  createdAt: DateTime
  feedEntries: FeedEntryCreateManyWithoutProjectIdInput
  id: String
  invoices: InvoiceCreateManyWithoutProjectIdInput
  name: String!
  notes: String!
  projectBudgets: ProjectBudgetCreateManyWithoutProjectInput
  projectTimelines: ProjectTimelineCreateManyWithoutProjectInput
  proposals: ProposalCreateManyWithoutProjectIdInput
  shareLinks: ShareLinkCreateManyWithoutProjectIdInput
  suppliers: SupplierCreateManyWithoutProjectsInput
  updatedAt: DateTime
  userRoles: UserRoleCreateManyWithoutProjectIdInput
}

input ProjectCreateWithoutClientsInput {
  addressId: AddressCreateOneWithoutProjectsInput
  changeOrders: ChangeOrderCreateManyWithoutProjectIdInput
  companyId: CompanyCreateOneWithoutProjectsInput!
  createdAt: DateTime
  feedEntries: FeedEntryCreateManyWithoutProjectIdInput
  id: String
  invoices: InvoiceCreateManyWithoutProjectIdInput
  name: String!
  notes: String!
  projectBudgets: ProjectBudgetCreateManyWithoutProjectInput
  projectTimelines: ProjectTimelineCreateManyWithoutProjectInput
  proposals: ProposalCreateManyWithoutProjectIdInput
  shareLinks: ShareLinkCreateManyWithoutProjectIdInput
  suppliers: SupplierCreateManyWithoutProjectsInput
  updatedAt: DateTime
  userRoles: UserRoleCreateManyWithoutProjectIdInput
}

input ProjectCreateWithoutCompanyIdInput {
  addressId: AddressCreateOneWithoutProjectsInput
  changeOrders: ChangeOrderCreateManyWithoutProjectIdInput
  clients: ClientCreateManyWithoutProjectsInput
  createdAt: DateTime
  feedEntries: FeedEntryCreateManyWithoutProjectIdInput
  id: String
  invoices: InvoiceCreateManyWithoutProjectIdInput
  name: String!
  notes: String!
  projectBudgets: ProjectBudgetCreateManyWithoutProjectInput
  projectTimelines: ProjectTimelineCreateManyWithoutProjectInput
  proposals: ProposalCreateManyWithoutProjectIdInput
  shareLinks: ShareLinkCreateManyWithoutProjectIdInput
  suppliers: SupplierCreateManyWithoutProjectsInput
  updatedAt: DateTime
  userRoles: UserRoleCreateManyWithoutProjectIdInput
}

input ProjectCreateWithoutFeedEntriesInput {
  addressId: AddressCreateOneWithoutProjectsInput
  changeOrders: ChangeOrderCreateManyWithoutProjectIdInput
  clients: ClientCreateManyWithoutProjectsInput
  companyId: CompanyCreateOneWithoutProjectsInput!
  createdAt: DateTime
  id: String
  invoices: InvoiceCreateManyWithoutProjectIdInput
  name: String!
  notes: String!
  projectBudgets: ProjectBudgetCreateManyWithoutProjectInput
  projectTimelines: ProjectTimelineCreateManyWithoutProjectInput
  proposals: ProposalCreateManyWithoutProjectIdInput
  shareLinks: ShareLinkCreateManyWithoutProjectIdInput
  suppliers: SupplierCreateManyWithoutProjectsInput
  updatedAt: DateTime
  userRoles: UserRoleCreateManyWithoutProjectIdInput
}

input ProjectCreateWithoutInvoicesInput {
  addressId: AddressCreateOneWithoutProjectsInput
  changeOrders: ChangeOrderCreateManyWithoutProjectIdInput
  clients: ClientCreateManyWithoutProjectsInput
  companyId: CompanyCreateOneWithoutProjectsInput!
  createdAt: DateTime
  feedEntries: FeedEntryCreateManyWithoutProjectIdInput
  id: String
  name: String!
  notes: String!
  projectBudgets: ProjectBudgetCreateManyWithoutProjectInput
  projectTimelines: ProjectTimelineCreateManyWithoutProjectInput
  proposals: ProposalCreateManyWithoutProjectIdInput
  shareLinks: ShareLinkCreateManyWithoutProjectIdInput
  suppliers: SupplierCreateManyWithoutProjectsInput
  updatedAt: DateTime
  userRoles: UserRoleCreateManyWithoutProjectIdInput
}

input ProjectCreateWithoutProjectBudgetsInput {
  addressId: AddressCreateOneWithoutProjectsInput
  changeOrders: ChangeOrderCreateManyWithoutProjectIdInput
  clients: ClientCreateManyWithoutProjectsInput
  companyId: CompanyCreateOneWithoutProjectsInput!
  createdAt: DateTime
  feedEntries: FeedEntryCreateManyWithoutProjectIdInput
  id: String
  invoices: InvoiceCreateManyWithoutProjectIdInput
  name: String!
  notes: String!
  projectTimelines: ProjectTimelineCreateManyWithoutProjectInput
  proposals: ProposalCreateManyWithoutProjectIdInput
  shareLinks: ShareLinkCreateManyWithoutProjectIdInput
  suppliers: SupplierCreateManyWithoutProjectsInput
  updatedAt: DateTime
  userRoles: UserRoleCreateManyWithoutProjectIdInput
}

input ProjectCreateWithoutProjectTimelinesInput {
  addressId: AddressCreateOneWithoutProjectsInput
  changeOrders: ChangeOrderCreateManyWithoutProjectIdInput
  clients: ClientCreateManyWithoutProjectsInput
  companyId: CompanyCreateOneWithoutProjectsInput!
  createdAt: DateTime
  feedEntries: FeedEntryCreateManyWithoutProjectIdInput
  id: String
  invoices: InvoiceCreateManyWithoutProjectIdInput
  name: String!
  notes: String!
  projectBudgets: ProjectBudgetCreateManyWithoutProjectInput
  proposals: ProposalCreateManyWithoutProjectIdInput
  shareLinks: ShareLinkCreateManyWithoutProjectIdInput
  suppliers: SupplierCreateManyWithoutProjectsInput
  updatedAt: DateTime
  userRoles: UserRoleCreateManyWithoutProjectIdInput
}

input ProjectCreateWithoutProposalsInput {
  addressId: AddressCreateOneWithoutProjectsInput
  changeOrders: ChangeOrderCreateManyWithoutProjectIdInput
  clients: ClientCreateManyWithoutProjectsInput
  companyId: CompanyCreateOneWithoutProjectsInput!
  createdAt: DateTime
  feedEntries: FeedEntryCreateManyWithoutProjectIdInput
  id: String
  invoices: InvoiceCreateManyWithoutProjectIdInput
  name: String!
  notes: String!
  projectBudgets: ProjectBudgetCreateManyWithoutProjectInput
  projectTimelines: ProjectTimelineCreateManyWithoutProjectInput
  shareLinks: ShareLinkCreateManyWithoutProjectIdInput
  suppliers: SupplierCreateManyWithoutProjectsInput
  updatedAt: DateTime
  userRoles: UserRoleCreateManyWithoutProjectIdInput
}

input ProjectCreateWithoutShareLinksInput {
  addressId: AddressCreateOneWithoutProjectsInput
  changeOrders: ChangeOrderCreateManyWithoutProjectIdInput
  clients: ClientCreateManyWithoutProjectsInput
  companyId: CompanyCreateOneWithoutProjectsInput!
  createdAt: DateTime
  feedEntries: FeedEntryCreateManyWithoutProjectIdInput
  id: String
  invoices: InvoiceCreateManyWithoutProjectIdInput
  name: String!
  notes: String!
  projectBudgets: ProjectBudgetCreateManyWithoutProjectInput
  projectTimelines: ProjectTimelineCreateManyWithoutProjectInput
  proposals: ProposalCreateManyWithoutProjectIdInput
  suppliers: SupplierCreateManyWithoutProjectsInput
  updatedAt: DateTime
  userRoles: UserRoleCreateManyWithoutProjectIdInput
}

input ProjectCreateWithoutSuppliersInput {
  addressId: AddressCreateOneWithoutProjectsInput
  changeOrders: ChangeOrderCreateManyWithoutProjectIdInput
  clients: ClientCreateManyWithoutProjectsInput
  companyId: CompanyCreateOneWithoutProjectsInput!
  createdAt: DateTime
  feedEntries: FeedEntryCreateManyWithoutProjectIdInput
  id: String
  invoices: InvoiceCreateManyWithoutProjectIdInput
  name: String!
  notes: String!
  projectBudgets: ProjectBudgetCreateManyWithoutProjectInput
  projectTimelines: ProjectTimelineCreateManyWithoutProjectInput
  proposals: ProposalCreateManyWithoutProjectIdInput
  shareLinks: ShareLinkCreateManyWithoutProjectIdInput
  updatedAt: DateTime
  userRoles: UserRoleCreateManyWithoutProjectIdInput
}

input ProjectCreateWithoutUserRolesInput {
  addressId: AddressCreateOneWithoutProjectsInput
  changeOrders: ChangeOrderCreateManyWithoutProjectIdInput
  clients: ClientCreateManyWithoutProjectsInput
  companyId: CompanyCreateOneWithoutProjectsInput!
  createdAt: DateTime
  feedEntries: FeedEntryCreateManyWithoutProjectIdInput
  id: String
  invoices: InvoiceCreateManyWithoutProjectIdInput
  name: String!
  notes: String!
  projectBudgets: ProjectBudgetCreateManyWithoutProjectInput
  projectTimelines: ProjectTimelineCreateManyWithoutProjectInput
  proposals: ProposalCreateManyWithoutProjectIdInput
  shareLinks: ShareLinkCreateManyWithoutProjectIdInput
  suppliers: SupplierCreateManyWithoutProjectsInput
  updatedAt: DateTime
}

input ProjectFilter {
  every: ProjectWhereInput
  none: ProjectWhereInput
  some: ProjectWhereInput
}

input ProjectOrderByInput {
  addressId: OrderByArg
  companyId: OrderByArg
  createdAt: OrderByArg
  id: OrderByArg
  name: OrderByArg
  notes: OrderByArg
  updatedAt: OrderByArg
}

input ProjectScalarWhereInput {
  AND: [ProjectScalarWhereInput!]
  changeOrders: ChangeOrderFilter
  clients: ClientFilter
  createdAt: DateTimeFilter
  feedEntries: FeedEntryFilter
  id: StringFilter
  invoices: InvoiceFilter
  name: StringFilter
  NOT: [ProjectScalarWhereInput!]
  notes: StringFilter
  OR: [ProjectScalarWhereInput!]
  projectBudgets: ProjectBudgetFilter
  projectTimelines: ProjectTimelineFilter
  proposals: ProposalFilter
  shareLinks: ShareLinkFilter
  suppliers: SupplierFilter
  updatedAt: DateTimeFilter
  userRoles: UserRoleFilter
}

type ProjectTimeline {
  createdAt: DateTime!
  endDate: DateTime!
  id: String!
  startDate: DateTime!
  status: ProjectTimelineStatus!
  updatedAt: DateTime!
}

input ProjectTimelineCreateInput {
  createdAt: DateTime
  endDate: DateTime!
  id: String
  project: ProjectCreateOneWithoutProjectTimelinesInput
  startDate: DateTime!
  status: ProjectTimelineStatus!
  updatedAt: DateTime
}

input ProjectTimelineCreateManyWithoutProjectInput {
  connect: [ProjectTimelineWhereUniqueInput!]
  create: [ProjectTimelineCreateWithoutProjectInput!]
}

input ProjectTimelineCreateWithoutProjectInput {
  createdAt: DateTime
  endDate: DateTime!
  id: String
  startDate: DateTime!
  status: ProjectTimelineStatus!
  updatedAt: DateTime
}

input ProjectTimelineFilter {
  every: ProjectTimelineWhereInput
  none: ProjectTimelineWhereInput
  some: ProjectTimelineWhereInput
}

input ProjectTimelineScalarWhereInput {
  AND: [ProjectTimelineScalarWhereInput!]
  createdAt: DateTimeFilter
  endDate: DateTimeFilter
  id: StringFilter
  NOT: [ProjectTimelineScalarWhereInput!]
  OR: [ProjectTimelineScalarWhereInput!]
  startDate: DateTimeFilter
  status: ProjectTimelineStatus
  updatedAt: DateTimeFilter
}

enum ProjectTimelineStatus {
  APPROVED
  CANCELED
  COMPLETED
  IN_PROGRESS
}

input ProjectTimelineUpdateInput {
  createdAt: DateTime
  endDate: DateTime
  id: String
  project: ProjectUpdateOneWithoutProjectTimelinesInput
  startDate: DateTime
  status: ProjectTimelineStatus
  updatedAt: DateTime
}

input ProjectTimelineUpdateManyDataInput {
  createdAt: DateTime
  endDate: DateTime
  id: String
  startDate: DateTime
  status: ProjectTimelineStatus
  updatedAt: DateTime
}

input ProjectTimelineUpdateManyMutationInput {
  createdAt: DateTime
  endDate: DateTime
  id: String
  startDate: DateTime
  status: ProjectTimelineStatus
  updatedAt: DateTime
}

input ProjectTimelineUpdateManyWithoutProjectInput {
  connect: [ProjectTimelineWhereUniqueInput!]
  create: [ProjectTimelineCreateWithoutProjectInput!]
  delete: [ProjectTimelineWhereUniqueInput!]
  deleteMany: [ProjectTimelineScalarWhereInput!]
  disconnect: [ProjectTimelineWhereUniqueInput!]
  set: [ProjectTimelineWhereUniqueInput!]
  update: [ProjectTimelineUpdateWithWhereUniqueWithoutProjectInput!]
  updateMany: [ProjectTimelineUpdateManyWithWhereNestedInput!]
  upsert: [ProjectTimelineUpsertWithWhereUniqueWithoutProjectInput!]
}

input ProjectTimelineUpdateManyWithWhereNestedInput {
  data: ProjectTimelineUpdateManyDataInput!
  where: ProjectTimelineScalarWhereInput!
}

input ProjectTimelineUpdateWithoutProjectDataInput {
  createdAt: DateTime
  endDate: DateTime
  id: String
  startDate: DateTime
  status: ProjectTimelineStatus
  updatedAt: DateTime
}

input ProjectTimelineUpdateWithWhereUniqueWithoutProjectInput {
  data: ProjectTimelineUpdateWithoutProjectDataInput!
  where: ProjectTimelineWhereUniqueInput!
}

input ProjectTimelineUpsertWithWhereUniqueWithoutProjectInput {
  create: ProjectTimelineCreateWithoutProjectInput!
  update: ProjectTimelineUpdateWithoutProjectDataInput!
  where: ProjectTimelineWhereUniqueInput!
}

input ProjectTimelineWhereInput {
  AND: [ProjectTimelineWhereInput!]
  createdAt: DateTimeFilter
  endDate: DateTimeFilter
  id: StringFilter
  NOT: [ProjectTimelineWhereInput!]
  OR: [ProjectTimelineWhereInput!]
  project: ProjectWhereInput
  startDate: DateTimeFilter
  status: ProjectTimelineStatus
  updatedAt: DateTimeFilter
}

input ProjectTimelineWhereUniqueInput {
  id: String
}

input ProjectUpdateInput {
  addressId: AddressUpdateOneWithoutProjectsInput
  changeOrders: ChangeOrderUpdateManyWithoutProjectIdInput
  clients: ClientUpdateManyWithoutProjectsInput
  companyId: CompanyUpdateOneRequiredWithoutProjectsInput
  createdAt: DateTime
  feedEntries: FeedEntryUpdateManyWithoutProjectIdInput
  id: String
  invoices: InvoiceUpdateManyWithoutProjectIdInput
  name: String
  notes: String
  projectBudgets: ProjectBudgetUpdateManyWithoutProjectInput
  projectTimelines: ProjectTimelineUpdateManyWithoutProjectInput
  proposals: ProposalUpdateManyWithoutProjectIdInput
  shareLinks: ShareLinkUpdateManyWithoutProjectIdInput
  suppliers: SupplierUpdateManyWithoutProjectsInput
  updatedAt: DateTime
  userRoles: UserRoleUpdateManyWithoutProjectIdInput
}

input ProjectUpdateManyDataInput {
  createdAt: DateTime
  id: String
  name: String
  notes: String
  updatedAt: DateTime
}

input ProjectUpdateManyMutationInput {
  createdAt: DateTime
  id: String
  name: String
  notes: String
  updatedAt: DateTime
}

input ProjectUpdateManyWithoutAddressIdInput {
  connect: [ProjectWhereUniqueInput!]
  create: [ProjectCreateWithoutAddressIdInput!]
  delete: [ProjectWhereUniqueInput!]
  deleteMany: [ProjectScalarWhereInput!]
  disconnect: [ProjectWhereUniqueInput!]
  set: [ProjectWhereUniqueInput!]
  update: [ProjectUpdateWithWhereUniqueWithoutAddressIdInput!]
  updateMany: [ProjectUpdateManyWithWhereNestedInput!]
  upsert: [ProjectUpsertWithWhereUniqueWithoutAddressIdInput!]
}

input ProjectUpdateManyWithoutClientsInput {
  connect: [ProjectWhereUniqueInput!]
  create: [ProjectCreateWithoutClientsInput!]
  delete: [ProjectWhereUniqueInput!]
  deleteMany: [ProjectScalarWhereInput!]
  disconnect: [ProjectWhereUniqueInput!]
  set: [ProjectWhereUniqueInput!]
  update: [ProjectUpdateWithWhereUniqueWithoutClientsInput!]
  updateMany: [ProjectUpdateManyWithWhereNestedInput!]
  upsert: [ProjectUpsertWithWhereUniqueWithoutClientsInput!]
}

input ProjectUpdateManyWithoutCompanyIdInput {
  connect: [ProjectWhereUniqueInput!]
  create: [ProjectCreateWithoutCompanyIdInput!]
  delete: [ProjectWhereUniqueInput!]
  deleteMany: [ProjectScalarWhereInput!]
  disconnect: [ProjectWhereUniqueInput!]
  set: [ProjectWhereUniqueInput!]
  update: [ProjectUpdateWithWhereUniqueWithoutCompanyIdInput!]
  updateMany: [ProjectUpdateManyWithWhereNestedInput!]
  upsert: [ProjectUpsertWithWhereUniqueWithoutCompanyIdInput!]
}

input ProjectUpdateManyWithoutSuppliersInput {
  connect: [ProjectWhereUniqueInput!]
  create: [ProjectCreateWithoutSuppliersInput!]
  delete: [ProjectWhereUniqueInput!]
  deleteMany: [ProjectScalarWhereInput!]
  disconnect: [ProjectWhereUniqueInput!]
  set: [ProjectWhereUniqueInput!]
  update: [ProjectUpdateWithWhereUniqueWithoutSuppliersInput!]
  updateMany: [ProjectUpdateManyWithWhereNestedInput!]
  upsert: [ProjectUpsertWithWhereUniqueWithoutSuppliersInput!]
}

input ProjectUpdateManyWithWhereNestedInput {
  data: ProjectUpdateManyDataInput!
  where: ProjectScalarWhereInput!
}

input ProjectUpdateOneRequiredWithoutChangeOrdersInput {
  connect: ProjectWhereUniqueInput
  create: ProjectCreateWithoutChangeOrdersInput
  update: ProjectUpdateWithoutChangeOrdersDataInput
  upsert: ProjectUpsertWithoutChangeOrdersInput
}

input ProjectUpdateOneRequiredWithoutFeedEntriesInput {
  connect: ProjectWhereUniqueInput
  create: ProjectCreateWithoutFeedEntriesInput
  update: ProjectUpdateWithoutFeedEntriesDataInput
  upsert: ProjectUpsertWithoutFeedEntriesInput
}

input ProjectUpdateOneRequiredWithoutInvoicesInput {
  connect: ProjectWhereUniqueInput
  create: ProjectCreateWithoutInvoicesInput
  update: ProjectUpdateWithoutInvoicesDataInput
  upsert: ProjectUpsertWithoutInvoicesInput
}

input ProjectUpdateOneRequiredWithoutShareLinksInput {
  connect: ProjectWhereUniqueInput
  create: ProjectCreateWithoutShareLinksInput
  update: ProjectUpdateWithoutShareLinksDataInput
  upsert: ProjectUpsertWithoutShareLinksInput
}

input ProjectUpdateOneRequiredWithoutUserRolesInput {
  connect: ProjectWhereUniqueInput
  create: ProjectCreateWithoutUserRolesInput
  update: ProjectUpdateWithoutUserRolesDataInput
  upsert: ProjectUpsertWithoutUserRolesInput
}

input ProjectUpdateOneWithoutProjectBudgetsInput {
  connect: ProjectWhereUniqueInput
  create: ProjectCreateWithoutProjectBudgetsInput
  delete: Boolean
  disconnect: Boolean
  update: ProjectUpdateWithoutProjectBudgetsDataInput
  upsert: ProjectUpsertWithoutProjectBudgetsInput
}

input ProjectUpdateOneWithoutProjectTimelinesInput {
  connect: ProjectWhereUniqueInput
  create: ProjectCreateWithoutProjectTimelinesInput
  delete: Boolean
  disconnect: Boolean
  update: ProjectUpdateWithoutProjectTimelinesDataInput
  upsert: ProjectUpsertWithoutProjectTimelinesInput
}

input ProjectUpdateOneWithoutProposalsInput {
  connect: ProjectWhereUniqueInput
  create: ProjectCreateWithoutProposalsInput
  delete: Boolean
  disconnect: Boolean
  update: ProjectUpdateWithoutProposalsDataInput
  upsert: ProjectUpsertWithoutProposalsInput
}

input ProjectUpdateWithoutAddressIdDataInput {
  changeOrders: ChangeOrderUpdateManyWithoutProjectIdInput
  clients: ClientUpdateManyWithoutProjectsInput
  companyId: CompanyUpdateOneRequiredWithoutProjectsInput
  createdAt: DateTime
  feedEntries: FeedEntryUpdateManyWithoutProjectIdInput
  id: String
  invoices: InvoiceUpdateManyWithoutProjectIdInput
  name: String
  notes: String
  projectBudgets: ProjectBudgetUpdateManyWithoutProjectInput
  projectTimelines: ProjectTimelineUpdateManyWithoutProjectInput
  proposals: ProposalUpdateManyWithoutProjectIdInput
  shareLinks: ShareLinkUpdateManyWithoutProjectIdInput
  suppliers: SupplierUpdateManyWithoutProjectsInput
  updatedAt: DateTime
  userRoles: UserRoleUpdateManyWithoutProjectIdInput
}

input ProjectUpdateWithoutChangeOrdersDataInput {
  addressId: AddressUpdateOneWithoutProjectsInput
  clients: ClientUpdateManyWithoutProjectsInput
  companyId: CompanyUpdateOneRequiredWithoutProjectsInput
  createdAt: DateTime
  feedEntries: FeedEntryUpdateManyWithoutProjectIdInput
  id: String
  invoices: InvoiceUpdateManyWithoutProjectIdInput
  name: String
  notes: String
  projectBudgets: ProjectBudgetUpdateManyWithoutProjectInput
  projectTimelines: ProjectTimelineUpdateManyWithoutProjectInput
  proposals: ProposalUpdateManyWithoutProjectIdInput
  shareLinks: ShareLinkUpdateManyWithoutProjectIdInput
  suppliers: SupplierUpdateManyWithoutProjectsInput
  updatedAt: DateTime
  userRoles: UserRoleUpdateManyWithoutProjectIdInput
}

input ProjectUpdateWithoutClientsDataInput {
  addressId: AddressUpdateOneWithoutProjectsInput
  changeOrders: ChangeOrderUpdateManyWithoutProjectIdInput
  companyId: CompanyUpdateOneRequiredWithoutProjectsInput
  createdAt: DateTime
  feedEntries: FeedEntryUpdateManyWithoutProjectIdInput
  id: String
  invoices: InvoiceUpdateManyWithoutProjectIdInput
  name: String
  notes: String
  projectBudgets: ProjectBudgetUpdateManyWithoutProjectInput
  projectTimelines: ProjectTimelineUpdateManyWithoutProjectInput
  proposals: ProposalUpdateManyWithoutProjectIdInput
  shareLinks: ShareLinkUpdateManyWithoutProjectIdInput
  suppliers: SupplierUpdateManyWithoutProjectsInput
  updatedAt: DateTime
  userRoles: UserRoleUpdateManyWithoutProjectIdInput
}

input ProjectUpdateWithoutCompanyIdDataInput {
  addressId: AddressUpdateOneWithoutProjectsInput
  changeOrders: ChangeOrderUpdateManyWithoutProjectIdInput
  clients: ClientUpdateManyWithoutProjectsInput
  createdAt: DateTime
  feedEntries: FeedEntryUpdateManyWithoutProjectIdInput
  id: String
  invoices: InvoiceUpdateManyWithoutProjectIdInput
  name: String
  notes: String
  projectBudgets: ProjectBudgetUpdateManyWithoutProjectInput
  projectTimelines: ProjectTimelineUpdateManyWithoutProjectInput
  proposals: ProposalUpdateManyWithoutProjectIdInput
  shareLinks: ShareLinkUpdateManyWithoutProjectIdInput
  suppliers: SupplierUpdateManyWithoutProjectsInput
  updatedAt: DateTime
  userRoles: UserRoleUpdateManyWithoutProjectIdInput
}

input ProjectUpdateWithoutFeedEntriesDataInput {
  addressId: AddressUpdateOneWithoutProjectsInput
  changeOrders: ChangeOrderUpdateManyWithoutProjectIdInput
  clients: ClientUpdateManyWithoutProjectsInput
  companyId: CompanyUpdateOneRequiredWithoutProjectsInput
  createdAt: DateTime
  id: String
  invoices: InvoiceUpdateManyWithoutProjectIdInput
  name: String
  notes: String
  projectBudgets: ProjectBudgetUpdateManyWithoutProjectInput
  projectTimelines: ProjectTimelineUpdateManyWithoutProjectInput
  proposals: ProposalUpdateManyWithoutProjectIdInput
  shareLinks: ShareLinkUpdateManyWithoutProjectIdInput
  suppliers: SupplierUpdateManyWithoutProjectsInput
  updatedAt: DateTime
  userRoles: UserRoleUpdateManyWithoutProjectIdInput
}

input ProjectUpdateWithoutInvoicesDataInput {
  addressId: AddressUpdateOneWithoutProjectsInput
  changeOrders: ChangeOrderUpdateManyWithoutProjectIdInput
  clients: ClientUpdateManyWithoutProjectsInput
  companyId: CompanyUpdateOneRequiredWithoutProjectsInput
  createdAt: DateTime
  feedEntries: FeedEntryUpdateManyWithoutProjectIdInput
  id: String
  name: String
  notes: String
  projectBudgets: ProjectBudgetUpdateManyWithoutProjectInput
  projectTimelines: ProjectTimelineUpdateManyWithoutProjectInput
  proposals: ProposalUpdateManyWithoutProjectIdInput
  shareLinks: ShareLinkUpdateManyWithoutProjectIdInput
  suppliers: SupplierUpdateManyWithoutProjectsInput
  updatedAt: DateTime
  userRoles: UserRoleUpdateManyWithoutProjectIdInput
}

input ProjectUpdateWithoutProjectBudgetsDataInput {
  addressId: AddressUpdateOneWithoutProjectsInput
  changeOrders: ChangeOrderUpdateManyWithoutProjectIdInput
  clients: ClientUpdateManyWithoutProjectsInput
  companyId: CompanyUpdateOneRequiredWithoutProjectsInput
  createdAt: DateTime
  feedEntries: FeedEntryUpdateManyWithoutProjectIdInput
  id: String
  invoices: InvoiceUpdateManyWithoutProjectIdInput
  name: String
  notes: String
  projectTimelines: ProjectTimelineUpdateManyWithoutProjectInput
  proposals: ProposalUpdateManyWithoutProjectIdInput
  shareLinks: ShareLinkUpdateManyWithoutProjectIdInput
  suppliers: SupplierUpdateManyWithoutProjectsInput
  updatedAt: DateTime
  userRoles: UserRoleUpdateManyWithoutProjectIdInput
}

input ProjectUpdateWithoutProjectTimelinesDataInput {
  addressId: AddressUpdateOneWithoutProjectsInput
  changeOrders: ChangeOrderUpdateManyWithoutProjectIdInput
  clients: ClientUpdateManyWithoutProjectsInput
  companyId: CompanyUpdateOneRequiredWithoutProjectsInput
  createdAt: DateTime
  feedEntries: FeedEntryUpdateManyWithoutProjectIdInput
  id: String
  invoices: InvoiceUpdateManyWithoutProjectIdInput
  name: String
  notes: String
  projectBudgets: ProjectBudgetUpdateManyWithoutProjectInput
  proposals: ProposalUpdateManyWithoutProjectIdInput
  shareLinks: ShareLinkUpdateManyWithoutProjectIdInput
  suppliers: SupplierUpdateManyWithoutProjectsInput
  updatedAt: DateTime
  userRoles: UserRoleUpdateManyWithoutProjectIdInput
}

input ProjectUpdateWithoutProposalsDataInput {
  addressId: AddressUpdateOneWithoutProjectsInput
  changeOrders: ChangeOrderUpdateManyWithoutProjectIdInput
  clients: ClientUpdateManyWithoutProjectsInput
  companyId: CompanyUpdateOneRequiredWithoutProjectsInput
  createdAt: DateTime
  feedEntries: FeedEntryUpdateManyWithoutProjectIdInput
  id: String
  invoices: InvoiceUpdateManyWithoutProjectIdInput
  name: String
  notes: String
  projectBudgets: ProjectBudgetUpdateManyWithoutProjectInput
  projectTimelines: ProjectTimelineUpdateManyWithoutProjectInput
  shareLinks: ShareLinkUpdateManyWithoutProjectIdInput
  suppliers: SupplierUpdateManyWithoutProjectsInput
  updatedAt: DateTime
  userRoles: UserRoleUpdateManyWithoutProjectIdInput
}

input ProjectUpdateWithoutShareLinksDataInput {
  addressId: AddressUpdateOneWithoutProjectsInput
  changeOrders: ChangeOrderUpdateManyWithoutProjectIdInput
  clients: ClientUpdateManyWithoutProjectsInput
  companyId: CompanyUpdateOneRequiredWithoutProjectsInput
  createdAt: DateTime
  feedEntries: FeedEntryUpdateManyWithoutProjectIdInput
  id: String
  invoices: InvoiceUpdateManyWithoutProjectIdInput
  name: String
  notes: String
  projectBudgets: ProjectBudgetUpdateManyWithoutProjectInput
  projectTimelines: ProjectTimelineUpdateManyWithoutProjectInput
  proposals: ProposalUpdateManyWithoutProjectIdInput
  suppliers: SupplierUpdateManyWithoutProjectsInput
  updatedAt: DateTime
  userRoles: UserRoleUpdateManyWithoutProjectIdInput
}

input ProjectUpdateWithoutSuppliersDataInput {
  addressId: AddressUpdateOneWithoutProjectsInput
  changeOrders: ChangeOrderUpdateManyWithoutProjectIdInput
  clients: ClientUpdateManyWithoutProjectsInput
  companyId: CompanyUpdateOneRequiredWithoutProjectsInput
  createdAt: DateTime
  feedEntries: FeedEntryUpdateManyWithoutProjectIdInput
  id: String
  invoices: InvoiceUpdateManyWithoutProjectIdInput
  name: String
  notes: String
  projectBudgets: ProjectBudgetUpdateManyWithoutProjectInput
  projectTimelines: ProjectTimelineUpdateManyWithoutProjectInput
  proposals: ProposalUpdateManyWithoutProjectIdInput
  shareLinks: ShareLinkUpdateManyWithoutProjectIdInput
  updatedAt: DateTime
  userRoles: UserRoleUpdateManyWithoutProjectIdInput
}

input ProjectUpdateWithoutUserRolesDataInput {
  addressId: AddressUpdateOneWithoutProjectsInput
  changeOrders: ChangeOrderUpdateManyWithoutProjectIdInput
  clients: ClientUpdateManyWithoutProjectsInput
  companyId: CompanyUpdateOneRequiredWithoutProjectsInput
  createdAt: DateTime
  feedEntries: FeedEntryUpdateManyWithoutProjectIdInput
  id: String
  invoices: InvoiceUpdateManyWithoutProjectIdInput
  name: String
  notes: String
  projectBudgets: ProjectBudgetUpdateManyWithoutProjectInput
  projectTimelines: ProjectTimelineUpdateManyWithoutProjectInput
  proposals: ProposalUpdateManyWithoutProjectIdInput
  shareLinks: ShareLinkUpdateManyWithoutProjectIdInput
  suppliers: SupplierUpdateManyWithoutProjectsInput
  updatedAt: DateTime
}

input ProjectUpdateWithWhereUniqueWithoutAddressIdInput {
  data: ProjectUpdateWithoutAddressIdDataInput!
  where: ProjectWhereUniqueInput!
}

input ProjectUpdateWithWhereUniqueWithoutClientsInput {
  data: ProjectUpdateWithoutClientsDataInput!
  where: ProjectWhereUniqueInput!
}

input ProjectUpdateWithWhereUniqueWithoutCompanyIdInput {
  data: ProjectUpdateWithoutCompanyIdDataInput!
  where: ProjectWhereUniqueInput!
}

input ProjectUpdateWithWhereUniqueWithoutSuppliersInput {
  data: ProjectUpdateWithoutSuppliersDataInput!
  where: ProjectWhereUniqueInput!
}

input ProjectUpsertWithoutChangeOrdersInput {
  create: ProjectCreateWithoutChangeOrdersInput!
  update: ProjectUpdateWithoutChangeOrdersDataInput!
}

input ProjectUpsertWithoutFeedEntriesInput {
  create: ProjectCreateWithoutFeedEntriesInput!
  update: ProjectUpdateWithoutFeedEntriesDataInput!
}

input ProjectUpsertWithoutInvoicesInput {
  create: ProjectCreateWithoutInvoicesInput!
  update: ProjectUpdateWithoutInvoicesDataInput!
}

input ProjectUpsertWithoutProjectBudgetsInput {
  create: ProjectCreateWithoutProjectBudgetsInput!
  update: ProjectUpdateWithoutProjectBudgetsDataInput!
}

input ProjectUpsertWithoutProjectTimelinesInput {
  create: ProjectCreateWithoutProjectTimelinesInput!
  update: ProjectUpdateWithoutProjectTimelinesDataInput!
}

input ProjectUpsertWithoutProposalsInput {
  create: ProjectCreateWithoutProposalsInput!
  update: ProjectUpdateWithoutProposalsDataInput!
}

input ProjectUpsertWithoutShareLinksInput {
  create: ProjectCreateWithoutShareLinksInput!
  update: ProjectUpdateWithoutShareLinksDataInput!
}

input ProjectUpsertWithoutUserRolesInput {
  create: ProjectCreateWithoutUserRolesInput!
  update: ProjectUpdateWithoutUserRolesDataInput!
}

input ProjectUpsertWithWhereUniqueWithoutAddressIdInput {
  create: ProjectCreateWithoutAddressIdInput!
  update: ProjectUpdateWithoutAddressIdDataInput!
  where: ProjectWhereUniqueInput!
}

input ProjectUpsertWithWhereUniqueWithoutClientsInput {
  create: ProjectCreateWithoutClientsInput!
  update: ProjectUpdateWithoutClientsDataInput!
  where: ProjectWhereUniqueInput!
}

input ProjectUpsertWithWhereUniqueWithoutCompanyIdInput {
  create: ProjectCreateWithoutCompanyIdInput!
  update: ProjectUpdateWithoutCompanyIdDataInput!
  where: ProjectWhereUniqueInput!
}

input ProjectUpsertWithWhereUniqueWithoutSuppliersInput {
  create: ProjectCreateWithoutSuppliersInput!
  update: ProjectUpdateWithoutSuppliersDataInput!
  where: ProjectWhereUniqueInput!
}

input ProjectWhereInput {
  addressId: AddressWhereInput
  AND: [ProjectWhereInput!]
  changeOrders: ChangeOrderFilter
  clients: ClientFilter
  companyId: CompanyWhereInput
  createdAt: DateTimeFilter
  feedEntries: FeedEntryFilter
  id: StringFilter
  invoices: InvoiceFilter
  name: StringFilter
  NOT: [ProjectWhereInput!]
  notes: StringFilter
  OR: [ProjectWhereInput!]
  projectBudgets: ProjectBudgetFilter
  projectTimelines: ProjectTimelineFilter
  proposals: ProposalFilter
  shareLinks: ShareLinkFilter
  suppliers: SupplierFilter
  updatedAt: DateTimeFilter
  userRoles: UserRoleFilter
}

input ProjectWhereUniqueInput {
  id: String
}

type Proposal {
  budgetProposed: Float
  clientId: Client
  createdAt: DateTime!
  details: String!
  endDate: DateTime!
  id: String!
  name: String!
  projectId: Project
  proposalOwnerId: User!
  startDate: DateTime!
  status: ProposalStatus!
  supplierId: Supplier
  updatedAt: DateTime!
}

input ProposalCreateInput {
  budgetProposed: Float
  clientId: ClientCreateOneWithoutProposalsInput
  createdAt: DateTime
  details: String!
  endDate: DateTime!
  id: String
  invoices: InvoiceCreateManyWithoutProposalIdInput
  name: String!
  projectId: ProjectCreateOneWithoutProposalsInput
  proposalOwnerId: UserCreateOneWithoutProposalsInput!
  shareLinks: ShareLinkCreateManyWithoutProposalIdInput
  startDate: DateTime!
  status: ProposalStatus!
  supplierId: SupplierCreateOneWithoutProposalsInput
  updatedAt: DateTime
}

input ProposalCreateManyWithoutClientIdInput {
  connect: [ProposalWhereUniqueInput!]
  create: [ProposalCreateWithoutClientIdInput!]
}

input ProposalCreateManyWithoutProjectIdInput {
  connect: [ProposalWhereUniqueInput!]
  create: [ProposalCreateWithoutProjectIdInput!]
}

input ProposalCreateManyWithoutProposalOwnerIdInput {
  connect: [ProposalWhereUniqueInput!]
  create: [ProposalCreateWithoutProposalOwnerIdInput!]
}

input ProposalCreateManyWithoutSupplierIdInput {
  connect: [ProposalWhereUniqueInput!]
  create: [ProposalCreateWithoutSupplierIdInput!]
}

input ProposalCreateOneWithoutInvoicesInput {
  connect: ProposalWhereUniqueInput
  create: ProposalCreateWithoutInvoicesInput
}

input ProposalCreateOneWithoutShareLinksInput {
  connect: ProposalWhereUniqueInput
  create: ProposalCreateWithoutShareLinksInput
}

input ProposalCreateWithoutClientIdInput {
  budgetProposed: Float
  createdAt: DateTime
  details: String!
  endDate: DateTime!
  id: String
  invoices: InvoiceCreateManyWithoutProposalIdInput
  name: String!
  projectId: ProjectCreateOneWithoutProposalsInput
  proposalOwnerId: UserCreateOneWithoutProposalsInput!
  shareLinks: ShareLinkCreateManyWithoutProposalIdInput
  startDate: DateTime!
  status: ProposalStatus!
  supplierId: SupplierCreateOneWithoutProposalsInput
  updatedAt: DateTime
}

input ProposalCreateWithoutInvoicesInput {
  budgetProposed: Float
  clientId: ClientCreateOneWithoutProposalsInput
  createdAt: DateTime
  details: String!
  endDate: DateTime!
  id: String
  name: String!
  projectId: ProjectCreateOneWithoutProposalsInput
  proposalOwnerId: UserCreateOneWithoutProposalsInput!
  shareLinks: ShareLinkCreateManyWithoutProposalIdInput
  startDate: DateTime!
  status: ProposalStatus!
  supplierId: SupplierCreateOneWithoutProposalsInput
  updatedAt: DateTime
}

input ProposalCreateWithoutProjectIdInput {
  budgetProposed: Float
  clientId: ClientCreateOneWithoutProposalsInput
  createdAt: DateTime
  details: String!
  endDate: DateTime!
  id: String
  invoices: InvoiceCreateManyWithoutProposalIdInput
  name: String!
  proposalOwnerId: UserCreateOneWithoutProposalsInput!
  shareLinks: ShareLinkCreateManyWithoutProposalIdInput
  startDate: DateTime!
  status: ProposalStatus!
  supplierId: SupplierCreateOneWithoutProposalsInput
  updatedAt: DateTime
}

input ProposalCreateWithoutProposalOwnerIdInput {
  budgetProposed: Float
  clientId: ClientCreateOneWithoutProposalsInput
  createdAt: DateTime
  details: String!
  endDate: DateTime!
  id: String
  invoices: InvoiceCreateManyWithoutProposalIdInput
  name: String!
  projectId: ProjectCreateOneWithoutProposalsInput
  shareLinks: ShareLinkCreateManyWithoutProposalIdInput
  startDate: DateTime!
  status: ProposalStatus!
  supplierId: SupplierCreateOneWithoutProposalsInput
  updatedAt: DateTime
}

input ProposalCreateWithoutShareLinksInput {
  budgetProposed: Float
  clientId: ClientCreateOneWithoutProposalsInput
  createdAt: DateTime
  details: String!
  endDate: DateTime!
  id: String
  invoices: InvoiceCreateManyWithoutProposalIdInput
  name: String!
  projectId: ProjectCreateOneWithoutProposalsInput
  proposalOwnerId: UserCreateOneWithoutProposalsInput!
  startDate: DateTime!
  status: ProposalStatus!
  supplierId: SupplierCreateOneWithoutProposalsInput
  updatedAt: DateTime
}

input ProposalCreateWithoutSupplierIdInput {
  budgetProposed: Float
  clientId: ClientCreateOneWithoutProposalsInput
  createdAt: DateTime
  details: String!
  endDate: DateTime!
  id: String
  invoices: InvoiceCreateManyWithoutProposalIdInput
  name: String!
  projectId: ProjectCreateOneWithoutProposalsInput
  proposalOwnerId: UserCreateOneWithoutProposalsInput!
  shareLinks: ShareLinkCreateManyWithoutProposalIdInput
  startDate: DateTime!
  status: ProposalStatus!
  updatedAt: DateTime
}

input ProposalFilter {
  every: ProposalWhereInput
  none: ProposalWhereInput
  some: ProposalWhereInput
}

input ProposalScalarWhereInput {
  AND: [ProposalScalarWhereInput!]
  budgetProposed: NullableFloatFilter
  createdAt: DateTimeFilter
  details: StringFilter
  endDate: DateTimeFilter
  id: StringFilter
  invoices: InvoiceFilter
  name: StringFilter
  NOT: [ProposalScalarWhereInput!]
  OR: [ProposalScalarWhereInput!]
  shareLinks: ShareLinkFilter
  startDate: DateTimeFilter
  status: ProposalStatus
  updatedAt: DateTimeFilter
}

enum ProposalStatus {
  APPROVED
  DECLINED
  PENDING
}

input ProposalUpdateInput {
  budgetProposed: Float
  clientId: ClientUpdateOneWithoutProposalsInput
  createdAt: DateTime
  details: String
  endDate: DateTime
  id: String
  invoices: InvoiceUpdateManyWithoutProposalIdInput
  name: String
  projectId: ProjectUpdateOneWithoutProposalsInput
  proposalOwnerId: UserUpdateOneRequiredWithoutProposalsInput
  shareLinks: ShareLinkUpdateManyWithoutProposalIdInput
  startDate: DateTime
  status: ProposalStatus
  supplierId: SupplierUpdateOneWithoutProposalsInput
  updatedAt: DateTime
}

input ProposalUpdateManyDataInput {
  budgetProposed: Float
  createdAt: DateTime
  details: String
  endDate: DateTime
  id: String
  name: String
  startDate: DateTime
  status: ProposalStatus
  updatedAt: DateTime
}

input ProposalUpdateManyMutationInput {
  budgetProposed: Float
  createdAt: DateTime
  details: String
  endDate: DateTime
  id: String
  name: String
  startDate: DateTime
  status: ProposalStatus
  updatedAt: DateTime
}

input ProposalUpdateManyWithoutClientIdInput {
  connect: [ProposalWhereUniqueInput!]
  create: [ProposalCreateWithoutClientIdInput!]
  delete: [ProposalWhereUniqueInput!]
  deleteMany: [ProposalScalarWhereInput!]
  disconnect: [ProposalWhereUniqueInput!]
  set: [ProposalWhereUniqueInput!]
  update: [ProposalUpdateWithWhereUniqueWithoutClientIdInput!]
  updateMany: [ProposalUpdateManyWithWhereNestedInput!]
  upsert: [ProposalUpsertWithWhereUniqueWithoutClientIdInput!]
}

input ProposalUpdateManyWithoutProjectIdInput {
  connect: [ProposalWhereUniqueInput!]
  create: [ProposalCreateWithoutProjectIdInput!]
  delete: [ProposalWhereUniqueInput!]
  deleteMany: [ProposalScalarWhereInput!]
  disconnect: [ProposalWhereUniqueInput!]
  set: [ProposalWhereUniqueInput!]
  update: [ProposalUpdateWithWhereUniqueWithoutProjectIdInput!]
  updateMany: [ProposalUpdateManyWithWhereNestedInput!]
  upsert: [ProposalUpsertWithWhereUniqueWithoutProjectIdInput!]
}

input ProposalUpdateManyWithoutProposalOwnerIdInput {
  connect: [ProposalWhereUniqueInput!]
  create: [ProposalCreateWithoutProposalOwnerIdInput!]
  delete: [ProposalWhereUniqueInput!]
  deleteMany: [ProposalScalarWhereInput!]
  disconnect: [ProposalWhereUniqueInput!]
  set: [ProposalWhereUniqueInput!]
  update: [ProposalUpdateWithWhereUniqueWithoutProposalOwnerIdInput!]
  updateMany: [ProposalUpdateManyWithWhereNestedInput!]
  upsert: [ProposalUpsertWithWhereUniqueWithoutProposalOwnerIdInput!]
}

input ProposalUpdateManyWithoutSupplierIdInput {
  connect: [ProposalWhereUniqueInput!]
  create: [ProposalCreateWithoutSupplierIdInput!]
  delete: [ProposalWhereUniqueInput!]
  deleteMany: [ProposalScalarWhereInput!]
  disconnect: [ProposalWhereUniqueInput!]
  set: [ProposalWhereUniqueInput!]
  update: [ProposalUpdateWithWhereUniqueWithoutSupplierIdInput!]
  updateMany: [ProposalUpdateManyWithWhereNestedInput!]
  upsert: [ProposalUpsertWithWhereUniqueWithoutSupplierIdInput!]
}

input ProposalUpdateManyWithWhereNestedInput {
  data: ProposalUpdateManyDataInput!
  where: ProposalScalarWhereInput!
}

input ProposalUpdateOneRequiredWithoutInvoicesInput {
  connect: ProposalWhereUniqueInput
  create: ProposalCreateWithoutInvoicesInput
  update: ProposalUpdateWithoutInvoicesDataInput
  upsert: ProposalUpsertWithoutInvoicesInput
}

input ProposalUpdateOneRequiredWithoutShareLinksInput {
  connect: ProposalWhereUniqueInput
  create: ProposalCreateWithoutShareLinksInput
  update: ProposalUpdateWithoutShareLinksDataInput
  upsert: ProposalUpsertWithoutShareLinksInput
}

input ProposalUpdateWithoutClientIdDataInput {
  budgetProposed: Float
  createdAt: DateTime
  details: String
  endDate: DateTime
  id: String
  invoices: InvoiceUpdateManyWithoutProposalIdInput
  name: String
  projectId: ProjectUpdateOneWithoutProposalsInput
  proposalOwnerId: UserUpdateOneRequiredWithoutProposalsInput
  shareLinks: ShareLinkUpdateManyWithoutProposalIdInput
  startDate: DateTime
  status: ProposalStatus
  supplierId: SupplierUpdateOneWithoutProposalsInput
  updatedAt: DateTime
}

input ProposalUpdateWithoutInvoicesDataInput {
  budgetProposed: Float
  clientId: ClientUpdateOneWithoutProposalsInput
  createdAt: DateTime
  details: String
  endDate: DateTime
  id: String
  name: String
  projectId: ProjectUpdateOneWithoutProposalsInput
  proposalOwnerId: UserUpdateOneRequiredWithoutProposalsInput
  shareLinks: ShareLinkUpdateManyWithoutProposalIdInput
  startDate: DateTime
  status: ProposalStatus
  supplierId: SupplierUpdateOneWithoutProposalsInput
  updatedAt: DateTime
}

input ProposalUpdateWithoutProjectIdDataInput {
  budgetProposed: Float
  clientId: ClientUpdateOneWithoutProposalsInput
  createdAt: DateTime
  details: String
  endDate: DateTime
  id: String
  invoices: InvoiceUpdateManyWithoutProposalIdInput
  name: String
  proposalOwnerId: UserUpdateOneRequiredWithoutProposalsInput
  shareLinks: ShareLinkUpdateManyWithoutProposalIdInput
  startDate: DateTime
  status: ProposalStatus
  supplierId: SupplierUpdateOneWithoutProposalsInput
  updatedAt: DateTime
}

input ProposalUpdateWithoutProposalOwnerIdDataInput {
  budgetProposed: Float
  clientId: ClientUpdateOneWithoutProposalsInput
  createdAt: DateTime
  details: String
  endDate: DateTime
  id: String
  invoices: InvoiceUpdateManyWithoutProposalIdInput
  name: String
  projectId: ProjectUpdateOneWithoutProposalsInput
  shareLinks: ShareLinkUpdateManyWithoutProposalIdInput
  startDate: DateTime
  status: ProposalStatus
  supplierId: SupplierUpdateOneWithoutProposalsInput
  updatedAt: DateTime
}

input ProposalUpdateWithoutShareLinksDataInput {
  budgetProposed: Float
  clientId: ClientUpdateOneWithoutProposalsInput
  createdAt: DateTime
  details: String
  endDate: DateTime
  id: String
  invoices: InvoiceUpdateManyWithoutProposalIdInput
  name: String
  projectId: ProjectUpdateOneWithoutProposalsInput
  proposalOwnerId: UserUpdateOneRequiredWithoutProposalsInput
  startDate: DateTime
  status: ProposalStatus
  supplierId: SupplierUpdateOneWithoutProposalsInput
  updatedAt: DateTime
}

input ProposalUpdateWithoutSupplierIdDataInput {
  budgetProposed: Float
  clientId: ClientUpdateOneWithoutProposalsInput
  createdAt: DateTime
  details: String
  endDate: DateTime
  id: String
  invoices: InvoiceUpdateManyWithoutProposalIdInput
  name: String
  projectId: ProjectUpdateOneWithoutProposalsInput
  proposalOwnerId: UserUpdateOneRequiredWithoutProposalsInput
  shareLinks: ShareLinkUpdateManyWithoutProposalIdInput
  startDate: DateTime
  status: ProposalStatus
  updatedAt: DateTime
}

input ProposalUpdateWithWhereUniqueWithoutClientIdInput {
  data: ProposalUpdateWithoutClientIdDataInput!
  where: ProposalWhereUniqueInput!
}

input ProposalUpdateWithWhereUniqueWithoutProjectIdInput {
  data: ProposalUpdateWithoutProjectIdDataInput!
  where: ProposalWhereUniqueInput!
}

input ProposalUpdateWithWhereUniqueWithoutProposalOwnerIdInput {
  data: ProposalUpdateWithoutProposalOwnerIdDataInput!
  where: ProposalWhereUniqueInput!
}

input ProposalUpdateWithWhereUniqueWithoutSupplierIdInput {
  data: ProposalUpdateWithoutSupplierIdDataInput!
  where: ProposalWhereUniqueInput!
}

input ProposalUpsertWithoutInvoicesInput {
  create: ProposalCreateWithoutInvoicesInput!
  update: ProposalUpdateWithoutInvoicesDataInput!
}

input ProposalUpsertWithoutShareLinksInput {
  create: ProposalCreateWithoutShareLinksInput!
  update: ProposalUpdateWithoutShareLinksDataInput!
}

input ProposalUpsertWithWhereUniqueWithoutClientIdInput {
  create: ProposalCreateWithoutClientIdInput!
  update: ProposalUpdateWithoutClientIdDataInput!
  where: ProposalWhereUniqueInput!
}

input ProposalUpsertWithWhereUniqueWithoutProjectIdInput {
  create: ProposalCreateWithoutProjectIdInput!
  update: ProposalUpdateWithoutProjectIdDataInput!
  where: ProposalWhereUniqueInput!
}

input ProposalUpsertWithWhereUniqueWithoutProposalOwnerIdInput {
  create: ProposalCreateWithoutProposalOwnerIdInput!
  update: ProposalUpdateWithoutProposalOwnerIdDataInput!
  where: ProposalWhereUniqueInput!
}

input ProposalUpsertWithWhereUniqueWithoutSupplierIdInput {
  create: ProposalCreateWithoutSupplierIdInput!
  update: ProposalUpdateWithoutSupplierIdDataInput!
  where: ProposalWhereUniqueInput!
}

input ProposalWhereInput {
  AND: [ProposalWhereInput!]
  budgetProposed: NullableFloatFilter
  clientId: ClientWhereInput
  createdAt: DateTimeFilter
  details: StringFilter
  endDate: DateTimeFilter
  id: StringFilter
  invoices: InvoiceFilter
  name: StringFilter
  NOT: [ProposalWhereInput!]
  OR: [ProposalWhereInput!]
  projectId: ProjectWhereInput
  proposalOwnerId: UserWhereInput
  shareLinks: ShareLinkFilter
  startDate: DateTimeFilter
  status: ProposalStatus
  supplierId: SupplierWhereInput
  updatedAt: DateTimeFilter
}

input ProposalWhereUniqueInput {
  id: String
}

type Query {
  address(where: AddressWhereUniqueInput!): Address
  addresses(after: AddressWhereUniqueInput, before: AddressWhereUniqueInput, first: Int, last: Int, skip: Int): [Address!]!
  billingProfile(where: BillingProfileWhereUniqueInput!): BillingProfile
  billingProfiles(after: BillingProfileWhereUniqueInput, before: BillingProfileWhereUniqueInput, first: Int, last: Int, skip: Int): [BillingProfile!]!
  changeOrder(where: ChangeOrderWhereUniqueInput!): ChangeOrder
  changeOrders(after: ChangeOrderWhereUniqueInput, before: ChangeOrderWhereUniqueInput, first: Int, last: Int, skip: Int): [ChangeOrder!]!
  cities(after: CityWhereUniqueInput, before: CityWhereUniqueInput, first: Int, last: Int, skip: Int, where: CityWhereInput): [City!]!
  city(where: CityWhereUniqueInput!): City
  client(where: ClientWhereUniqueInput!): Client
  clientNote(where: ClientNoteWhereUniqueInput!): ClientNote
  clientNotes(after: ClientNoteWhereUniqueInput, before: ClientNoteWhereUniqueInput, first: Int, last: Int, skip: Int): [ClientNote!]!
  clients(after: ClientWhereUniqueInput, before: ClientWhereUniqueInput, first: Int, last: Int, orderBy: ClientOrderByInput, skip: Int, where: ClientWhereInput): [Client!]!
  companies(after: CompanyWhereUniqueInput, before: CompanyWhereUniqueInput, first: Int, last: Int, skip: Int): [Company!]!
  company(where: CompanyWhereUniqueInput!): Company
  contact(where: ContactWhereUniqueInput!): Contact
  contacts(after: ContactWhereUniqueInput, before: ContactWhereUniqueInput, first: Int, last: Int, skip: Int): [Contact!]!
  countClientsByUser(userId: String!): Int!
  countInvoicesByUser(userId: String!): Int!
  countProjectsByUser(userId: String!): Int!
  countProposalsByUser(userId: String!): Int!
  countries(after: CountryWhereUniqueInput, before: CountryWhereUniqueInput, first: Int, last: Int, skip: Int): [Country!]!
  country(where: CountryWhereUniqueInput!): Country
  countSuppliersByUser(userId: String!): Int!
  discount(where: DiscountWhereUniqueInput!): Discount
  discounts(after: DiscountWhereUniqueInput, before: DiscountWhereUniqueInput, first: Int, last: Int, skip: Int): [Discount!]!
  feedComment(where: FeedCommentWhereUniqueInput!): FeedComment
  feedComments(after: FeedCommentWhereUniqueInput, before: FeedCommentWhereUniqueInput, first: Int, last: Int, skip: Int): [FeedComment!]!
  feedEntries(after: FeedEntryWhereUniqueInput, before: FeedEntryWhereUniqueInput, first: Int, last: Int, skip: Int): [FeedEntry!]!
  feedEntry(where: FeedEntryWhereUniqueInput!): FeedEntry
  feedMedia(where: FeedMediaWhereUniqueInput!): FeedMedia
  feedMedias(after: FeedMediaWhereUniqueInput, before: FeedMediaWhereUniqueInput, first: Int, last: Int, skip: Int): [FeedMedia!]!
  feedReaction(where: FeedReactionWhereUniqueInput!): FeedReaction
  feedReactions(after: FeedReactionWhereUniqueInput, before: FeedReactionWhereUniqueInput, first: Int, last: Int, skip: Int): [FeedReaction!]!
  getClientProposalsByUser(qty: Int!, userId: String!): [Proposal!]!
  getProjectsByUser(qty: Int!, userId: String!): [Project!]!
  getSupplierProposalsByUser(qty: Int!, userId: String!): [Proposal!]!
  getTotalEarningByUser(userId: String!): Float!
  invitation(where: InvitationWhereUniqueInput!): Invitation
  invitations(after: InvitationWhereUniqueInput, before: InvitationWhereUniqueInput, first: Int, last: Int, skip: Int): [Invitation!]!
  invoice(where: InvoiceWhereUniqueInput!): Invoice
  invoiceLineItem(where: InvoiceLineItemWhereUniqueInput!): InvoiceLineItem
  invoiceLineItems(after: InvoiceLineItemWhereUniqueInput, before: InvoiceLineItemWhereUniqueInput, first: Int, last: Int, skip: Int): [InvoiceLineItem!]!
  invoices(after: InvoiceWhereUniqueInput, before: InvoiceWhereUniqueInput, first: Int, last: Int, skip: Int): [Invoice!]!
  paymentMethod(where: PaymentMethodWhereUniqueInput!): PaymentMethod
  paymentMethods(after: PaymentMethodWhereUniqueInput, before: PaymentMethodWhereUniqueInput, first: Int, last: Int, skip: Int): [PaymentMethod!]!
  project(where: ProjectWhereUniqueInput!): Project
  projectBudget(where: ProjectBudgetWhereUniqueInput!): ProjectBudget
  projectBudgets(after: ProjectBudgetWhereUniqueInput, before: ProjectBudgetWhereUniqueInput, first: Int, last: Int, skip: Int): [ProjectBudget!]!
  projects(after: ProjectWhereUniqueInput, before: ProjectWhereUniqueInput, first: Int, last: Int, orderBy: ProjectOrderByInput, skip: Int, where: ProjectWhereInput): [Project!]!
  projectTimeline(where: ProjectTimelineWhereUniqueInput!): ProjectTimeline
  projectTimelines(after: ProjectTimelineWhereUniqueInput, before: ProjectTimelineWhereUniqueInput, first: Int, last: Int, skip: Int): [ProjectTimeline!]!
  proposal(where: ProposalWhereUniqueInput!): Proposal
  proposals(after: ProposalWhereUniqueInput, before: ProposalWhereUniqueInput, first: Int, last: Int, skip: Int): [Proposal!]!
  referral(where: ReferralWhereUniqueInput!): Referral
  referrals(after: ReferralWhereUniqueInput, before: ReferralWhereUniqueInput, first: Int, last: Int, skip: Int): [Referral!]!
  shareLink(where: ShareLinkWhereUniqueInput!): ShareLink
  shareLinks(after: ShareLinkWhereUniqueInput, before: ShareLinkWhereUniqueInput, first: Int, last: Int, skip: Int): [ShareLink!]!
  state(where: StateWhereUniqueInput!): State
  states(after: StateWhereUniqueInput, before: StateWhereUniqueInput, first: Int, last: Int, skip: Int, where: StateWhereInput): [State!]!
  subscription(where: SubscriptionWhereUniqueInput!): Subscription
  subscriptionDiscount(where: SubscriptionDiscountWhereUniqueInput!): SubscriptionDiscount
  subscriptionDiscounts(after: SubscriptionDiscountWhereUniqueInput, before: SubscriptionDiscountWhereUniqueInput, first: Int, last: Int, skip: Int): [SubscriptionDiscount!]!
  subscriptionPayment(where: SubscriptionPaymentWhereUniqueInput!): SubscriptionPayment
  subscriptionPayments(after: SubscriptionPaymentWhereUniqueInput, before: SubscriptionPaymentWhereUniqueInput, first: Int, last: Int, skip: Int): [SubscriptionPayment!]!
  subscriptions(after: SubscriptionWhereUniqueInput, before: SubscriptionWhereUniqueInput, first: Int, last: Int, skip: Int): [Subscription!]!
  supplier(where: SupplierWhereUniqueInput!): Supplier
  supplierNote(where: SupplierNoteWhereUniqueInput!): SupplierNote
  supplierNotes(after: SupplierNoteWhereUniqueInput, before: SupplierNoteWhereUniqueInput, first: Int, last: Int, skip: Int): [SupplierNote!]!
  suppliers(after: SupplierWhereUniqueInput, before: SupplierWhereUniqueInput, first: Int, last: Int, skip: Int): [Supplier!]!
  user(where: UserWhereUniqueInput!): User
  userNotification(where: UserNotificationWhereUniqueInput!): UserNotification
  userNotifications(after: UserNotificationWhereUniqueInput, before: UserNotificationWhereUniqueInput, first: Int, last: Int, skip: Int): [UserNotification!]!
  userRole(where: UserRoleWhereUniqueInput!): UserRole
  userRoles(after: UserRoleWhereUniqueInput, before: UserRoleWhereUniqueInput, first: Int, last: Int, skip: Int): [UserRole!]!
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int, skip: Int, where: UserWhereInput): [User!]!
}

enum ReactionType {
  REACTION_TYPE_A
  REACTION_TYPE_B
  REACTION_TYPE_C
}

type Referral {
  createdAt: DateTime!
  id: String!
  referredEmail: String!
  updatedAt: DateTime!
  userId: User!
}

input ReferralCreateInput {
  createdAt: DateTime
  id: String
  referredEmail: String!
  referredMonthsPaid: Int!
  updatedAt: DateTime
  userId: UserCreateOneWithoutReferralsInput!
}

input ReferralCreateManyWithoutUserIdInput {
  connect: [ReferralWhereUniqueInput!]
  create: [ReferralCreateWithoutUserIdInput!]
}

input ReferralCreateWithoutUserIdInput {
  createdAt: DateTime
  id: String
  referredEmail: String!
  referredMonthsPaid: Int!
  updatedAt: DateTime
}

input ReferralFilter {
  every: ReferralWhereInput
  none: ReferralWhereInput
  some: ReferralWhereInput
}

input ReferralScalarWhereInput {
  AND: [ReferralScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [ReferralScalarWhereInput!]
  OR: [ReferralScalarWhereInput!]
  referredEmail: StringFilter
  referredMonthsPaid: IntFilter
  updatedAt: DateTimeFilter
}

input ReferralUpdateInput {
  createdAt: DateTime
  id: String
  referredEmail: String
  referredMonthsPaid: Int
  updatedAt: DateTime
  userId: UserUpdateOneRequiredWithoutReferralsInput
}

input ReferralUpdateManyDataInput {
  createdAt: DateTime
  id: String
  referredEmail: String
  referredMonthsPaid: Int
  updatedAt: DateTime
}

input ReferralUpdateManyMutationInput {
  createdAt: DateTime
  id: String
  referredEmail: String
  referredMonthsPaid: Int
  updatedAt: DateTime
}

input ReferralUpdateManyWithoutUserIdInput {
  connect: [ReferralWhereUniqueInput!]
  create: [ReferralCreateWithoutUserIdInput!]
  delete: [ReferralWhereUniqueInput!]
  deleteMany: [ReferralScalarWhereInput!]
  disconnect: [ReferralWhereUniqueInput!]
  set: [ReferralWhereUniqueInput!]
  update: [ReferralUpdateWithWhereUniqueWithoutUserIdInput!]
  updateMany: [ReferralUpdateManyWithWhereNestedInput!]
  upsert: [ReferralUpsertWithWhereUniqueWithoutUserIdInput!]
}

input ReferralUpdateManyWithWhereNestedInput {
  data: ReferralUpdateManyDataInput!
  where: ReferralScalarWhereInput!
}

input ReferralUpdateWithoutUserIdDataInput {
  createdAt: DateTime
  id: String
  referredEmail: String
  referredMonthsPaid: Int
  updatedAt: DateTime
}

input ReferralUpdateWithWhereUniqueWithoutUserIdInput {
  data: ReferralUpdateWithoutUserIdDataInput!
  where: ReferralWhereUniqueInput!
}

input ReferralUpsertWithWhereUniqueWithoutUserIdInput {
  create: ReferralCreateWithoutUserIdInput!
  update: ReferralUpdateWithoutUserIdDataInput!
  where: ReferralWhereUniqueInput!
}

input ReferralWhereInput {
  AND: [ReferralWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [ReferralWhereInput!]
  OR: [ReferralWhereInput!]
  referredEmail: StringFilter
  referredMonthsPaid: IntFilter
  updatedAt: DateTimeFilter
  userId: UserWhereInput
}

input ReferralWhereUniqueInput {
  id: String
}

enum RoleType {
  ROLE_TYPE_1
  ROLE_TYPE_2
  ROLE_TYPE_3
}

type ShareLink {
  clickedMetaData: String!
  createdAt: DateTime!
  expiredAt: DateTime!
  id: String!
  invoiceId: Invoice!
  projectId: Project!
  proposalId: Proposal!
  senderUserId: User!
  timesClicked: Int!
  url: String!
}

input ShareLinkCreateInput {
  clickedMetaData: String!
  createdAt: DateTime
  expiredAt: DateTime!
  id: String
  invoiceId: InvoiceCreateOneWithoutShareLinksInput!
  projectId: ProjectCreateOneWithoutShareLinksInput!
  proposalId: ProposalCreateOneWithoutShareLinksInput!
  senderUserId: UserCreateOneWithoutShareLinksInput!
  timesClicked: Int!
  url: String!
}

input ShareLinkCreateManyWithoutInvoiceIdInput {
  connect: [ShareLinkWhereUniqueInput!]
  create: [ShareLinkCreateWithoutInvoiceIdInput!]
}

input ShareLinkCreateManyWithoutProjectIdInput {
  connect: [ShareLinkWhereUniqueInput!]
  create: [ShareLinkCreateWithoutProjectIdInput!]
}

input ShareLinkCreateManyWithoutProposalIdInput {
  connect: [ShareLinkWhereUniqueInput!]
  create: [ShareLinkCreateWithoutProposalIdInput!]
}

input ShareLinkCreateManyWithoutSenderUserIdInput {
  connect: [ShareLinkWhereUniqueInput!]
  create: [ShareLinkCreateWithoutSenderUserIdInput!]
}

input ShareLinkCreateWithoutInvoiceIdInput {
  clickedMetaData: String!
  createdAt: DateTime
  expiredAt: DateTime!
  id: String
  projectId: ProjectCreateOneWithoutShareLinksInput!
  proposalId: ProposalCreateOneWithoutShareLinksInput!
  senderUserId: UserCreateOneWithoutShareLinksInput!
  timesClicked: Int!
  url: String!
}

input ShareLinkCreateWithoutProjectIdInput {
  clickedMetaData: String!
  createdAt: DateTime
  expiredAt: DateTime!
  id: String
  invoiceId: InvoiceCreateOneWithoutShareLinksInput!
  proposalId: ProposalCreateOneWithoutShareLinksInput!
  senderUserId: UserCreateOneWithoutShareLinksInput!
  timesClicked: Int!
  url: String!
}

input ShareLinkCreateWithoutProposalIdInput {
  clickedMetaData: String!
  createdAt: DateTime
  expiredAt: DateTime!
  id: String
  invoiceId: InvoiceCreateOneWithoutShareLinksInput!
  projectId: ProjectCreateOneWithoutShareLinksInput!
  senderUserId: UserCreateOneWithoutShareLinksInput!
  timesClicked: Int!
  url: String!
}

input ShareLinkCreateWithoutSenderUserIdInput {
  clickedMetaData: String!
  createdAt: DateTime
  expiredAt: DateTime!
  id: String
  invoiceId: InvoiceCreateOneWithoutShareLinksInput!
  projectId: ProjectCreateOneWithoutShareLinksInput!
  proposalId: ProposalCreateOneWithoutShareLinksInput!
  timesClicked: Int!
  url: String!
}

input ShareLinkFilter {
  every: ShareLinkWhereInput
  none: ShareLinkWhereInput
  some: ShareLinkWhereInput
}

input ShareLinkScalarWhereInput {
  AND: [ShareLinkScalarWhereInput!]
  clickedMetaData: StringFilter
  createdAt: DateTimeFilter
  expiredAt: DateTimeFilter
  id: StringFilter
  NOT: [ShareLinkScalarWhereInput!]
  OR: [ShareLinkScalarWhereInput!]
  timesClicked: IntFilter
  url: StringFilter
}

input ShareLinkUpdateInput {
  clickedMetaData: String
  createdAt: DateTime
  expiredAt: DateTime
  id: String
  invoiceId: InvoiceUpdateOneRequiredWithoutShareLinksInput
  projectId: ProjectUpdateOneRequiredWithoutShareLinksInput
  proposalId: ProposalUpdateOneRequiredWithoutShareLinksInput
  senderUserId: UserUpdateOneRequiredWithoutShareLinksInput
  timesClicked: Int
  url: String
}

input ShareLinkUpdateManyDataInput {
  clickedMetaData: String
  createdAt: DateTime
  expiredAt: DateTime
  id: String
  timesClicked: Int
  url: String
}

input ShareLinkUpdateManyMutationInput {
  clickedMetaData: String
  createdAt: DateTime
  expiredAt: DateTime
  id: String
  timesClicked: Int
  url: String
}

input ShareLinkUpdateManyWithoutInvoiceIdInput {
  connect: [ShareLinkWhereUniqueInput!]
  create: [ShareLinkCreateWithoutInvoiceIdInput!]
  delete: [ShareLinkWhereUniqueInput!]
  deleteMany: [ShareLinkScalarWhereInput!]
  disconnect: [ShareLinkWhereUniqueInput!]
  set: [ShareLinkWhereUniqueInput!]
  update: [ShareLinkUpdateWithWhereUniqueWithoutInvoiceIdInput!]
  updateMany: [ShareLinkUpdateManyWithWhereNestedInput!]
  upsert: [ShareLinkUpsertWithWhereUniqueWithoutInvoiceIdInput!]
}

input ShareLinkUpdateManyWithoutProjectIdInput {
  connect: [ShareLinkWhereUniqueInput!]
  create: [ShareLinkCreateWithoutProjectIdInput!]
  delete: [ShareLinkWhereUniqueInput!]
  deleteMany: [ShareLinkScalarWhereInput!]
  disconnect: [ShareLinkWhereUniqueInput!]
  set: [ShareLinkWhereUniqueInput!]
  update: [ShareLinkUpdateWithWhereUniqueWithoutProjectIdInput!]
  updateMany: [ShareLinkUpdateManyWithWhereNestedInput!]
  upsert: [ShareLinkUpsertWithWhereUniqueWithoutProjectIdInput!]
}

input ShareLinkUpdateManyWithoutProposalIdInput {
  connect: [ShareLinkWhereUniqueInput!]
  create: [ShareLinkCreateWithoutProposalIdInput!]
  delete: [ShareLinkWhereUniqueInput!]
  deleteMany: [ShareLinkScalarWhereInput!]
  disconnect: [ShareLinkWhereUniqueInput!]
  set: [ShareLinkWhereUniqueInput!]
  update: [ShareLinkUpdateWithWhereUniqueWithoutProposalIdInput!]
  updateMany: [ShareLinkUpdateManyWithWhereNestedInput!]
  upsert: [ShareLinkUpsertWithWhereUniqueWithoutProposalIdInput!]
}

input ShareLinkUpdateManyWithoutSenderUserIdInput {
  connect: [ShareLinkWhereUniqueInput!]
  create: [ShareLinkCreateWithoutSenderUserIdInput!]
  delete: [ShareLinkWhereUniqueInput!]
  deleteMany: [ShareLinkScalarWhereInput!]
  disconnect: [ShareLinkWhereUniqueInput!]
  set: [ShareLinkWhereUniqueInput!]
  update: [ShareLinkUpdateWithWhereUniqueWithoutSenderUserIdInput!]
  updateMany: [ShareLinkUpdateManyWithWhereNestedInput!]
  upsert: [ShareLinkUpsertWithWhereUniqueWithoutSenderUserIdInput!]
}

input ShareLinkUpdateManyWithWhereNestedInput {
  data: ShareLinkUpdateManyDataInput!
  where: ShareLinkScalarWhereInput!
}

input ShareLinkUpdateWithoutInvoiceIdDataInput {
  clickedMetaData: String
  createdAt: DateTime
  expiredAt: DateTime
  id: String
  projectId: ProjectUpdateOneRequiredWithoutShareLinksInput
  proposalId: ProposalUpdateOneRequiredWithoutShareLinksInput
  senderUserId: UserUpdateOneRequiredWithoutShareLinksInput
  timesClicked: Int
  url: String
}

input ShareLinkUpdateWithoutProjectIdDataInput {
  clickedMetaData: String
  createdAt: DateTime
  expiredAt: DateTime
  id: String
  invoiceId: InvoiceUpdateOneRequiredWithoutShareLinksInput
  proposalId: ProposalUpdateOneRequiredWithoutShareLinksInput
  senderUserId: UserUpdateOneRequiredWithoutShareLinksInput
  timesClicked: Int
  url: String
}

input ShareLinkUpdateWithoutProposalIdDataInput {
  clickedMetaData: String
  createdAt: DateTime
  expiredAt: DateTime
  id: String
  invoiceId: InvoiceUpdateOneRequiredWithoutShareLinksInput
  projectId: ProjectUpdateOneRequiredWithoutShareLinksInput
  senderUserId: UserUpdateOneRequiredWithoutShareLinksInput
  timesClicked: Int
  url: String
}

input ShareLinkUpdateWithoutSenderUserIdDataInput {
  clickedMetaData: String
  createdAt: DateTime
  expiredAt: DateTime
  id: String
  invoiceId: InvoiceUpdateOneRequiredWithoutShareLinksInput
  projectId: ProjectUpdateOneRequiredWithoutShareLinksInput
  proposalId: ProposalUpdateOneRequiredWithoutShareLinksInput
  timesClicked: Int
  url: String
}

input ShareLinkUpdateWithWhereUniqueWithoutInvoiceIdInput {
  data: ShareLinkUpdateWithoutInvoiceIdDataInput!
  where: ShareLinkWhereUniqueInput!
}

input ShareLinkUpdateWithWhereUniqueWithoutProjectIdInput {
  data: ShareLinkUpdateWithoutProjectIdDataInput!
  where: ShareLinkWhereUniqueInput!
}

input ShareLinkUpdateWithWhereUniqueWithoutProposalIdInput {
  data: ShareLinkUpdateWithoutProposalIdDataInput!
  where: ShareLinkWhereUniqueInput!
}

input ShareLinkUpdateWithWhereUniqueWithoutSenderUserIdInput {
  data: ShareLinkUpdateWithoutSenderUserIdDataInput!
  where: ShareLinkWhereUniqueInput!
}

input ShareLinkUpsertWithWhereUniqueWithoutInvoiceIdInput {
  create: ShareLinkCreateWithoutInvoiceIdInput!
  update: ShareLinkUpdateWithoutInvoiceIdDataInput!
  where: ShareLinkWhereUniqueInput!
}

input ShareLinkUpsertWithWhereUniqueWithoutProjectIdInput {
  create: ShareLinkCreateWithoutProjectIdInput!
  update: ShareLinkUpdateWithoutProjectIdDataInput!
  where: ShareLinkWhereUniqueInput!
}

input ShareLinkUpsertWithWhereUniqueWithoutProposalIdInput {
  create: ShareLinkCreateWithoutProposalIdInput!
  update: ShareLinkUpdateWithoutProposalIdDataInput!
  where: ShareLinkWhereUniqueInput!
}

input ShareLinkUpsertWithWhereUniqueWithoutSenderUserIdInput {
  create: ShareLinkCreateWithoutSenderUserIdInput!
  update: ShareLinkUpdateWithoutSenderUserIdDataInput!
  where: ShareLinkWhereUniqueInput!
}

input ShareLinkWhereInput {
  AND: [ShareLinkWhereInput!]
  clickedMetaData: StringFilter
  createdAt: DateTimeFilter
  expiredAt: DateTimeFilter
  id: StringFilter
  invoiceId: InvoiceWhereInput
  NOT: [ShareLinkWhereInput!]
  OR: [ShareLinkWhereInput!]
  projectId: ProjectWhereInput
  proposalId: ProposalWhereInput
  senderUserId: UserWhereInput
  timesClicked: IntFilter
  url: StringFilter
}

input ShareLinkWhereUniqueInput {
  id: String
}

type State {
  cities(after: CityWhereUniqueInput, before: CityWhereUniqueInput, first: Int, last: Int, skip: Int): [City!]!
  createdAt: DateTime!
  id: String!
  name: String!
  updatedAt: DateTime!
}

input StateCreateInput {
  addresses: AddressCreateManyWithoutStateIdInput
  cities: CityCreateManyWithoutStateInput
  country: CountryCreateOneWithoutStatesInput
  createdAt: DateTime
  id: String
  name: String!
  updatedAt: DateTime
}

input StateCreateManyWithoutCountryInput {
  connect: [StateWhereUniqueInput!]
  create: [StateCreateWithoutCountryInput!]
}

input StateCreateOneWithoutAddressesInput {
  connect: StateWhereUniqueInput
  create: StateCreateWithoutAddressesInput
}

input StateCreateOneWithoutCitiesInput {
  connect: StateWhereUniqueInput
  create: StateCreateWithoutCitiesInput
}

input StateCreateWithoutAddressesInput {
  cities: CityCreateManyWithoutStateInput
  country: CountryCreateOneWithoutStatesInput
  createdAt: DateTime
  id: String
  name: String!
  updatedAt: DateTime
}

input StateCreateWithoutCitiesInput {
  addresses: AddressCreateManyWithoutStateIdInput
  country: CountryCreateOneWithoutStatesInput
  createdAt: DateTime
  id: String
  name: String!
  updatedAt: DateTime
}

input StateCreateWithoutCountryInput {
  addresses: AddressCreateManyWithoutStateIdInput
  cities: CityCreateManyWithoutStateInput
  createdAt: DateTime
  id: String
  name: String!
  updatedAt: DateTime
}

input StateFilter {
  every: StateWhereInput
  none: StateWhereInput
  some: StateWhereInput
}

input StateScalarWhereInput {
  addresses: AddressFilter
  AND: [StateScalarWhereInput!]
  cities: CityFilter
  createdAt: DateTimeFilter
  id: StringFilter
  name: StringFilter
  NOT: [StateScalarWhereInput!]
  OR: [StateScalarWhereInput!]
  updatedAt: DateTimeFilter
}

input StateUpdateInput {
  addresses: AddressUpdateManyWithoutStateIdInput
  cities: CityUpdateManyWithoutStateInput
  country: CountryUpdateOneWithoutStatesInput
  createdAt: DateTime
  id: String
  name: String
  updatedAt: DateTime
}

input StateUpdateManyDataInput {
  createdAt: DateTime
  id: String
  name: String
  updatedAt: DateTime
}

input StateUpdateManyMutationInput {
  createdAt: DateTime
  id: String
  name: String
  updatedAt: DateTime
}

input StateUpdateManyWithoutCountryInput {
  connect: [StateWhereUniqueInput!]
  create: [StateCreateWithoutCountryInput!]
  delete: [StateWhereUniqueInput!]
  deleteMany: [StateScalarWhereInput!]
  disconnect: [StateWhereUniqueInput!]
  set: [StateWhereUniqueInput!]
  update: [StateUpdateWithWhereUniqueWithoutCountryInput!]
  updateMany: [StateUpdateManyWithWhereNestedInput!]
  upsert: [StateUpsertWithWhereUniqueWithoutCountryInput!]
}

input StateUpdateManyWithWhereNestedInput {
  data: StateUpdateManyDataInput!
  where: StateScalarWhereInput!
}

input StateUpdateOneWithoutAddressesInput {
  connect: StateWhereUniqueInput
  create: StateCreateWithoutAddressesInput
  delete: Boolean
  disconnect: Boolean
  update: StateUpdateWithoutAddressesDataInput
  upsert: StateUpsertWithoutAddressesInput
}

input StateUpdateOneWithoutCitiesInput {
  connect: StateWhereUniqueInput
  create: StateCreateWithoutCitiesInput
  delete: Boolean
  disconnect: Boolean
  update: StateUpdateWithoutCitiesDataInput
  upsert: StateUpsertWithoutCitiesInput
}

input StateUpdateWithoutAddressesDataInput {
  cities: CityUpdateManyWithoutStateInput
  country: CountryUpdateOneWithoutStatesInput
  createdAt: DateTime
  id: String
  name: String
  updatedAt: DateTime
}

input StateUpdateWithoutCitiesDataInput {
  addresses: AddressUpdateManyWithoutStateIdInput
  country: CountryUpdateOneWithoutStatesInput
  createdAt: DateTime
  id: String
  name: String
  updatedAt: DateTime
}

input StateUpdateWithoutCountryDataInput {
  addresses: AddressUpdateManyWithoutStateIdInput
  cities: CityUpdateManyWithoutStateInput
  createdAt: DateTime
  id: String
  name: String
  updatedAt: DateTime
}

input StateUpdateWithWhereUniqueWithoutCountryInput {
  data: StateUpdateWithoutCountryDataInput!
  where: StateWhereUniqueInput!
}

input StateUpsertWithoutAddressesInput {
  create: StateCreateWithoutAddressesInput!
  update: StateUpdateWithoutAddressesDataInput!
}

input StateUpsertWithoutCitiesInput {
  create: StateCreateWithoutCitiesInput!
  update: StateUpdateWithoutCitiesDataInput!
}

input StateUpsertWithWhereUniqueWithoutCountryInput {
  create: StateCreateWithoutCountryInput!
  update: StateUpdateWithoutCountryDataInput!
  where: StateWhereUniqueInput!
}

input StateWhereInput {
  addresses: AddressFilter
  AND: [StateWhereInput!]
  cities: CityFilter
  country: CountryWhereInput
  createdAt: DateTimeFilter
  id: StringFilter
  name: StringFilter
  NOT: [StateWhereInput!]
  OR: [StateWhereInput!]
  updatedAt: DateTimeFilter
}

input StateWhereUniqueInput {
  id: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type Subscription {
  companyId: Company!
  createdAt: DateTime!
  id: String!
  updatedAt: DateTime!
}

input SubscriptionCreateInput {
  companyId: CompanyCreateOneWithoutSubscriptionsInput!
  createdAt: DateTime
  id: String
  subscriptionDiscounts: SubscriptionDiscountCreateManyWithoutSubscriptionIdInput
  subscriptionPayments: SubscriptionPaymentCreateManyWithoutSubscriptionIdInput
  updatedAt: DateTime
}

input SubscriptionCreateManyWithoutCompanyIdInput {
  connect: [SubscriptionWhereUniqueInput!]
  create: [SubscriptionCreateWithoutCompanyIdInput!]
}

input SubscriptionCreateOneWithoutSubscriptionDiscountsInput {
  connect: SubscriptionWhereUniqueInput
  create: SubscriptionCreateWithoutSubscriptionDiscountsInput
}

input SubscriptionCreateOneWithoutSubscriptionPaymentsInput {
  connect: SubscriptionWhereUniqueInput
  create: SubscriptionCreateWithoutSubscriptionPaymentsInput
}

input SubscriptionCreateWithoutCompanyIdInput {
  createdAt: DateTime
  id: String
  subscriptionDiscounts: SubscriptionDiscountCreateManyWithoutSubscriptionIdInput
  subscriptionPayments: SubscriptionPaymentCreateManyWithoutSubscriptionIdInput
  updatedAt: DateTime
}

input SubscriptionCreateWithoutSubscriptionDiscountsInput {
  companyId: CompanyCreateOneWithoutSubscriptionsInput!
  createdAt: DateTime
  id: String
  subscriptionPayments: SubscriptionPaymentCreateManyWithoutSubscriptionIdInput
  updatedAt: DateTime
}

input SubscriptionCreateWithoutSubscriptionPaymentsInput {
  companyId: CompanyCreateOneWithoutSubscriptionsInput!
  createdAt: DateTime
  id: String
  subscriptionDiscounts: SubscriptionDiscountCreateManyWithoutSubscriptionIdInput
  updatedAt: DateTime
}

type SubscriptionDiscount {
  createdAt: DateTime!
  discountAmount: Float!
  discountCode: String!
  id: String!
  subscriptionId: Subscription!
  timesUsed: Int!
}

input SubscriptionDiscountCreateInput {
  createdAt: DateTime
  discountAmount: Float!
  discountCode: String!
  id: String
  subscriptionId: SubscriptionCreateOneWithoutSubscriptionDiscountsInput!
  timesUsed: Int!
}

input SubscriptionDiscountCreateManyWithoutSubscriptionIdInput {
  connect: [SubscriptionDiscountWhereUniqueInput!]
  create: [SubscriptionDiscountCreateWithoutSubscriptionIdInput!]
}

input SubscriptionDiscountCreateWithoutSubscriptionIdInput {
  createdAt: DateTime
  discountAmount: Float!
  discountCode: String!
  id: String
  timesUsed: Int!
}

input SubscriptionDiscountFilter {
  every: SubscriptionDiscountWhereInput
  none: SubscriptionDiscountWhereInput
  some: SubscriptionDiscountWhereInput
}

input SubscriptionDiscountScalarWhereInput {
  AND: [SubscriptionDiscountScalarWhereInput!]
  createdAt: DateTimeFilter
  discountAmount: FloatFilter
  discountCode: StringFilter
  id: StringFilter
  NOT: [SubscriptionDiscountScalarWhereInput!]
  OR: [SubscriptionDiscountScalarWhereInput!]
  timesUsed: IntFilter
}

input SubscriptionDiscountUpdateInput {
  createdAt: DateTime
  discountAmount: Float
  discountCode: String
  id: String
  subscriptionId: SubscriptionUpdateOneRequiredWithoutSubscriptionDiscountsInput
  timesUsed: Int
}

input SubscriptionDiscountUpdateManyDataInput {
  createdAt: DateTime
  discountAmount: Float
  discountCode: String
  id: String
  timesUsed: Int
}

input SubscriptionDiscountUpdateManyMutationInput {
  createdAt: DateTime
  discountAmount: Float
  discountCode: String
  id: String
  timesUsed: Int
}

input SubscriptionDiscountUpdateManyWithoutSubscriptionIdInput {
  connect: [SubscriptionDiscountWhereUniqueInput!]
  create: [SubscriptionDiscountCreateWithoutSubscriptionIdInput!]
  delete: [SubscriptionDiscountWhereUniqueInput!]
  deleteMany: [SubscriptionDiscountScalarWhereInput!]
  disconnect: [SubscriptionDiscountWhereUniqueInput!]
  set: [SubscriptionDiscountWhereUniqueInput!]
  update: [SubscriptionDiscountUpdateWithWhereUniqueWithoutSubscriptionIdInput!]
  updateMany: [SubscriptionDiscountUpdateManyWithWhereNestedInput!]
  upsert: [SubscriptionDiscountUpsertWithWhereUniqueWithoutSubscriptionIdInput!]
}

input SubscriptionDiscountUpdateManyWithWhereNestedInput {
  data: SubscriptionDiscountUpdateManyDataInput!
  where: SubscriptionDiscountScalarWhereInput!
}

input SubscriptionDiscountUpdateWithoutSubscriptionIdDataInput {
  createdAt: DateTime
  discountAmount: Float
  discountCode: String
  id: String
  timesUsed: Int
}

input SubscriptionDiscountUpdateWithWhereUniqueWithoutSubscriptionIdInput {
  data: SubscriptionDiscountUpdateWithoutSubscriptionIdDataInput!
  where: SubscriptionDiscountWhereUniqueInput!
}

input SubscriptionDiscountUpsertWithWhereUniqueWithoutSubscriptionIdInput {
  create: SubscriptionDiscountCreateWithoutSubscriptionIdInput!
  update: SubscriptionDiscountUpdateWithoutSubscriptionIdDataInput!
  where: SubscriptionDiscountWhereUniqueInput!
}

input SubscriptionDiscountWhereInput {
  AND: [SubscriptionDiscountWhereInput!]
  createdAt: DateTimeFilter
  discountAmount: FloatFilter
  discountCode: StringFilter
  id: StringFilter
  NOT: [SubscriptionDiscountWhereInput!]
  OR: [SubscriptionDiscountWhereInput!]
  subscriptionId: SubscriptionWhereInput
  timesUsed: IntFilter
}

input SubscriptionDiscountWhereUniqueInput {
  id: String
}

input SubscriptionFilter {
  every: SubscriptionWhereInput
  none: SubscriptionWhereInput
  some: SubscriptionWhereInput
}

type SubscriptionPayment {
  createdAt: DateTime!
  id: String!
  subscriptionId: Subscription!
  updatedAt: DateTime!
}

input SubscriptionPaymentCreateInput {
  createdAt: DateTime
  id: String
  subscriptionId: SubscriptionCreateOneWithoutSubscriptionPaymentsInput!
  updatedAt: DateTime
}

input SubscriptionPaymentCreateManyWithoutSubscriptionIdInput {
  connect: [SubscriptionPaymentWhereUniqueInput!]
  create: [SubscriptionPaymentCreateWithoutSubscriptionIdInput!]
}

input SubscriptionPaymentCreateWithoutSubscriptionIdInput {
  createdAt: DateTime
  id: String
  updatedAt: DateTime
}

input SubscriptionPaymentFilter {
  every: SubscriptionPaymentWhereInput
  none: SubscriptionPaymentWhereInput
  some: SubscriptionPaymentWhereInput
}

input SubscriptionPaymentScalarWhereInput {
  AND: [SubscriptionPaymentScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [SubscriptionPaymentScalarWhereInput!]
  OR: [SubscriptionPaymentScalarWhereInput!]
  updatedAt: DateTimeFilter
}

input SubscriptionPaymentUpdateInput {
  createdAt: DateTime
  id: String
  subscriptionId: SubscriptionUpdateOneRequiredWithoutSubscriptionPaymentsInput
  updatedAt: DateTime
}

input SubscriptionPaymentUpdateManyDataInput {
  createdAt: DateTime
  id: String
  updatedAt: DateTime
}

input SubscriptionPaymentUpdateManyMutationInput {
  createdAt: DateTime
  id: String
  updatedAt: DateTime
}

input SubscriptionPaymentUpdateManyWithoutSubscriptionIdInput {
  connect: [SubscriptionPaymentWhereUniqueInput!]
  create: [SubscriptionPaymentCreateWithoutSubscriptionIdInput!]
  delete: [SubscriptionPaymentWhereUniqueInput!]
  deleteMany: [SubscriptionPaymentScalarWhereInput!]
  disconnect: [SubscriptionPaymentWhereUniqueInput!]
  set: [SubscriptionPaymentWhereUniqueInput!]
  update: [SubscriptionPaymentUpdateWithWhereUniqueWithoutSubscriptionIdInput!]
  updateMany: [SubscriptionPaymentUpdateManyWithWhereNestedInput!]
  upsert: [SubscriptionPaymentUpsertWithWhereUniqueWithoutSubscriptionIdInput!]
}

input SubscriptionPaymentUpdateManyWithWhereNestedInput {
  data: SubscriptionPaymentUpdateManyDataInput!
  where: SubscriptionPaymentScalarWhereInput!
}

input SubscriptionPaymentUpdateWithoutSubscriptionIdDataInput {
  createdAt: DateTime
  id: String
  updatedAt: DateTime
}

input SubscriptionPaymentUpdateWithWhereUniqueWithoutSubscriptionIdInput {
  data: SubscriptionPaymentUpdateWithoutSubscriptionIdDataInput!
  where: SubscriptionPaymentWhereUniqueInput!
}

input SubscriptionPaymentUpsertWithWhereUniqueWithoutSubscriptionIdInput {
  create: SubscriptionPaymentCreateWithoutSubscriptionIdInput!
  update: SubscriptionPaymentUpdateWithoutSubscriptionIdDataInput!
  where: SubscriptionPaymentWhereUniqueInput!
}

input SubscriptionPaymentWhereInput {
  AND: [SubscriptionPaymentWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [SubscriptionPaymentWhereInput!]
  OR: [SubscriptionPaymentWhereInput!]
  subscriptionId: SubscriptionWhereInput
  updatedAt: DateTimeFilter
}

input SubscriptionPaymentWhereUniqueInput {
  id: String
}

input SubscriptionScalarWhereInput {
  AND: [SubscriptionScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [SubscriptionScalarWhereInput!]
  OR: [SubscriptionScalarWhereInput!]
  subscriptionDiscounts: SubscriptionDiscountFilter
  subscriptionPayments: SubscriptionPaymentFilter
  updatedAt: DateTimeFilter
}

input SubscriptionUpdateInput {
  companyId: CompanyUpdateOneRequiredWithoutSubscriptionsInput
  createdAt: DateTime
  id: String
  subscriptionDiscounts: SubscriptionDiscountUpdateManyWithoutSubscriptionIdInput
  subscriptionPayments: SubscriptionPaymentUpdateManyWithoutSubscriptionIdInput
  updatedAt: DateTime
}

input SubscriptionUpdateManyDataInput {
  createdAt: DateTime
  id: String
  updatedAt: DateTime
}

input SubscriptionUpdateManyMutationInput {
  createdAt: DateTime
  id: String
  updatedAt: DateTime
}

input SubscriptionUpdateManyWithoutCompanyIdInput {
  connect: [SubscriptionWhereUniqueInput!]
  create: [SubscriptionCreateWithoutCompanyIdInput!]
  delete: [SubscriptionWhereUniqueInput!]
  deleteMany: [SubscriptionScalarWhereInput!]
  disconnect: [SubscriptionWhereUniqueInput!]
  set: [SubscriptionWhereUniqueInput!]
  update: [SubscriptionUpdateWithWhereUniqueWithoutCompanyIdInput!]
  updateMany: [SubscriptionUpdateManyWithWhereNestedInput!]
  upsert: [SubscriptionUpsertWithWhereUniqueWithoutCompanyIdInput!]
}

input SubscriptionUpdateManyWithWhereNestedInput {
  data: SubscriptionUpdateManyDataInput!
  where: SubscriptionScalarWhereInput!
}

input SubscriptionUpdateOneRequiredWithoutSubscriptionDiscountsInput {
  connect: SubscriptionWhereUniqueInput
  create: SubscriptionCreateWithoutSubscriptionDiscountsInput
  update: SubscriptionUpdateWithoutSubscriptionDiscountsDataInput
  upsert: SubscriptionUpsertWithoutSubscriptionDiscountsInput
}

input SubscriptionUpdateOneRequiredWithoutSubscriptionPaymentsInput {
  connect: SubscriptionWhereUniqueInput
  create: SubscriptionCreateWithoutSubscriptionPaymentsInput
  update: SubscriptionUpdateWithoutSubscriptionPaymentsDataInput
  upsert: SubscriptionUpsertWithoutSubscriptionPaymentsInput
}

input SubscriptionUpdateWithoutCompanyIdDataInput {
  createdAt: DateTime
  id: String
  subscriptionDiscounts: SubscriptionDiscountUpdateManyWithoutSubscriptionIdInput
  subscriptionPayments: SubscriptionPaymentUpdateManyWithoutSubscriptionIdInput
  updatedAt: DateTime
}

input SubscriptionUpdateWithoutSubscriptionDiscountsDataInput {
  companyId: CompanyUpdateOneRequiredWithoutSubscriptionsInput
  createdAt: DateTime
  id: String
  subscriptionPayments: SubscriptionPaymentUpdateManyWithoutSubscriptionIdInput
  updatedAt: DateTime
}

input SubscriptionUpdateWithoutSubscriptionPaymentsDataInput {
  companyId: CompanyUpdateOneRequiredWithoutSubscriptionsInput
  createdAt: DateTime
  id: String
  subscriptionDiscounts: SubscriptionDiscountUpdateManyWithoutSubscriptionIdInput
  updatedAt: DateTime
}

input SubscriptionUpdateWithWhereUniqueWithoutCompanyIdInput {
  data: SubscriptionUpdateWithoutCompanyIdDataInput!
  where: SubscriptionWhereUniqueInput!
}

input SubscriptionUpsertWithoutSubscriptionDiscountsInput {
  create: SubscriptionCreateWithoutSubscriptionDiscountsInput!
  update: SubscriptionUpdateWithoutSubscriptionDiscountsDataInput!
}

input SubscriptionUpsertWithoutSubscriptionPaymentsInput {
  create: SubscriptionCreateWithoutSubscriptionPaymentsInput!
  update: SubscriptionUpdateWithoutSubscriptionPaymentsDataInput!
}

input SubscriptionUpsertWithWhereUniqueWithoutCompanyIdInput {
  create: SubscriptionCreateWithoutCompanyIdInput!
  update: SubscriptionUpdateWithoutCompanyIdDataInput!
  where: SubscriptionWhereUniqueInput!
}

input SubscriptionWhereInput {
  AND: [SubscriptionWhereInput!]
  companyId: CompanyWhereInput
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [SubscriptionWhereInput!]
  OR: [SubscriptionWhereInput!]
  subscriptionDiscounts: SubscriptionDiscountFilter
  subscriptionPayments: SubscriptionPaymentFilter
  updatedAt: DateTimeFilter
}

input SubscriptionWhereUniqueInput {
  id: String
}

type Supplier {
  addresses(after: AddressWhereUniqueInput, before: AddressWhereUniqueInput, first: Int, last: Int, skip: Int): [Address!]!
  companyId: Company!
  contacts(after: ContactWhereUniqueInput, before: ContactWhereUniqueInput, first: Int, last: Int, skip: Int): [Contact!]!
  createdAt: DateTime!
  id: String!
  name: String!
  projects(after: ProjectWhereUniqueInput, before: ProjectWhereUniqueInput, first: Int, last: Int, skip: Int): [Project!]!
  updatedAt: DateTime!
  userId: User
}

input SupplierCreateInput {
  addresses: AddressCreateManyWithoutSuppliersInput
  companyId: CompanyCreateOneWithoutSuppliersInput!
  contacts: ContactCreateManyWithoutSuppliersInput
  createdAt: DateTime
  id: String
  name: String!
  projects: ProjectCreateManyWithoutSuppliersInput
  proposals: ProposalCreateManyWithoutSupplierIdInput
  supplierNotes: SupplierNoteCreateManyWithoutSupplierIdInput
  updatedAt: DateTime
  userId: UserCreateOneWithoutSuppliersInput
}

input SupplierCreateManyWithoutAddressesInput {
  connect: [SupplierWhereUniqueInput!]
  create: [SupplierCreateWithoutAddressesInput!]
}

input SupplierCreateManyWithoutCompanyIdInput {
  connect: [SupplierWhereUniqueInput!]
  create: [SupplierCreateWithoutCompanyIdInput!]
}

input SupplierCreateManyWithoutContactsInput {
  connect: [SupplierWhereUniqueInput!]
  create: [SupplierCreateWithoutContactsInput!]
}

input SupplierCreateManyWithoutProjectsInput {
  connect: [SupplierWhereUniqueInput!]
  create: [SupplierCreateWithoutProjectsInput!]
}

input SupplierCreateManyWithoutUserIdInput {
  connect: [SupplierWhereUniqueInput!]
  create: [SupplierCreateWithoutUserIdInput!]
}

input SupplierCreateOneWithoutProposalsInput {
  connect: SupplierWhereUniqueInput
  create: SupplierCreateWithoutProposalsInput
}

input SupplierCreateOneWithoutSupplierNotesInput {
  connect: SupplierWhereUniqueInput
  create: SupplierCreateWithoutSupplierNotesInput
}

input SupplierCreateWithoutAddressesInput {
  companyId: CompanyCreateOneWithoutSuppliersInput!
  contacts: ContactCreateManyWithoutSuppliersInput
  createdAt: DateTime
  id: String
  name: String!
  projects: ProjectCreateManyWithoutSuppliersInput
  proposals: ProposalCreateManyWithoutSupplierIdInput
  supplierNotes: SupplierNoteCreateManyWithoutSupplierIdInput
  updatedAt: DateTime
  userId: UserCreateOneWithoutSuppliersInput
}

input SupplierCreateWithoutCompanyIdInput {
  addresses: AddressCreateManyWithoutSuppliersInput
  contacts: ContactCreateManyWithoutSuppliersInput
  createdAt: DateTime
  id: String
  name: String!
  projects: ProjectCreateManyWithoutSuppliersInput
  proposals: ProposalCreateManyWithoutSupplierIdInput
  supplierNotes: SupplierNoteCreateManyWithoutSupplierIdInput
  updatedAt: DateTime
  userId: UserCreateOneWithoutSuppliersInput
}

input SupplierCreateWithoutContactsInput {
  addresses: AddressCreateManyWithoutSuppliersInput
  companyId: CompanyCreateOneWithoutSuppliersInput!
  createdAt: DateTime
  id: String
  name: String!
  projects: ProjectCreateManyWithoutSuppliersInput
  proposals: ProposalCreateManyWithoutSupplierIdInput
  supplierNotes: SupplierNoteCreateManyWithoutSupplierIdInput
  updatedAt: DateTime
  userId: UserCreateOneWithoutSuppliersInput
}

input SupplierCreateWithoutProjectsInput {
  addresses: AddressCreateManyWithoutSuppliersInput
  companyId: CompanyCreateOneWithoutSuppliersInput!
  contacts: ContactCreateManyWithoutSuppliersInput
  createdAt: DateTime
  id: String
  name: String!
  proposals: ProposalCreateManyWithoutSupplierIdInput
  supplierNotes: SupplierNoteCreateManyWithoutSupplierIdInput
  updatedAt: DateTime
  userId: UserCreateOneWithoutSuppliersInput
}

input SupplierCreateWithoutProposalsInput {
  addresses: AddressCreateManyWithoutSuppliersInput
  companyId: CompanyCreateOneWithoutSuppliersInput!
  contacts: ContactCreateManyWithoutSuppliersInput
  createdAt: DateTime
  id: String
  name: String!
  projects: ProjectCreateManyWithoutSuppliersInput
  supplierNotes: SupplierNoteCreateManyWithoutSupplierIdInput
  updatedAt: DateTime
  userId: UserCreateOneWithoutSuppliersInput
}

input SupplierCreateWithoutSupplierNotesInput {
  addresses: AddressCreateManyWithoutSuppliersInput
  companyId: CompanyCreateOneWithoutSuppliersInput!
  contacts: ContactCreateManyWithoutSuppliersInput
  createdAt: DateTime
  id: String
  name: String!
  projects: ProjectCreateManyWithoutSuppliersInput
  proposals: ProposalCreateManyWithoutSupplierIdInput
  updatedAt: DateTime
  userId: UserCreateOneWithoutSuppliersInput
}

input SupplierCreateWithoutUserIdInput {
  addresses: AddressCreateManyWithoutSuppliersInput
  companyId: CompanyCreateOneWithoutSuppliersInput!
  contacts: ContactCreateManyWithoutSuppliersInput
  createdAt: DateTime
  id: String
  name: String!
  projects: ProjectCreateManyWithoutSuppliersInput
  proposals: ProposalCreateManyWithoutSupplierIdInput
  supplierNotes: SupplierNoteCreateManyWithoutSupplierIdInput
  updatedAt: DateTime
}

input SupplierFilter {
  every: SupplierWhereInput
  none: SupplierWhereInput
  some: SupplierWhereInput
}

type SupplierNote {
  createdAt: DateTime!
  id: String!
  note: String!
  supplierId: Supplier!
}

input SupplierNoteCreateInput {
  createdAt: DateTime
  id: String
  note: String!
  supplierId: SupplierCreateOneWithoutSupplierNotesInput!
}

input SupplierNoteCreateManyWithoutSupplierIdInput {
  connect: [SupplierNoteWhereUniqueInput!]
  create: [SupplierNoteCreateWithoutSupplierIdInput!]
}

input SupplierNoteCreateWithoutSupplierIdInput {
  createdAt: DateTime
  id: String
  note: String!
}

input SupplierNoteFilter {
  every: SupplierNoteWhereInput
  none: SupplierNoteWhereInput
  some: SupplierNoteWhereInput
}

input SupplierNoteScalarWhereInput {
  AND: [SupplierNoteScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [SupplierNoteScalarWhereInput!]
  note: StringFilter
  OR: [SupplierNoteScalarWhereInput!]
}

input SupplierNoteUpdateInput {
  createdAt: DateTime
  id: String
  note: String
  supplierId: SupplierUpdateOneRequiredWithoutSupplierNotesInput
}

input SupplierNoteUpdateManyDataInput {
  createdAt: DateTime
  id: String
  note: String
}

input SupplierNoteUpdateManyMutationInput {
  createdAt: DateTime
  id: String
  note: String
}

input SupplierNoteUpdateManyWithoutSupplierIdInput {
  connect: [SupplierNoteWhereUniqueInput!]
  create: [SupplierNoteCreateWithoutSupplierIdInput!]
  delete: [SupplierNoteWhereUniqueInput!]
  deleteMany: [SupplierNoteScalarWhereInput!]
  disconnect: [SupplierNoteWhereUniqueInput!]
  set: [SupplierNoteWhereUniqueInput!]
  update: [SupplierNoteUpdateWithWhereUniqueWithoutSupplierIdInput!]
  updateMany: [SupplierNoteUpdateManyWithWhereNestedInput!]
  upsert: [SupplierNoteUpsertWithWhereUniqueWithoutSupplierIdInput!]
}

input SupplierNoteUpdateManyWithWhereNestedInput {
  data: SupplierNoteUpdateManyDataInput!
  where: SupplierNoteScalarWhereInput!
}

input SupplierNoteUpdateWithoutSupplierIdDataInput {
  createdAt: DateTime
  id: String
  note: String
}

input SupplierNoteUpdateWithWhereUniqueWithoutSupplierIdInput {
  data: SupplierNoteUpdateWithoutSupplierIdDataInput!
  where: SupplierNoteWhereUniqueInput!
}

input SupplierNoteUpsertWithWhereUniqueWithoutSupplierIdInput {
  create: SupplierNoteCreateWithoutSupplierIdInput!
  update: SupplierNoteUpdateWithoutSupplierIdDataInput!
  where: SupplierNoteWhereUniqueInput!
}

input SupplierNoteWhereInput {
  AND: [SupplierNoteWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [SupplierNoteWhereInput!]
  note: StringFilter
  OR: [SupplierNoteWhereInput!]
  supplierId: SupplierWhereInput
}

input SupplierNoteWhereUniqueInput {
  id: String
}

input SupplierScalarWhereInput {
  addresses: AddressFilter
  AND: [SupplierScalarWhereInput!]
  contacts: ContactFilter
  createdAt: DateTimeFilter
  id: StringFilter
  name: StringFilter
  NOT: [SupplierScalarWhereInput!]
  OR: [SupplierScalarWhereInput!]
  projects: ProjectFilter
  proposals: ProposalFilter
  supplierNotes: SupplierNoteFilter
  updatedAt: DateTimeFilter
}

input SupplierUpdateInput {
  addresses: AddressUpdateManyWithoutSuppliersInput
  companyId: CompanyUpdateOneRequiredWithoutSuppliersInput
  contacts: ContactUpdateManyWithoutSuppliersInput
  createdAt: DateTime
  id: String
  name: String
  projects: ProjectUpdateManyWithoutSuppliersInput
  proposals: ProposalUpdateManyWithoutSupplierIdInput
  supplierNotes: SupplierNoteUpdateManyWithoutSupplierIdInput
  updatedAt: DateTime
  userId: UserUpdateOneWithoutSuppliersInput
}

input SupplierUpdateManyDataInput {
  createdAt: DateTime
  id: String
  name: String
  updatedAt: DateTime
}

input SupplierUpdateManyMutationInput {
  createdAt: DateTime
  id: String
  name: String
  updatedAt: DateTime
}

input SupplierUpdateManyWithoutAddressesInput {
  connect: [SupplierWhereUniqueInput!]
  create: [SupplierCreateWithoutAddressesInput!]
  delete: [SupplierWhereUniqueInput!]
  deleteMany: [SupplierScalarWhereInput!]
  disconnect: [SupplierWhereUniqueInput!]
  set: [SupplierWhereUniqueInput!]
  update: [SupplierUpdateWithWhereUniqueWithoutAddressesInput!]
  updateMany: [SupplierUpdateManyWithWhereNestedInput!]
  upsert: [SupplierUpsertWithWhereUniqueWithoutAddressesInput!]
}

input SupplierUpdateManyWithoutCompanyIdInput {
  connect: [SupplierWhereUniqueInput!]
  create: [SupplierCreateWithoutCompanyIdInput!]
  delete: [SupplierWhereUniqueInput!]
  deleteMany: [SupplierScalarWhereInput!]
  disconnect: [SupplierWhereUniqueInput!]
  set: [SupplierWhereUniqueInput!]
  update: [SupplierUpdateWithWhereUniqueWithoutCompanyIdInput!]
  updateMany: [SupplierUpdateManyWithWhereNestedInput!]
  upsert: [SupplierUpsertWithWhereUniqueWithoutCompanyIdInput!]
}

input SupplierUpdateManyWithoutContactsInput {
  connect: [SupplierWhereUniqueInput!]
  create: [SupplierCreateWithoutContactsInput!]
  delete: [SupplierWhereUniqueInput!]
  deleteMany: [SupplierScalarWhereInput!]
  disconnect: [SupplierWhereUniqueInput!]
  set: [SupplierWhereUniqueInput!]
  update: [SupplierUpdateWithWhereUniqueWithoutContactsInput!]
  updateMany: [SupplierUpdateManyWithWhereNestedInput!]
  upsert: [SupplierUpsertWithWhereUniqueWithoutContactsInput!]
}

input SupplierUpdateManyWithoutProjectsInput {
  connect: [SupplierWhereUniqueInput!]
  create: [SupplierCreateWithoutProjectsInput!]
  delete: [SupplierWhereUniqueInput!]
  deleteMany: [SupplierScalarWhereInput!]
  disconnect: [SupplierWhereUniqueInput!]
  set: [SupplierWhereUniqueInput!]
  update: [SupplierUpdateWithWhereUniqueWithoutProjectsInput!]
  updateMany: [SupplierUpdateManyWithWhereNestedInput!]
  upsert: [SupplierUpsertWithWhereUniqueWithoutProjectsInput!]
}

input SupplierUpdateManyWithoutUserIdInput {
  connect: [SupplierWhereUniqueInput!]
  create: [SupplierCreateWithoutUserIdInput!]
  delete: [SupplierWhereUniqueInput!]
  deleteMany: [SupplierScalarWhereInput!]
  disconnect: [SupplierWhereUniqueInput!]
  set: [SupplierWhereUniqueInput!]
  update: [SupplierUpdateWithWhereUniqueWithoutUserIdInput!]
  updateMany: [SupplierUpdateManyWithWhereNestedInput!]
  upsert: [SupplierUpsertWithWhereUniqueWithoutUserIdInput!]
}

input SupplierUpdateManyWithWhereNestedInput {
  data: SupplierUpdateManyDataInput!
  where: SupplierScalarWhereInput!
}

input SupplierUpdateOneRequiredWithoutSupplierNotesInput {
  connect: SupplierWhereUniqueInput
  create: SupplierCreateWithoutSupplierNotesInput
  update: SupplierUpdateWithoutSupplierNotesDataInput
  upsert: SupplierUpsertWithoutSupplierNotesInput
}

input SupplierUpdateOneWithoutProposalsInput {
  connect: SupplierWhereUniqueInput
  create: SupplierCreateWithoutProposalsInput
  delete: Boolean
  disconnect: Boolean
  update: SupplierUpdateWithoutProposalsDataInput
  upsert: SupplierUpsertWithoutProposalsInput
}

input SupplierUpdateWithoutAddressesDataInput {
  companyId: CompanyUpdateOneRequiredWithoutSuppliersInput
  contacts: ContactUpdateManyWithoutSuppliersInput
  createdAt: DateTime
  id: String
  name: String
  projects: ProjectUpdateManyWithoutSuppliersInput
  proposals: ProposalUpdateManyWithoutSupplierIdInput
  supplierNotes: SupplierNoteUpdateManyWithoutSupplierIdInput
  updatedAt: DateTime
  userId: UserUpdateOneWithoutSuppliersInput
}

input SupplierUpdateWithoutCompanyIdDataInput {
  addresses: AddressUpdateManyWithoutSuppliersInput
  contacts: ContactUpdateManyWithoutSuppliersInput
  createdAt: DateTime
  id: String
  name: String
  projects: ProjectUpdateManyWithoutSuppliersInput
  proposals: ProposalUpdateManyWithoutSupplierIdInput
  supplierNotes: SupplierNoteUpdateManyWithoutSupplierIdInput
  updatedAt: DateTime
  userId: UserUpdateOneWithoutSuppliersInput
}

input SupplierUpdateWithoutContactsDataInput {
  addresses: AddressUpdateManyWithoutSuppliersInput
  companyId: CompanyUpdateOneRequiredWithoutSuppliersInput
  createdAt: DateTime
  id: String
  name: String
  projects: ProjectUpdateManyWithoutSuppliersInput
  proposals: ProposalUpdateManyWithoutSupplierIdInput
  supplierNotes: SupplierNoteUpdateManyWithoutSupplierIdInput
  updatedAt: DateTime
  userId: UserUpdateOneWithoutSuppliersInput
}

input SupplierUpdateWithoutProjectsDataInput {
  addresses: AddressUpdateManyWithoutSuppliersInput
  companyId: CompanyUpdateOneRequiredWithoutSuppliersInput
  contacts: ContactUpdateManyWithoutSuppliersInput
  createdAt: DateTime
  id: String
  name: String
  proposals: ProposalUpdateManyWithoutSupplierIdInput
  supplierNotes: SupplierNoteUpdateManyWithoutSupplierIdInput
  updatedAt: DateTime
  userId: UserUpdateOneWithoutSuppliersInput
}

input SupplierUpdateWithoutProposalsDataInput {
  addresses: AddressUpdateManyWithoutSuppliersInput
  companyId: CompanyUpdateOneRequiredWithoutSuppliersInput
  contacts: ContactUpdateManyWithoutSuppliersInput
  createdAt: DateTime
  id: String
  name: String
  projects: ProjectUpdateManyWithoutSuppliersInput
  supplierNotes: SupplierNoteUpdateManyWithoutSupplierIdInput
  updatedAt: DateTime
  userId: UserUpdateOneWithoutSuppliersInput
}

input SupplierUpdateWithoutSupplierNotesDataInput {
  addresses: AddressUpdateManyWithoutSuppliersInput
  companyId: CompanyUpdateOneRequiredWithoutSuppliersInput
  contacts: ContactUpdateManyWithoutSuppliersInput
  createdAt: DateTime
  id: String
  name: String
  projects: ProjectUpdateManyWithoutSuppliersInput
  proposals: ProposalUpdateManyWithoutSupplierIdInput
  updatedAt: DateTime
  userId: UserUpdateOneWithoutSuppliersInput
}

input SupplierUpdateWithoutUserIdDataInput {
  addresses: AddressUpdateManyWithoutSuppliersInput
  companyId: CompanyUpdateOneRequiredWithoutSuppliersInput
  contacts: ContactUpdateManyWithoutSuppliersInput
  createdAt: DateTime
  id: String
  name: String
  projects: ProjectUpdateManyWithoutSuppliersInput
  proposals: ProposalUpdateManyWithoutSupplierIdInput
  supplierNotes: SupplierNoteUpdateManyWithoutSupplierIdInput
  updatedAt: DateTime
}

input SupplierUpdateWithWhereUniqueWithoutAddressesInput {
  data: SupplierUpdateWithoutAddressesDataInput!
  where: SupplierWhereUniqueInput!
}

input SupplierUpdateWithWhereUniqueWithoutCompanyIdInput {
  data: SupplierUpdateWithoutCompanyIdDataInput!
  where: SupplierWhereUniqueInput!
}

input SupplierUpdateWithWhereUniqueWithoutContactsInput {
  data: SupplierUpdateWithoutContactsDataInput!
  where: SupplierWhereUniqueInput!
}

input SupplierUpdateWithWhereUniqueWithoutProjectsInput {
  data: SupplierUpdateWithoutProjectsDataInput!
  where: SupplierWhereUniqueInput!
}

input SupplierUpdateWithWhereUniqueWithoutUserIdInput {
  data: SupplierUpdateWithoutUserIdDataInput!
  where: SupplierWhereUniqueInput!
}

input SupplierUpsertWithoutProposalsInput {
  create: SupplierCreateWithoutProposalsInput!
  update: SupplierUpdateWithoutProposalsDataInput!
}

input SupplierUpsertWithoutSupplierNotesInput {
  create: SupplierCreateWithoutSupplierNotesInput!
  update: SupplierUpdateWithoutSupplierNotesDataInput!
}

input SupplierUpsertWithWhereUniqueWithoutAddressesInput {
  create: SupplierCreateWithoutAddressesInput!
  update: SupplierUpdateWithoutAddressesDataInput!
  where: SupplierWhereUniqueInput!
}

input SupplierUpsertWithWhereUniqueWithoutCompanyIdInput {
  create: SupplierCreateWithoutCompanyIdInput!
  update: SupplierUpdateWithoutCompanyIdDataInput!
  where: SupplierWhereUniqueInput!
}

input SupplierUpsertWithWhereUniqueWithoutContactsInput {
  create: SupplierCreateWithoutContactsInput!
  update: SupplierUpdateWithoutContactsDataInput!
  where: SupplierWhereUniqueInput!
}

input SupplierUpsertWithWhereUniqueWithoutProjectsInput {
  create: SupplierCreateWithoutProjectsInput!
  update: SupplierUpdateWithoutProjectsDataInput!
  where: SupplierWhereUniqueInput!
}

input SupplierUpsertWithWhereUniqueWithoutUserIdInput {
  create: SupplierCreateWithoutUserIdInput!
  update: SupplierUpdateWithoutUserIdDataInput!
  where: SupplierWhereUniqueInput!
}

input SupplierWhereInput {
  addresses: AddressFilter
  AND: [SupplierWhereInput!]
  companyId: CompanyWhereInput
  contacts: ContactFilter
  createdAt: DateTimeFilter
  id: StringFilter
  name: StringFilter
  NOT: [SupplierWhereInput!]
  OR: [SupplierWhereInput!]
  projects: ProjectFilter
  proposals: ProposalFilter
  supplierNotes: SupplierNoteFilter
  updatedAt: DateTimeFilter
  userId: UserWhereInput
}

input SupplierWhereUniqueInput {
  id: String
}

type User {
  auth0Id: String!
  createdAt: DateTime!
  email: String!
  firstName: String!
  id: String!
  lastLogin: DateTime
  lastName: String!
  profileImg: String
  profileThumb: String
  socialSignIn: String
  updatedAt: DateTime!
  userName: String
}

input UserCreateInput {
  auth0Id: String!
  changeOrders: ChangeOrderCreateManyWithoutRequestedByUserIdInput
  clients: ClientCreateManyWithoutUserIdInput
  companies: CompanyCreateManyWithoutUserIdInput
  createdAt: DateTime
  email: String!
  firstName: String!
  hasOnboarded: Boolean
  id: String
  invitations: InvitationCreateManyWithoutInviterUserIdInput
  invoicePayments: InvoicePaymentCreateManyWithoutPaidByUserIdInput
  invoices: InvoiceCreateManyWithoutInvoiceOwnerIdInput
  lastLogin: DateTime
  lastName: String!
  profileImg: String
  profileThumb: String
  proposals: ProposalCreateManyWithoutProposalOwnerIdInput
  referrals: ReferralCreateManyWithoutUserIdInput
  shareLinks: ShareLinkCreateManyWithoutSenderUserIdInput
  socialSignIn: String
  suppliers: SupplierCreateManyWithoutUserIdInput
  updatedAt: DateTime
  userName: String
  userNotifications: UserNotificationCreateManyWithoutUserIdInput
  userRoles: UserRoleCreateManyWithoutUserIdInput
}

input UserCreateOneWithoutChangeOrdersInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutChangeOrdersInput
}

input UserCreateOneWithoutClientsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutClientsInput
}

input UserCreateOneWithoutCompaniesInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutCompaniesInput
}

input UserCreateOneWithoutInvitationsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutInvitationsInput
}

input UserCreateOneWithoutInvoicePaymentsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutInvoicePaymentsInput
}

input UserCreateOneWithoutInvoicesInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutInvoicesInput
}

input UserCreateOneWithoutProposalsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutProposalsInput
}

input UserCreateOneWithoutReferralsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutReferralsInput
}

input UserCreateOneWithoutShareLinksInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutShareLinksInput
}

input UserCreateOneWithoutSuppliersInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutSuppliersInput
}

input UserCreateOneWithoutUserNotificationsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutUserNotificationsInput
}

input UserCreateOneWithoutUserRolesInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutUserRolesInput
}

input UserCreateWithoutChangeOrdersInput {
  auth0Id: String!
  clients: ClientCreateManyWithoutUserIdInput
  companies: CompanyCreateManyWithoutUserIdInput
  createdAt: DateTime
  email: String!
  firstName: String!
  hasOnboarded: Boolean
  id: String
  invitations: InvitationCreateManyWithoutInviterUserIdInput
  invoicePayments: InvoicePaymentCreateManyWithoutPaidByUserIdInput
  invoices: InvoiceCreateManyWithoutInvoiceOwnerIdInput
  lastLogin: DateTime
  lastName: String!
  profileImg: String
  profileThumb: String
  proposals: ProposalCreateManyWithoutProposalOwnerIdInput
  referrals: ReferralCreateManyWithoutUserIdInput
  shareLinks: ShareLinkCreateManyWithoutSenderUserIdInput
  socialSignIn: String
  suppliers: SupplierCreateManyWithoutUserIdInput
  updatedAt: DateTime
  userName: String
  userNotifications: UserNotificationCreateManyWithoutUserIdInput
  userRoles: UserRoleCreateManyWithoutUserIdInput
}

input UserCreateWithoutClientsInput {
  auth0Id: String!
  changeOrders: ChangeOrderCreateManyWithoutRequestedByUserIdInput
  companies: CompanyCreateManyWithoutUserIdInput
  createdAt: DateTime
  email: String!
  firstName: String!
  hasOnboarded: Boolean
  id: String
  invitations: InvitationCreateManyWithoutInviterUserIdInput
  invoicePayments: InvoicePaymentCreateManyWithoutPaidByUserIdInput
  invoices: InvoiceCreateManyWithoutInvoiceOwnerIdInput
  lastLogin: DateTime
  lastName: String!
  profileImg: String
  profileThumb: String
  proposals: ProposalCreateManyWithoutProposalOwnerIdInput
  referrals: ReferralCreateManyWithoutUserIdInput
  shareLinks: ShareLinkCreateManyWithoutSenderUserIdInput
  socialSignIn: String
  suppliers: SupplierCreateManyWithoutUserIdInput
  updatedAt: DateTime
  userName: String
  userNotifications: UserNotificationCreateManyWithoutUserIdInput
  userRoles: UserRoleCreateManyWithoutUserIdInput
}

input UserCreateWithoutCompaniesInput {
  auth0Id: String!
  changeOrders: ChangeOrderCreateManyWithoutRequestedByUserIdInput
  clients: ClientCreateManyWithoutUserIdInput
  createdAt: DateTime
  email: String!
  firstName: String!
  hasOnboarded: Boolean
  id: String
  invitations: InvitationCreateManyWithoutInviterUserIdInput
  invoicePayments: InvoicePaymentCreateManyWithoutPaidByUserIdInput
  invoices: InvoiceCreateManyWithoutInvoiceOwnerIdInput
  lastLogin: DateTime
  lastName: String!
  profileImg: String
  profileThumb: String
  proposals: ProposalCreateManyWithoutProposalOwnerIdInput
  referrals: ReferralCreateManyWithoutUserIdInput
  shareLinks: ShareLinkCreateManyWithoutSenderUserIdInput
  socialSignIn: String
  suppliers: SupplierCreateManyWithoutUserIdInput
  updatedAt: DateTime
  userName: String
  userNotifications: UserNotificationCreateManyWithoutUserIdInput
  userRoles: UserRoleCreateManyWithoutUserIdInput
}

input UserCreateWithoutInvitationsInput {
  auth0Id: String!
  changeOrders: ChangeOrderCreateManyWithoutRequestedByUserIdInput
  clients: ClientCreateManyWithoutUserIdInput
  companies: CompanyCreateManyWithoutUserIdInput
  createdAt: DateTime
  email: String!
  firstName: String!
  hasOnboarded: Boolean
  id: String
  invoicePayments: InvoicePaymentCreateManyWithoutPaidByUserIdInput
  invoices: InvoiceCreateManyWithoutInvoiceOwnerIdInput
  lastLogin: DateTime
  lastName: String!
  profileImg: String
  profileThumb: String
  proposals: ProposalCreateManyWithoutProposalOwnerIdInput
  referrals: ReferralCreateManyWithoutUserIdInput
  shareLinks: ShareLinkCreateManyWithoutSenderUserIdInput
  socialSignIn: String
  suppliers: SupplierCreateManyWithoutUserIdInput
  updatedAt: DateTime
  userName: String
  userNotifications: UserNotificationCreateManyWithoutUserIdInput
  userRoles: UserRoleCreateManyWithoutUserIdInput
}

input UserCreateWithoutInvoicePaymentsInput {
  auth0Id: String!
  changeOrders: ChangeOrderCreateManyWithoutRequestedByUserIdInput
  clients: ClientCreateManyWithoutUserIdInput
  companies: CompanyCreateManyWithoutUserIdInput
  createdAt: DateTime
  email: String!
  firstName: String!
  hasOnboarded: Boolean
  id: String
  invitations: InvitationCreateManyWithoutInviterUserIdInput
  invoices: InvoiceCreateManyWithoutInvoiceOwnerIdInput
  lastLogin: DateTime
  lastName: String!
  profileImg: String
  profileThumb: String
  proposals: ProposalCreateManyWithoutProposalOwnerIdInput
  referrals: ReferralCreateManyWithoutUserIdInput
  shareLinks: ShareLinkCreateManyWithoutSenderUserIdInput
  socialSignIn: String
  suppliers: SupplierCreateManyWithoutUserIdInput
  updatedAt: DateTime
  userName: String
  userNotifications: UserNotificationCreateManyWithoutUserIdInput
  userRoles: UserRoleCreateManyWithoutUserIdInput
}

input UserCreateWithoutInvoicesInput {
  auth0Id: String!
  changeOrders: ChangeOrderCreateManyWithoutRequestedByUserIdInput
  clients: ClientCreateManyWithoutUserIdInput
  companies: CompanyCreateManyWithoutUserIdInput
  createdAt: DateTime
  email: String!
  firstName: String!
  hasOnboarded: Boolean
  id: String
  invitations: InvitationCreateManyWithoutInviterUserIdInput
  invoicePayments: InvoicePaymentCreateManyWithoutPaidByUserIdInput
  lastLogin: DateTime
  lastName: String!
  profileImg: String
  profileThumb: String
  proposals: ProposalCreateManyWithoutProposalOwnerIdInput
  referrals: ReferralCreateManyWithoutUserIdInput
  shareLinks: ShareLinkCreateManyWithoutSenderUserIdInput
  socialSignIn: String
  suppliers: SupplierCreateManyWithoutUserIdInput
  updatedAt: DateTime
  userName: String
  userNotifications: UserNotificationCreateManyWithoutUserIdInput
  userRoles: UserRoleCreateManyWithoutUserIdInput
}

input UserCreateWithoutProposalsInput {
  auth0Id: String!
  changeOrders: ChangeOrderCreateManyWithoutRequestedByUserIdInput
  clients: ClientCreateManyWithoutUserIdInput
  companies: CompanyCreateManyWithoutUserIdInput
  createdAt: DateTime
  email: String!
  firstName: String!
  hasOnboarded: Boolean
  id: String
  invitations: InvitationCreateManyWithoutInviterUserIdInput
  invoicePayments: InvoicePaymentCreateManyWithoutPaidByUserIdInput
  invoices: InvoiceCreateManyWithoutInvoiceOwnerIdInput
  lastLogin: DateTime
  lastName: String!
  profileImg: String
  profileThumb: String
  referrals: ReferralCreateManyWithoutUserIdInput
  shareLinks: ShareLinkCreateManyWithoutSenderUserIdInput
  socialSignIn: String
  suppliers: SupplierCreateManyWithoutUserIdInput
  updatedAt: DateTime
  userName: String
  userNotifications: UserNotificationCreateManyWithoutUserIdInput
  userRoles: UserRoleCreateManyWithoutUserIdInput
}

input UserCreateWithoutReferralsInput {
  auth0Id: String!
  changeOrders: ChangeOrderCreateManyWithoutRequestedByUserIdInput
  clients: ClientCreateManyWithoutUserIdInput
  companies: CompanyCreateManyWithoutUserIdInput
  createdAt: DateTime
  email: String!
  firstName: String!
  hasOnboarded: Boolean
  id: String
  invitations: InvitationCreateManyWithoutInviterUserIdInput
  invoicePayments: InvoicePaymentCreateManyWithoutPaidByUserIdInput
  invoices: InvoiceCreateManyWithoutInvoiceOwnerIdInput
  lastLogin: DateTime
  lastName: String!
  profileImg: String
  profileThumb: String
  proposals: ProposalCreateManyWithoutProposalOwnerIdInput
  shareLinks: ShareLinkCreateManyWithoutSenderUserIdInput
  socialSignIn: String
  suppliers: SupplierCreateManyWithoutUserIdInput
  updatedAt: DateTime
  userName: String
  userNotifications: UserNotificationCreateManyWithoutUserIdInput
  userRoles: UserRoleCreateManyWithoutUserIdInput
}

input UserCreateWithoutShareLinksInput {
  auth0Id: String!
  changeOrders: ChangeOrderCreateManyWithoutRequestedByUserIdInput
  clients: ClientCreateManyWithoutUserIdInput
  companies: CompanyCreateManyWithoutUserIdInput
  createdAt: DateTime
  email: String!
  firstName: String!
  hasOnboarded: Boolean
  id: String
  invitations: InvitationCreateManyWithoutInviterUserIdInput
  invoicePayments: InvoicePaymentCreateManyWithoutPaidByUserIdInput
  invoices: InvoiceCreateManyWithoutInvoiceOwnerIdInput
  lastLogin: DateTime
  lastName: String!
  profileImg: String
  profileThumb: String
  proposals: ProposalCreateManyWithoutProposalOwnerIdInput
  referrals: ReferralCreateManyWithoutUserIdInput
  socialSignIn: String
  suppliers: SupplierCreateManyWithoutUserIdInput
  updatedAt: DateTime
  userName: String
  userNotifications: UserNotificationCreateManyWithoutUserIdInput
  userRoles: UserRoleCreateManyWithoutUserIdInput
}

input UserCreateWithoutSuppliersInput {
  auth0Id: String!
  changeOrders: ChangeOrderCreateManyWithoutRequestedByUserIdInput
  clients: ClientCreateManyWithoutUserIdInput
  companies: CompanyCreateManyWithoutUserIdInput
  createdAt: DateTime
  email: String!
  firstName: String!
  hasOnboarded: Boolean
  id: String
  invitations: InvitationCreateManyWithoutInviterUserIdInput
  invoicePayments: InvoicePaymentCreateManyWithoutPaidByUserIdInput
  invoices: InvoiceCreateManyWithoutInvoiceOwnerIdInput
  lastLogin: DateTime
  lastName: String!
  profileImg: String
  profileThumb: String
  proposals: ProposalCreateManyWithoutProposalOwnerIdInput
  referrals: ReferralCreateManyWithoutUserIdInput
  shareLinks: ShareLinkCreateManyWithoutSenderUserIdInput
  socialSignIn: String
  updatedAt: DateTime
  userName: String
  userNotifications: UserNotificationCreateManyWithoutUserIdInput
  userRoles: UserRoleCreateManyWithoutUserIdInput
}

input UserCreateWithoutUserNotificationsInput {
  auth0Id: String!
  changeOrders: ChangeOrderCreateManyWithoutRequestedByUserIdInput
  clients: ClientCreateManyWithoutUserIdInput
  companies: CompanyCreateManyWithoutUserIdInput
  createdAt: DateTime
  email: String!
  firstName: String!
  hasOnboarded: Boolean
  id: String
  invitations: InvitationCreateManyWithoutInviterUserIdInput
  invoicePayments: InvoicePaymentCreateManyWithoutPaidByUserIdInput
  invoices: InvoiceCreateManyWithoutInvoiceOwnerIdInput
  lastLogin: DateTime
  lastName: String!
  profileImg: String
  profileThumb: String
  proposals: ProposalCreateManyWithoutProposalOwnerIdInput
  referrals: ReferralCreateManyWithoutUserIdInput
  shareLinks: ShareLinkCreateManyWithoutSenderUserIdInput
  socialSignIn: String
  suppliers: SupplierCreateManyWithoutUserIdInput
  updatedAt: DateTime
  userName: String
  userRoles: UserRoleCreateManyWithoutUserIdInput
}

input UserCreateWithoutUserRolesInput {
  auth0Id: String!
  changeOrders: ChangeOrderCreateManyWithoutRequestedByUserIdInput
  clients: ClientCreateManyWithoutUserIdInput
  companies: CompanyCreateManyWithoutUserIdInput
  createdAt: DateTime
  email: String!
  firstName: String!
  hasOnboarded: Boolean
  id: String
  invitations: InvitationCreateManyWithoutInviterUserIdInput
  invoicePayments: InvoicePaymentCreateManyWithoutPaidByUserIdInput
  invoices: InvoiceCreateManyWithoutInvoiceOwnerIdInput
  lastLogin: DateTime
  lastName: String!
  profileImg: String
  profileThumb: String
  proposals: ProposalCreateManyWithoutProposalOwnerIdInput
  referrals: ReferralCreateManyWithoutUserIdInput
  shareLinks: ShareLinkCreateManyWithoutSenderUserIdInput
  socialSignIn: String
  suppliers: SupplierCreateManyWithoutUserIdInput
  updatedAt: DateTime
  userName: String
  userNotifications: UserNotificationCreateManyWithoutUserIdInput
}

type UserNotification {
  archived: Boolean!
  createdAt: DateTime!
  description: String!
  id: String!
  new: Boolean!
  title: String!
  userId: User!
}

input UserNotificationCreateInput {
  archived: Boolean!
  createdAt: DateTime
  description: String!
  id: String
  new: Boolean!
  title: String!
  userId: UserCreateOneWithoutUserNotificationsInput!
}

input UserNotificationCreateManyWithoutUserIdInput {
  connect: [UserNotificationWhereUniqueInput!]
  create: [UserNotificationCreateWithoutUserIdInput!]
}

input UserNotificationCreateWithoutUserIdInput {
  archived: Boolean!
  createdAt: DateTime
  description: String!
  id: String
  new: Boolean!
  title: String!
}

input UserNotificationFilter {
  every: UserNotificationWhereInput
  none: UserNotificationWhereInput
  some: UserNotificationWhereInput
}

input UserNotificationScalarWhereInput {
  AND: [UserNotificationScalarWhereInput!]
  archived: BooleanFilter
  createdAt: DateTimeFilter
  description: StringFilter
  id: StringFilter
  new: BooleanFilter
  NOT: [UserNotificationScalarWhereInput!]
  OR: [UserNotificationScalarWhereInput!]
  title: StringFilter
}

input UserNotificationUpdateInput {
  archived: Boolean
  createdAt: DateTime
  description: String
  id: String
  new: Boolean
  title: String
  userId: UserUpdateOneRequiredWithoutUserNotificationsInput
}

input UserNotificationUpdateManyDataInput {
  archived: Boolean
  createdAt: DateTime
  description: String
  id: String
  new: Boolean
  title: String
}

input UserNotificationUpdateManyMutationInput {
  archived: Boolean
  createdAt: DateTime
  description: String
  id: String
  new: Boolean
  title: String
}

input UserNotificationUpdateManyWithoutUserIdInput {
  connect: [UserNotificationWhereUniqueInput!]
  create: [UserNotificationCreateWithoutUserIdInput!]
  delete: [UserNotificationWhereUniqueInput!]
  deleteMany: [UserNotificationScalarWhereInput!]
  disconnect: [UserNotificationWhereUniqueInput!]
  set: [UserNotificationWhereUniqueInput!]
  update: [UserNotificationUpdateWithWhereUniqueWithoutUserIdInput!]
  updateMany: [UserNotificationUpdateManyWithWhereNestedInput!]
  upsert: [UserNotificationUpsertWithWhereUniqueWithoutUserIdInput!]
}

input UserNotificationUpdateManyWithWhereNestedInput {
  data: UserNotificationUpdateManyDataInput!
  where: UserNotificationScalarWhereInput!
}

input UserNotificationUpdateWithoutUserIdDataInput {
  archived: Boolean
  createdAt: DateTime
  description: String
  id: String
  new: Boolean
  title: String
}

input UserNotificationUpdateWithWhereUniqueWithoutUserIdInput {
  data: UserNotificationUpdateWithoutUserIdDataInput!
  where: UserNotificationWhereUniqueInput!
}

input UserNotificationUpsertWithWhereUniqueWithoutUserIdInput {
  create: UserNotificationCreateWithoutUserIdInput!
  update: UserNotificationUpdateWithoutUserIdDataInput!
  where: UserNotificationWhereUniqueInput!
}

input UserNotificationWhereInput {
  AND: [UserNotificationWhereInput!]
  archived: BooleanFilter
  createdAt: DateTimeFilter
  description: StringFilter
  id: StringFilter
  new: BooleanFilter
  NOT: [UserNotificationWhereInput!]
  OR: [UserNotificationWhereInput!]
  title: StringFilter
  userId: UserWhereInput
}

input UserNotificationWhereUniqueInput {
  id: String
}

type UserRole {
  companyId: Company!
  createdAt: DateTime!
  id: String!
  projectId: Project!
  roleType: RoleType!
  updatedAt: DateTime!
  userId: User!
}

input UserRoleCreateInput {
  companyId: CompanyCreateOneWithoutUserRolesInput!
  createdAt: DateTime
  id: String
  projectId: ProjectCreateOneWithoutUserRolesInput!
  roleType: RoleType!
  updatedAt: DateTime
  userId: UserCreateOneWithoutUserRolesInput!
}

input UserRoleCreateManyWithoutCompanyIdInput {
  connect: [UserRoleWhereUniqueInput!]
  create: [UserRoleCreateWithoutCompanyIdInput!]
}

input UserRoleCreateManyWithoutProjectIdInput {
  connect: [UserRoleWhereUniqueInput!]
  create: [UserRoleCreateWithoutProjectIdInput!]
}

input UserRoleCreateManyWithoutUserIdInput {
  connect: [UserRoleWhereUniqueInput!]
  create: [UserRoleCreateWithoutUserIdInput!]
}

input UserRoleCreateWithoutCompanyIdInput {
  createdAt: DateTime
  id: String
  projectId: ProjectCreateOneWithoutUserRolesInput!
  roleType: RoleType!
  updatedAt: DateTime
  userId: UserCreateOneWithoutUserRolesInput!
}

input UserRoleCreateWithoutProjectIdInput {
  companyId: CompanyCreateOneWithoutUserRolesInput!
  createdAt: DateTime
  id: String
  roleType: RoleType!
  updatedAt: DateTime
  userId: UserCreateOneWithoutUserRolesInput!
}

input UserRoleCreateWithoutUserIdInput {
  companyId: CompanyCreateOneWithoutUserRolesInput!
  createdAt: DateTime
  id: String
  projectId: ProjectCreateOneWithoutUserRolesInput!
  roleType: RoleType!
  updatedAt: DateTime
}

input UserRoleFilter {
  every: UserRoleWhereInput
  none: UserRoleWhereInput
  some: UserRoleWhereInput
}

input UserRoleScalarWhereInput {
  AND: [UserRoleScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [UserRoleScalarWhereInput!]
  OR: [UserRoleScalarWhereInput!]
  roleType: RoleType
  updatedAt: DateTimeFilter
}

input UserRoleUpdateInput {
  companyId: CompanyUpdateOneRequiredWithoutUserRolesInput
  createdAt: DateTime
  id: String
  projectId: ProjectUpdateOneRequiredWithoutUserRolesInput
  roleType: RoleType
  updatedAt: DateTime
  userId: UserUpdateOneRequiredWithoutUserRolesInput
}

input UserRoleUpdateManyDataInput {
  createdAt: DateTime
  id: String
  roleType: RoleType
  updatedAt: DateTime
}

input UserRoleUpdateManyMutationInput {
  createdAt: DateTime
  id: String
  roleType: RoleType
  updatedAt: DateTime
}

input UserRoleUpdateManyWithoutCompanyIdInput {
  connect: [UserRoleWhereUniqueInput!]
  create: [UserRoleCreateWithoutCompanyIdInput!]
  delete: [UserRoleWhereUniqueInput!]
  deleteMany: [UserRoleScalarWhereInput!]
  disconnect: [UserRoleWhereUniqueInput!]
  set: [UserRoleWhereUniqueInput!]
  update: [UserRoleUpdateWithWhereUniqueWithoutCompanyIdInput!]
  updateMany: [UserRoleUpdateManyWithWhereNestedInput!]
  upsert: [UserRoleUpsertWithWhereUniqueWithoutCompanyIdInput!]
}

input UserRoleUpdateManyWithoutProjectIdInput {
  connect: [UserRoleWhereUniqueInput!]
  create: [UserRoleCreateWithoutProjectIdInput!]
  delete: [UserRoleWhereUniqueInput!]
  deleteMany: [UserRoleScalarWhereInput!]
  disconnect: [UserRoleWhereUniqueInput!]
  set: [UserRoleWhereUniqueInput!]
  update: [UserRoleUpdateWithWhereUniqueWithoutProjectIdInput!]
  updateMany: [UserRoleUpdateManyWithWhereNestedInput!]
  upsert: [UserRoleUpsertWithWhereUniqueWithoutProjectIdInput!]
}

input UserRoleUpdateManyWithoutUserIdInput {
  connect: [UserRoleWhereUniqueInput!]
  create: [UserRoleCreateWithoutUserIdInput!]
  delete: [UserRoleWhereUniqueInput!]
  deleteMany: [UserRoleScalarWhereInput!]
  disconnect: [UserRoleWhereUniqueInput!]
  set: [UserRoleWhereUniqueInput!]
  update: [UserRoleUpdateWithWhereUniqueWithoutUserIdInput!]
  updateMany: [UserRoleUpdateManyWithWhereNestedInput!]
  upsert: [UserRoleUpsertWithWhereUniqueWithoutUserIdInput!]
}

input UserRoleUpdateManyWithWhereNestedInput {
  data: UserRoleUpdateManyDataInput!
  where: UserRoleScalarWhereInput!
}

input UserRoleUpdateWithoutCompanyIdDataInput {
  createdAt: DateTime
  id: String
  projectId: ProjectUpdateOneRequiredWithoutUserRolesInput
  roleType: RoleType
  updatedAt: DateTime
  userId: UserUpdateOneRequiredWithoutUserRolesInput
}

input UserRoleUpdateWithoutProjectIdDataInput {
  companyId: CompanyUpdateOneRequiredWithoutUserRolesInput
  createdAt: DateTime
  id: String
  roleType: RoleType
  updatedAt: DateTime
  userId: UserUpdateOneRequiredWithoutUserRolesInput
}

input UserRoleUpdateWithoutUserIdDataInput {
  companyId: CompanyUpdateOneRequiredWithoutUserRolesInput
  createdAt: DateTime
  id: String
  projectId: ProjectUpdateOneRequiredWithoutUserRolesInput
  roleType: RoleType
  updatedAt: DateTime
}

input UserRoleUpdateWithWhereUniqueWithoutCompanyIdInput {
  data: UserRoleUpdateWithoutCompanyIdDataInput!
  where: UserRoleWhereUniqueInput!
}

input UserRoleUpdateWithWhereUniqueWithoutProjectIdInput {
  data: UserRoleUpdateWithoutProjectIdDataInput!
  where: UserRoleWhereUniqueInput!
}

input UserRoleUpdateWithWhereUniqueWithoutUserIdInput {
  data: UserRoleUpdateWithoutUserIdDataInput!
  where: UserRoleWhereUniqueInput!
}

input UserRoleUpsertWithWhereUniqueWithoutCompanyIdInput {
  create: UserRoleCreateWithoutCompanyIdInput!
  update: UserRoleUpdateWithoutCompanyIdDataInput!
  where: UserRoleWhereUniqueInput!
}

input UserRoleUpsertWithWhereUniqueWithoutProjectIdInput {
  create: UserRoleCreateWithoutProjectIdInput!
  update: UserRoleUpdateWithoutProjectIdDataInput!
  where: UserRoleWhereUniqueInput!
}

input UserRoleUpsertWithWhereUniqueWithoutUserIdInput {
  create: UserRoleCreateWithoutUserIdInput!
  update: UserRoleUpdateWithoutUserIdDataInput!
  where: UserRoleWhereUniqueInput!
}

input UserRoleWhereInput {
  AND: [UserRoleWhereInput!]
  companyId: CompanyWhereInput
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [UserRoleWhereInput!]
  OR: [UserRoleWhereInput!]
  projectId: ProjectWhereInput
  roleType: RoleType
  updatedAt: DateTimeFilter
  userId: UserWhereInput
}

input UserRoleWhereUniqueInput {
  id: String
}

input UserUpdateInput {
  auth0Id: String
  changeOrders: ChangeOrderUpdateManyWithoutRequestedByUserIdInput
  clients: ClientUpdateManyWithoutUserIdInput
  companies: CompanyUpdateManyWithoutUserIdInput
  createdAt: DateTime
  email: String
  firstName: String
  hasOnboarded: Boolean
  id: String
  invitations: InvitationUpdateManyWithoutInviterUserIdInput
  invoicePayments: InvoicePaymentUpdateManyWithoutPaidByUserIdInput
  invoices: InvoiceUpdateManyWithoutInvoiceOwnerIdInput
  lastLogin: DateTime
  lastName: String
  profileImg: String
  profileThumb: String
  proposals: ProposalUpdateManyWithoutProposalOwnerIdInput
  referrals: ReferralUpdateManyWithoutUserIdInput
  shareLinks: ShareLinkUpdateManyWithoutSenderUserIdInput
  socialSignIn: String
  suppliers: SupplierUpdateManyWithoutUserIdInput
  updatedAt: DateTime
  userName: String
  userNotifications: UserNotificationUpdateManyWithoutUserIdInput
  userRoles: UserRoleUpdateManyWithoutUserIdInput
}

input UserUpdateManyMutationInput {
  auth0Id: String
  createdAt: DateTime
  email: String
  firstName: String
  hasOnboarded: Boolean
  id: String
  lastLogin: DateTime
  lastName: String
  profileImg: String
  profileThumb: String
  socialSignIn: String
  updatedAt: DateTime
  userName: String
}

input UserUpdateOneRequiredWithoutChangeOrdersInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutChangeOrdersInput
  update: UserUpdateWithoutChangeOrdersDataInput
  upsert: UserUpsertWithoutChangeOrdersInput
}

input UserUpdateOneRequiredWithoutCompaniesInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutCompaniesInput
  update: UserUpdateWithoutCompaniesDataInput
  upsert: UserUpsertWithoutCompaniesInput
}

input UserUpdateOneRequiredWithoutInvitationsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutInvitationsInput
  update: UserUpdateWithoutInvitationsDataInput
  upsert: UserUpsertWithoutInvitationsInput
}

input UserUpdateOneRequiredWithoutInvoicesInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutInvoicesInput
  update: UserUpdateWithoutInvoicesDataInput
  upsert: UserUpsertWithoutInvoicesInput
}

input UserUpdateOneRequiredWithoutProposalsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutProposalsInput
  update: UserUpdateWithoutProposalsDataInput
  upsert: UserUpsertWithoutProposalsInput
}

input UserUpdateOneRequiredWithoutReferralsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutReferralsInput
  update: UserUpdateWithoutReferralsDataInput
  upsert: UserUpsertWithoutReferralsInput
}

input UserUpdateOneRequiredWithoutShareLinksInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutShareLinksInput
  update: UserUpdateWithoutShareLinksDataInput
  upsert: UserUpsertWithoutShareLinksInput
}

input UserUpdateOneRequiredWithoutUserNotificationsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutUserNotificationsInput
  update: UserUpdateWithoutUserNotificationsDataInput
  upsert: UserUpsertWithoutUserNotificationsInput
}

input UserUpdateOneRequiredWithoutUserRolesInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutUserRolesInput
  update: UserUpdateWithoutUserRolesDataInput
  upsert: UserUpsertWithoutUserRolesInput
}

input UserUpdateOneWithoutClientsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutClientsInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutClientsDataInput
  upsert: UserUpsertWithoutClientsInput
}

input UserUpdateOneWithoutInvoicePaymentsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutInvoicePaymentsInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutInvoicePaymentsDataInput
  upsert: UserUpsertWithoutInvoicePaymentsInput
}

input UserUpdateOneWithoutSuppliersInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutSuppliersInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutSuppliersDataInput
  upsert: UserUpsertWithoutSuppliersInput
}

input UserUpdateWithoutChangeOrdersDataInput {
  auth0Id: String
  clients: ClientUpdateManyWithoutUserIdInput
  companies: CompanyUpdateManyWithoutUserIdInput
  createdAt: DateTime
  email: String
  firstName: String
  hasOnboarded: Boolean
  id: String
  invitations: InvitationUpdateManyWithoutInviterUserIdInput
  invoicePayments: InvoicePaymentUpdateManyWithoutPaidByUserIdInput
  invoices: InvoiceUpdateManyWithoutInvoiceOwnerIdInput
  lastLogin: DateTime
  lastName: String
  profileImg: String
  profileThumb: String
  proposals: ProposalUpdateManyWithoutProposalOwnerIdInput
  referrals: ReferralUpdateManyWithoutUserIdInput
  shareLinks: ShareLinkUpdateManyWithoutSenderUserIdInput
  socialSignIn: String
  suppliers: SupplierUpdateManyWithoutUserIdInput
  updatedAt: DateTime
  userName: String
  userNotifications: UserNotificationUpdateManyWithoutUserIdInput
  userRoles: UserRoleUpdateManyWithoutUserIdInput
}

input UserUpdateWithoutClientsDataInput {
  auth0Id: String
  changeOrders: ChangeOrderUpdateManyWithoutRequestedByUserIdInput
  companies: CompanyUpdateManyWithoutUserIdInput
  createdAt: DateTime
  email: String
  firstName: String
  hasOnboarded: Boolean
  id: String
  invitations: InvitationUpdateManyWithoutInviterUserIdInput
  invoicePayments: InvoicePaymentUpdateManyWithoutPaidByUserIdInput
  invoices: InvoiceUpdateManyWithoutInvoiceOwnerIdInput
  lastLogin: DateTime
  lastName: String
  profileImg: String
  profileThumb: String
  proposals: ProposalUpdateManyWithoutProposalOwnerIdInput
  referrals: ReferralUpdateManyWithoutUserIdInput
  shareLinks: ShareLinkUpdateManyWithoutSenderUserIdInput
  socialSignIn: String
  suppliers: SupplierUpdateManyWithoutUserIdInput
  updatedAt: DateTime
  userName: String
  userNotifications: UserNotificationUpdateManyWithoutUserIdInput
  userRoles: UserRoleUpdateManyWithoutUserIdInput
}

input UserUpdateWithoutCompaniesDataInput {
  auth0Id: String
  changeOrders: ChangeOrderUpdateManyWithoutRequestedByUserIdInput
  clients: ClientUpdateManyWithoutUserIdInput
  createdAt: DateTime
  email: String
  firstName: String
  hasOnboarded: Boolean
  id: String
  invitations: InvitationUpdateManyWithoutInviterUserIdInput
  invoicePayments: InvoicePaymentUpdateManyWithoutPaidByUserIdInput
  invoices: InvoiceUpdateManyWithoutInvoiceOwnerIdInput
  lastLogin: DateTime
  lastName: String
  profileImg: String
  profileThumb: String
  proposals: ProposalUpdateManyWithoutProposalOwnerIdInput
  referrals: ReferralUpdateManyWithoutUserIdInput
  shareLinks: ShareLinkUpdateManyWithoutSenderUserIdInput
  socialSignIn: String
  suppliers: SupplierUpdateManyWithoutUserIdInput
  updatedAt: DateTime
  userName: String
  userNotifications: UserNotificationUpdateManyWithoutUserIdInput
  userRoles: UserRoleUpdateManyWithoutUserIdInput
}

input UserUpdateWithoutInvitationsDataInput {
  auth0Id: String
  changeOrders: ChangeOrderUpdateManyWithoutRequestedByUserIdInput
  clients: ClientUpdateManyWithoutUserIdInput
  companies: CompanyUpdateManyWithoutUserIdInput
  createdAt: DateTime
  email: String
  firstName: String
  hasOnboarded: Boolean
  id: String
  invoicePayments: InvoicePaymentUpdateManyWithoutPaidByUserIdInput
  invoices: InvoiceUpdateManyWithoutInvoiceOwnerIdInput
  lastLogin: DateTime
  lastName: String
  profileImg: String
  profileThumb: String
  proposals: ProposalUpdateManyWithoutProposalOwnerIdInput
  referrals: ReferralUpdateManyWithoutUserIdInput
  shareLinks: ShareLinkUpdateManyWithoutSenderUserIdInput
  socialSignIn: String
  suppliers: SupplierUpdateManyWithoutUserIdInput
  updatedAt: DateTime
  userName: String
  userNotifications: UserNotificationUpdateManyWithoutUserIdInput
  userRoles: UserRoleUpdateManyWithoutUserIdInput
}

input UserUpdateWithoutInvoicePaymentsDataInput {
  auth0Id: String
  changeOrders: ChangeOrderUpdateManyWithoutRequestedByUserIdInput
  clients: ClientUpdateManyWithoutUserIdInput
  companies: CompanyUpdateManyWithoutUserIdInput
  createdAt: DateTime
  email: String
  firstName: String
  hasOnboarded: Boolean
  id: String
  invitations: InvitationUpdateManyWithoutInviterUserIdInput
  invoices: InvoiceUpdateManyWithoutInvoiceOwnerIdInput
  lastLogin: DateTime
  lastName: String
  profileImg: String
  profileThumb: String
  proposals: ProposalUpdateManyWithoutProposalOwnerIdInput
  referrals: ReferralUpdateManyWithoutUserIdInput
  shareLinks: ShareLinkUpdateManyWithoutSenderUserIdInput
  socialSignIn: String
  suppliers: SupplierUpdateManyWithoutUserIdInput
  updatedAt: DateTime
  userName: String
  userNotifications: UserNotificationUpdateManyWithoutUserIdInput
  userRoles: UserRoleUpdateManyWithoutUserIdInput
}

input UserUpdateWithoutInvoicesDataInput {
  auth0Id: String
  changeOrders: ChangeOrderUpdateManyWithoutRequestedByUserIdInput
  clients: ClientUpdateManyWithoutUserIdInput
  companies: CompanyUpdateManyWithoutUserIdInput
  createdAt: DateTime
  email: String
  firstName: String
  hasOnboarded: Boolean
  id: String
  invitations: InvitationUpdateManyWithoutInviterUserIdInput
  invoicePayments: InvoicePaymentUpdateManyWithoutPaidByUserIdInput
  lastLogin: DateTime
  lastName: String
  profileImg: String
  profileThumb: String
  proposals: ProposalUpdateManyWithoutProposalOwnerIdInput
  referrals: ReferralUpdateManyWithoutUserIdInput
  shareLinks: ShareLinkUpdateManyWithoutSenderUserIdInput
  socialSignIn: String
  suppliers: SupplierUpdateManyWithoutUserIdInput
  updatedAt: DateTime
  userName: String
  userNotifications: UserNotificationUpdateManyWithoutUserIdInput
  userRoles: UserRoleUpdateManyWithoutUserIdInput
}

input UserUpdateWithoutProposalsDataInput {
  auth0Id: String
  changeOrders: ChangeOrderUpdateManyWithoutRequestedByUserIdInput
  clients: ClientUpdateManyWithoutUserIdInput
  companies: CompanyUpdateManyWithoutUserIdInput
  createdAt: DateTime
  email: String
  firstName: String
  hasOnboarded: Boolean
  id: String
  invitations: InvitationUpdateManyWithoutInviterUserIdInput
  invoicePayments: InvoicePaymentUpdateManyWithoutPaidByUserIdInput
  invoices: InvoiceUpdateManyWithoutInvoiceOwnerIdInput
  lastLogin: DateTime
  lastName: String
  profileImg: String
  profileThumb: String
  referrals: ReferralUpdateManyWithoutUserIdInput
  shareLinks: ShareLinkUpdateManyWithoutSenderUserIdInput
  socialSignIn: String
  suppliers: SupplierUpdateManyWithoutUserIdInput
  updatedAt: DateTime
  userName: String
  userNotifications: UserNotificationUpdateManyWithoutUserIdInput
  userRoles: UserRoleUpdateManyWithoutUserIdInput
}

input UserUpdateWithoutReferralsDataInput {
  auth0Id: String
  changeOrders: ChangeOrderUpdateManyWithoutRequestedByUserIdInput
  clients: ClientUpdateManyWithoutUserIdInput
  companies: CompanyUpdateManyWithoutUserIdInput
  createdAt: DateTime
  email: String
  firstName: String
  hasOnboarded: Boolean
  id: String
  invitations: InvitationUpdateManyWithoutInviterUserIdInput
  invoicePayments: InvoicePaymentUpdateManyWithoutPaidByUserIdInput
  invoices: InvoiceUpdateManyWithoutInvoiceOwnerIdInput
  lastLogin: DateTime
  lastName: String
  profileImg: String
  profileThumb: String
  proposals: ProposalUpdateManyWithoutProposalOwnerIdInput
  shareLinks: ShareLinkUpdateManyWithoutSenderUserIdInput
  socialSignIn: String
  suppliers: SupplierUpdateManyWithoutUserIdInput
  updatedAt: DateTime
  userName: String
  userNotifications: UserNotificationUpdateManyWithoutUserIdInput
  userRoles: UserRoleUpdateManyWithoutUserIdInput
}

input UserUpdateWithoutShareLinksDataInput {
  auth0Id: String
  changeOrders: ChangeOrderUpdateManyWithoutRequestedByUserIdInput
  clients: ClientUpdateManyWithoutUserIdInput
  companies: CompanyUpdateManyWithoutUserIdInput
  createdAt: DateTime
  email: String
  firstName: String
  hasOnboarded: Boolean
  id: String
  invitations: InvitationUpdateManyWithoutInviterUserIdInput
  invoicePayments: InvoicePaymentUpdateManyWithoutPaidByUserIdInput
  invoices: InvoiceUpdateManyWithoutInvoiceOwnerIdInput
  lastLogin: DateTime
  lastName: String
  profileImg: String
  profileThumb: String
  proposals: ProposalUpdateManyWithoutProposalOwnerIdInput
  referrals: ReferralUpdateManyWithoutUserIdInput
  socialSignIn: String
  suppliers: SupplierUpdateManyWithoutUserIdInput
  updatedAt: DateTime
  userName: String
  userNotifications: UserNotificationUpdateManyWithoutUserIdInput
  userRoles: UserRoleUpdateManyWithoutUserIdInput
}

input UserUpdateWithoutSuppliersDataInput {
  auth0Id: String
  changeOrders: ChangeOrderUpdateManyWithoutRequestedByUserIdInput
  clients: ClientUpdateManyWithoutUserIdInput
  companies: CompanyUpdateManyWithoutUserIdInput
  createdAt: DateTime
  email: String
  firstName: String
  hasOnboarded: Boolean
  id: String
  invitations: InvitationUpdateManyWithoutInviterUserIdInput
  invoicePayments: InvoicePaymentUpdateManyWithoutPaidByUserIdInput
  invoices: InvoiceUpdateManyWithoutInvoiceOwnerIdInput
  lastLogin: DateTime
  lastName: String
  profileImg: String
  profileThumb: String
  proposals: ProposalUpdateManyWithoutProposalOwnerIdInput
  referrals: ReferralUpdateManyWithoutUserIdInput
  shareLinks: ShareLinkUpdateManyWithoutSenderUserIdInput
  socialSignIn: String
  updatedAt: DateTime
  userName: String
  userNotifications: UserNotificationUpdateManyWithoutUserIdInput
  userRoles: UserRoleUpdateManyWithoutUserIdInput
}

input UserUpdateWithoutUserNotificationsDataInput {
  auth0Id: String
  changeOrders: ChangeOrderUpdateManyWithoutRequestedByUserIdInput
  clients: ClientUpdateManyWithoutUserIdInput
  companies: CompanyUpdateManyWithoutUserIdInput
  createdAt: DateTime
  email: String
  firstName: String
  hasOnboarded: Boolean
  id: String
  invitations: InvitationUpdateManyWithoutInviterUserIdInput
  invoicePayments: InvoicePaymentUpdateManyWithoutPaidByUserIdInput
  invoices: InvoiceUpdateManyWithoutInvoiceOwnerIdInput
  lastLogin: DateTime
  lastName: String
  profileImg: String
  profileThumb: String
  proposals: ProposalUpdateManyWithoutProposalOwnerIdInput
  referrals: ReferralUpdateManyWithoutUserIdInput
  shareLinks: ShareLinkUpdateManyWithoutSenderUserIdInput
  socialSignIn: String
  suppliers: SupplierUpdateManyWithoutUserIdInput
  updatedAt: DateTime
  userName: String
  userRoles: UserRoleUpdateManyWithoutUserIdInput
}

input UserUpdateWithoutUserRolesDataInput {
  auth0Id: String
  changeOrders: ChangeOrderUpdateManyWithoutRequestedByUserIdInput
  clients: ClientUpdateManyWithoutUserIdInput
  companies: CompanyUpdateManyWithoutUserIdInput
  createdAt: DateTime
  email: String
  firstName: String
  hasOnboarded: Boolean
  id: String
  invitations: InvitationUpdateManyWithoutInviterUserIdInput
  invoicePayments: InvoicePaymentUpdateManyWithoutPaidByUserIdInput
  invoices: InvoiceUpdateManyWithoutInvoiceOwnerIdInput
  lastLogin: DateTime
  lastName: String
  profileImg: String
  profileThumb: String
  proposals: ProposalUpdateManyWithoutProposalOwnerIdInput
  referrals: ReferralUpdateManyWithoutUserIdInput
  shareLinks: ShareLinkUpdateManyWithoutSenderUserIdInput
  socialSignIn: String
  suppliers: SupplierUpdateManyWithoutUserIdInput
  updatedAt: DateTime
  userName: String
  userNotifications: UserNotificationUpdateManyWithoutUserIdInput
}

input UserUpsertWithoutChangeOrdersInput {
  create: UserCreateWithoutChangeOrdersInput!
  update: UserUpdateWithoutChangeOrdersDataInput!
}

input UserUpsertWithoutClientsInput {
  create: UserCreateWithoutClientsInput!
  update: UserUpdateWithoutClientsDataInput!
}

input UserUpsertWithoutCompaniesInput {
  create: UserCreateWithoutCompaniesInput!
  update: UserUpdateWithoutCompaniesDataInput!
}

input UserUpsertWithoutInvitationsInput {
  create: UserCreateWithoutInvitationsInput!
  update: UserUpdateWithoutInvitationsDataInput!
}

input UserUpsertWithoutInvoicePaymentsInput {
  create: UserCreateWithoutInvoicePaymentsInput!
  update: UserUpdateWithoutInvoicePaymentsDataInput!
}

input UserUpsertWithoutInvoicesInput {
  create: UserCreateWithoutInvoicesInput!
  update: UserUpdateWithoutInvoicesDataInput!
}

input UserUpsertWithoutProposalsInput {
  create: UserCreateWithoutProposalsInput!
  update: UserUpdateWithoutProposalsDataInput!
}

input UserUpsertWithoutReferralsInput {
  create: UserCreateWithoutReferralsInput!
  update: UserUpdateWithoutReferralsDataInput!
}

input UserUpsertWithoutShareLinksInput {
  create: UserCreateWithoutShareLinksInput!
  update: UserUpdateWithoutShareLinksDataInput!
}

input UserUpsertWithoutSuppliersInput {
  create: UserCreateWithoutSuppliersInput!
  update: UserUpdateWithoutSuppliersDataInput!
}

input UserUpsertWithoutUserNotificationsInput {
  create: UserCreateWithoutUserNotificationsInput!
  update: UserUpdateWithoutUserNotificationsDataInput!
}

input UserUpsertWithoutUserRolesInput {
  create: UserCreateWithoutUserRolesInput!
  update: UserUpdateWithoutUserRolesDataInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  auth0Id: StringFilter
  changeOrders: ChangeOrderFilter
  clients: ClientFilter
  companies: CompanyFilter
  createdAt: DateTimeFilter
  email: StringFilter
  firstName: StringFilter
  hasOnboarded: NullableBooleanFilter
  id: StringFilter
  invitations: InvitationFilter
  invoicePayments: InvoicePaymentFilter
  invoices: InvoiceFilter
  lastLogin: NullableDateTimeFilter
  lastName: StringFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  profileImg: NullableStringFilter
  profileThumb: NullableStringFilter
  proposals: ProposalFilter
  referrals: ReferralFilter
  shareLinks: ShareLinkFilter
  socialSignIn: NullableStringFilter
  suppliers: SupplierFilter
  updatedAt: DateTimeFilter
  userName: NullableStringFilter
  userNotifications: UserNotificationFilter
  userRoles: UserRoleFilter
}

input UserWhereUniqueInput {
  auth0Id: String
  email: String
  id: String
}
